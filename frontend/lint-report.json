[{"filePath":"/home/wolf/vibereserch/frontend/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/animations/motion-fade.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/animations/motion-provider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/api/client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/api/websocket.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":40,"column":7,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":40,"endColumn":115},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | Partial<ManagerOptions & SocketOptions> | undefined`.","line":51,"column":70,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":51,"endColumn":81}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { io, type Socket } from 'socket.io-client';\nimport { useAppStore } from '../store/app-store';\nimport type { Task } from '@/types';\n\ninterface TaskProgressMessage {\n  task_id: string;\n  progress: number;\n  status: Task['status'];\n  eta?: number;\n  error_message?: string;\n}\n\ninterface NotificationMessage {\n  type?: 'info' | 'success' | 'warning' | 'error';\n  title: string;\n  message: string;\n}\n\ninterface InteractionResponsePayload {\n  message: string;\n  metadata?: Record<string, unknown>;\n}\n\ninterface ServerToClientEvents {\n  task_progress: (data: TaskProgressMessage) => void;\n  research_update: (payload: unknown) => void;\n  notification: (notification: NotificationMessage) => void;\n  clarification_request: (payload: unknown) => void;\n  message: (payload: unknown) => void;\n}\n\ninterface ClientToServerEvents {\n  join_task: (taskId: string) => void;\n  leave_task: (taskId: string) => void;\n  join_research_session: (sessionId: string) => void;\n  leave_research_session: (sessionId: string) => void;\n  interaction_response: (payload: { sessionId: string; response: InteractionResponsePayload }) => void;\n}\n\nconst WS_BASE_URL = import.meta.env.VITE_WS_BASE_URL || import.meta.env.VITE_WS_URL || 'http://154.12.50.153:8000';\n\nclass WebSocketManager {\n  private socket: Socket<ServerToClientEvents, ClientToServerEvents> | null = null;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private reconnectDelay = 1000;\n\n  connect(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.socket = io<ServerToClientEvents, ClientToServerEvents>(WS_BASE_URL, {\n          auth: {\n            token: localStorage.getItem('access_token'),\n          },\n          transports: ['websocket'],\n          timeout: 20000,\n        });\n\n        this.socket.on('connect', () => {\n          console.log('WebSocket connected');\n          useAppStore.getState().setWebSocketStatus(true);\n          this.reconnectAttempts = 0;\n          resolve();\n        });\n\n        this.socket.on('disconnect', (reason) => {\n          console.log('WebSocket disconnected:', reason);\n          useAppStore.getState().setWebSocketStatus(false);\n          this.handleReconnect();\n        });\n\n        this.socket.on('connect_error', (error) => {\n          console.error('WebSocket connection error:', error);\n          useAppStore.getState().setWebSocketStatus(false);\n          this.handleReconnect();\n          reject(error);\n        });\n\n        this.setupEventHandlers();\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  private setupEventHandlers() {\n    if (!this.socket) return;\n\n    // Task progress updates\n    this.socket.on('task_progress', (data: TaskProgressMessage) => {\n      const { task_id, progress, status, eta, error_message } = data;\n\n      const store = useAppStore.getState();\n      const existingTask = [\n        ...store.tasks.active,\n        ...store.tasks.completed,\n        ...store.tasks.failed\n      ].find(task => String(task.id) === String(task_id));\n\n      if (existingTask) {\n        const updatedTask = {\n          ...existingTask,\n          progress,\n          status,\n          eta,\n          error_message,\n          updated_at: new Date().toISOString(),\n        };\n        store.updateTask(updatedTask);\n      }\n    });\n\n    // Research session updates\n    this.socket.on('research_update', (data) => {\n      console.log('Research update:', data);\n      // Handle research session updates\n    });\n\n    // System notifications\n    this.socket.on('notification', (notification: NotificationMessage) => {\n      useAppStore.getState().addNotification({\n        type: notification.type || 'info',\n        title: notification.title,\n        message: notification.message,\n      });\n    });\n\n    // Clarification requests (for intelligent interaction)\n    this.socket.on('clarification_request', (data) => {\n      console.log('Clarification request:', data);\n      // Handle clarification requests\n    });\n  }\n\n  private handleReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n\n      setTimeout(() => {\n        this.connect().catch(() => {\n          // Reconnection failed, will try again\n        });\n      }, this.reconnectDelay * this.reconnectAttempts);\n    } else {\n      console.error('Max reconnection attempts reached');\n      useAppStore.getState().addNotification({\n        type: 'error',\n        title: '连接断开',\n        message: '无法重新连接到服务器，请刷新页面重试',\n      });\n    }\n  }\n\n  joinTaskRoom(taskId: string) {\n    if (this.socket) {\n      this.socket.emit('join_task', taskId);\n    }\n  }\n\n  leaveTaskRoom(taskId: string) {\n    if (this.socket) {\n      this.socket.emit('leave_task', taskId);\n    }\n  }\n\n  joinResearchSession(sessionId: string) {\n    if (this.socket) {\n      this.socket.emit('join_research_session', sessionId);\n    }\n  }\n\n  leaveResearchSession(sessionId: string) {\n    if (this.socket) {\n      this.socket.emit('leave_research_session', sessionId);\n    }\n  }\n\n  sendInteractionResponse(sessionId: string, response: InteractionResponsePayload) {\n    if (this.socket) {\n      this.socket.emit('interaction_response', { sessionId, response });\n    }\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      useAppStore.getState().setWebSocketStatus(false);\n    }\n  }\n\n  isConnected(): boolean {\n    return this.socket?.connected || false;\n  }\n}\n\nexport const wsManager = new WebSocketManager();\n","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/components/common/overview-metric.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/components/common/quick-actions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/components/common/splash-screen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/components/dashboard/auto-mode-cta.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/components/dashboard/insight-list.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/components/interaction/InteractionCards.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":42,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":42,"endColumn":65,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1453,1453],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":56,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":56,"endColumn":46,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1964,1964],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":58,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":58,"endColumn":33,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2032,2032],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":66,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":66,"endColumn":32,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2237,2237],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":73,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":73,"endColumn":35,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2382,2382],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":77,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":77,"endColumn":33,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2498,2498],"text":"void "},"desc":"Add void operator to ignore."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Card, Button, Progress, Space, Input, message, Tooltip } from 'antd';\nimport {\n  CheckCircleOutlined,\n  ClockCircleOutlined,\n  BulbOutlined,\n  EditOutlined,\n} from '@ant-design/icons';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useResearchStore } from '@/stores/research.store';\nimport type { ClarificationCard, ClarificationOption } from '@/types';\n\n// 导入动画JSON（需要添加到assets）\n// import thinkingAnimation from '@/assets/animations/thinking.json';\n\ninterface InteractionCardsProps {\n  sessionId: string;\n  card: ClarificationCard;\n}\n\nexport const InteractionCards: React.FC<InteractionCardsProps> = ({\n  sessionId,\n  card,\n}) => {\n  const [timeLeft, setTimeLeft] = useState(card.timeout_seconds || 5);\n  const [showCustomInput, setShowCustomInput] = useState(false);\n  const [customInput, setCustomInput] = useState('');\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const countdownRef = useRef<ReturnType<typeof setInterval>>();\n\n  const { selectOption, submitCustomInput, handleTimeout } = useResearchStore();\n\n  const handleTimeoutSelection = useCallback(async () => {\n    if (card.recommended_option_id) {\n      const recommendedOption = card.options.find(\n        (opt) => opt.option_id === card.recommended_option_id\n      );\n\n      if (recommendedOption) {\n        message.info(`已自动选择推荐选项：${recommendedOption.title}`, 3);\n        await handleTimeout(sessionId);\n      }\n    }\n  }, [card.options, card.recommended_option_id, handleTimeout, sessionId]);\n\n  const handleOptionSelect = useCallback(async (option: ClarificationOption) => {\n    // 清除定时器\n    if (timeoutRef.current) clearTimeout(timeoutRef.current);\n    if (countdownRef.current) clearInterval(countdownRef.current);\n\n    setIsProcessing(true);\n    try {\n      await selectOption(sessionId, option.option_id);\n      message.success(`已选择：${option.title}`);\n    } catch (error) {\n      message.error('选择失败，请重试');\n    } finally {\n      setIsProcessing(false);\n    }\n  }, [selectOption, sessionId]);\n\n  const handleCustomSubmit = useCallback(async () => {\n    if (!customInput.trim()) {\n      message.warning('请输入内容');\n      return;\n    }\n\n    setIsProcessing(true);\n    try {\n      await submitCustomInput(sessionId, customInput);\n      message.success('自定义输入已提交');\n      setCustomInput('');\n      setShowCustomInput(false);\n    } catch (error) {\n      message.error('提交失败，请重试');\n    } finally {\n      setIsProcessing(false);\n    }\n  }, [customInput, sessionId, submitCustomInput]);\n\n  // 倒计时逻辑\n  useEffect(() => {\n    if (card.timeout_seconds > 0) {\n      setTimeLeft(card.timeout_seconds);\n\n      countdownRef.current = setInterval(() => {\n        setTimeLeft((prev) => {\n          if (prev <= 1) {\n            void handleTimeoutSelection();\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n\n      timeoutRef.current = setTimeout(() => {\n        void handleTimeoutSelection();\n      }, card.timeout_seconds * 1000);\n    }\n\n    return () => {\n      if (countdownRef.current) clearInterval(countdownRef.current);\n      if (timeoutRef.current) clearTimeout(timeoutRef.current);\n    };\n  }, [card, handleTimeoutSelection]);\n\n  const progressPercent =\n    card.timeout_seconds > 0\n      ? ((card.timeout_seconds - timeLeft) / card.timeout_seconds) * 100\n      : 0;\n\n  return (\n    <Card\n      title={\n        <div className=\"flex justify-between items-center\">\n          <div className=\"flex items-center gap-2\">\n            <BulbOutlined className=\"text-blue-500 text-lg\" />\n            <span className=\"font-semibold\">{card.question}</span>\n          </div>\n          {card.timeout_seconds > 0 && timeLeft > 0 && (\n            <div className=\"flex items-center gap-3\">\n              <ClockCircleOutlined className=\"text-gray-500\" />\n              <span className=\"text-sm text-gray-600\">{timeLeft}秒后自动选择</span>\n              <Progress\n                type=\"circle\"\n                percent={progressPercent}\n                width={32}\n                format={() => `${timeLeft}`}\n                strokeColor={{\n                  '0%': '#108ee9',\n                  '100%': '#ff4d4f',\n                }}\n              />\n            </div>\n          )}\n        </div>\n      }\n      className=\"shadow-xl border-2 border-blue-100\"\n      bodyStyle={{ padding: '24px' }}\n    >\n      <Space direction=\"vertical\" className=\"w-full\" size=\"middle\">\n        {/* 选项列表 */}\n        <div className=\"space-y-3\">\n          {card.options.map((option) => {\n            const isRecommended = option.option_id === card.recommended_option_id;\n\n            return (\n              <motion.div\n                key={option.option_id}\n                whileHover={{ scale: 1.02 }}\n                whileTap={{ scale: 0.98 }}\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ duration: 0.3 }}\n              >\n                <Tooltip\n                  title={isRecommended ? 'AI推荐选项' : ''}\n                  placement=\"topLeft\"\n                >\n                  <Button\n                    block\n                    size=\"large\"\n                    type={isRecommended ? 'primary' : 'default'}\n                    onClick={() => handleOptionSelect(option)}\n                    disabled={isProcessing}\n                    className={`\n                      h-auto py-4 px-6 text-left relative\n                      ${isRecommended\n                        ? 'bg-gradient-to-r from-blue-500 to-blue-600 border-0 shadow-lg'\n                        : 'hover:border-blue-400 hover:shadow-md transition-all'\n                      }\n                    `}\n                  >\n                    <div className=\"flex items-start gap-3\">\n                      {isRecommended && (\n                        <CheckCircleOutlined className=\"text-white text-lg mt-1\" />\n                      )}\n                      <div className=\"flex-1\">\n                        <div className={`\n                          font-medium text-base\n                          ${isRecommended ? 'text-white' : 'text-gray-800'}\n                        `}>\n                          {option.title}\n                        </div>\n                        {option.description && (\n                          <div className={`\n                            text-sm mt-1\n                            ${isRecommended ? 'text-blue-100' : 'text-gray-500'}\n                          `}>\n                            {option.description}\n                          </div>\n                        )}\n                        {option.implications && option.implications.length > 0 && (\n                          <div className={`\n                            text-xs mt-2 space-y-1\n                            ${isRecommended ? 'text-blue-50' : 'text-gray-500'}\n                          `}>\n                            {option.implications.slice(0, 2).map((implication, index) => (\n                              <div key={index} className=\"flex items-center gap-2\">\n                                <div className=\"w-1 h-1 rounded-full bg-blue-400\" />\n                                {implication}\n                              </div>\n                            ))}\n                          </div>\n                        )}\n                        <div className=\"mt-3 flex flex-wrap items-center gap-4 text-xs text-gray-400\">\n                          {option.estimated_time && (\n                            <div>预计耗时：{option.estimated_time}</div>\n                          )}\n                          {typeof option.confidence_score === 'number' && (\n                            <div>置信度：{Math.round(option.confidence_score * 100)}%</div>\n                          )}\n                        </div>\n                        {option.estimated_results && (\n                          <div className={`\n                            mt-3 p-2 rounded text-xs\n                            ${isRecommended ? 'bg-blue-500/20 text-blue-50' : 'bg-gray-100 text-gray-600'}\n                          `}>\n                            预期结果：{option.estimated_results}\n                          </div>\n                        )}\n                      </div>\n                      {isRecommended && (\n                        <div className=\"absolute top-2 right-2\">\n                          <span className=\"bg-yellow-400 text-gray-800 text-xs px-2 py-1 rounded-full\">\n                            推荐\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  </Button>\n                </Tooltip>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        {/* 自定义输入 */}\n        {card.custom_input_allowed && (\n          <AnimatePresence>\n            {!showCustomInput ? (\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                exit={{ opacity: 0 }}\n              >\n                <Button\n                  type=\"dashed\"\n                  block\n                  size=\"large\"\n                  icon={<EditOutlined />}\n                  onClick={() => setShowCustomInput(true)}\n                  disabled={isProcessing}\n                  className=\"h-12\"\n                >\n                  其他选择（自定义输入）\n                </Button>\n              </motion.div>\n            ) : (\n              <motion.div\n                initial={{ height: 0, opacity: 0 }}\n                animate={{ height: 'auto', opacity: 1 }}\n                exit={{ height: 0, opacity: 0 }}\n                className=\"bg-gray-50 p-4 rounded-lg\"\n              >\n                <Space direction=\"vertical\" className=\"w-full\">\n                  <div className=\"text-sm text-gray-600 mb-2\">\n                    请输入您的想法：\n                  </div>\n                  <Input.TextArea\n                    value={customInput}\n                    onChange={(e) => setCustomInput(e.target.value)}\n                    placeholder=\"请详细描述您的需求或选择...\"\n                    rows={4}\n                    maxLength={500}\n                    showCount\n                    disabled={isProcessing}\n                  />\n                  <div className=\"flex gap-2 justify-end\">\n                    <Button\n                      onClick={() => {\n                        setShowCustomInput(false);\n                        setCustomInput('');\n                      }}\n                      disabled={isProcessing}\n                    >\n                      取消\n                    </Button>\n                    <Button\n                      type=\"primary\"\n                      onClick={handleCustomSubmit}\n                      loading={isProcessing}\n                    >\n                      提交\n                    </Button>\n                  </div>\n                </Space>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        )}\n\n        {/* 上下文信息 */}\n        {card.context && (\n          <div className=\"bg-blue-50 p-3 rounded-lg\">\n            <div className=\"text-xs text-gray-500\">当前阶段</div>\n            <div className=\"text-sm text-gray-700 mt-1\">{card.stage}</div>\n          </div>\n        )}\n      </Space>\n    </Card>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/components/layout/AppLayout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Space' is defined but never used.","line":2,"column":57,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":62},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Title' is assigned a value but never used.","line":25,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":97,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2153,2156],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2153,2156],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .key on an `any` value.","line":98,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":98,"endColumn":60}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Layout, Menu, Avatar, Dropdown, Badge, Button, Space, Typography, Switch, Tooltip } from 'antd';\nimport { Outlet, useNavigate, useLocation } from 'react-router-dom';\nimport {\n  DashboardOutlined,\n  ExperimentOutlined,\n  BookOutlined,\n  TeamOutlined,\n  BarChartOutlined,\n  SettingOutlined,\n  BellOutlined,\n  UserOutlined,\n  LogoutOutlined,\n  MenuFoldOutlined,\n  MenuUnfoldOutlined,\n  MoonOutlined,\n  SunOutlined,\n  SearchOutlined,\n  QuestionCircleOutlined,\n  RocketOutlined\n} from '@ant-design/icons';\nimport { motion, AnimatePresence } from 'framer-motion';\n\nconst { Header, Sider, Content, Footer } = Layout;\nconst { Title, Text } = Typography;\n\ninterface MenuItem {\n  key: string;\n  icon: React.ReactNode;\n  label: string;\n  path: string;\n  badge?: number;\n}\n\nexport const AppLayout: React.FC = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [collapsed, setCollapsed] = useState(false);\n  const [darkMode, setDarkMode] = useState(false);\n\n  const menuItems: MenuItem[] = [\n    {\n      key: 'dashboard',\n      icon: <DashboardOutlined />,\n      label: '仪表盘',\n      path: '/',\n    },\n    {\n      key: 'workspace',\n      icon: <ExperimentOutlined />,\n      label: '研究工作台',\n      path: '/workspace',\n      badge: 3,\n    },\n    {\n      key: 'library',\n      icon: <BookOutlined />,\n      label: '文献库',\n      path: '/library',\n      badge: 128,\n    },\n    {\n      key: 'tasks',\n      icon: <BarChartOutlined />,\n      label: '任务中心',\n      path: '/tasks',\n    },\n    {\n      key: 'team',\n      icon: <TeamOutlined />,\n      label: '团队协作',\n      path: '/team',\n    },\n    {\n      key: 'settings',\n      icon: <SettingOutlined />,\n      label: '设置',\n      path: '/settings',\n    },\n  ];\n\n  const userMenu = (\n    <Menu>\n      <Menu.Item key=\"profile\" icon={<UserOutlined />}>\n        个人资料\n      </Menu.Item>\n      <Menu.Item key=\"help\" icon={<QuestionCircleOutlined />}>\n        帮助中心\n      </Menu.Item>\n      <Menu.Divider />\n      <Menu.Item key=\"logout\" icon={<LogoutOutlined />} danger>\n        退出登录\n      </Menu.Item>\n    </Menu>\n  );\n\n  const handleMenuClick = (item: any) => {\n    const menuItem = menuItems.find(m => m.key === item.key);\n    if (menuItem) {\n      navigate(menuItem.path);\n    }\n  };\n\n  const currentKey = menuItems.find(item => item.path === location.pathname)?.key || 'dashboard';\n\n  return (\n    <Layout className=\"min-h-screen\">\n      {/* 侧边栏 */}\n      <Sider\n        trigger={null}\n        collapsible\n        collapsed={collapsed}\n        className=\"shadow-xl\"\n        style={{\n          background: 'linear-gradient(180deg, #001529 0%, #002140 100%)',\n        }}\n      >\n        <div className=\"h-16 flex items-center justify-center border-b border-gray-700\">\n          <motion.div\n            animate={{ rotate: collapsed ? 360 : 0 }}\n            transition={{ duration: 0.3 }}\n            className=\"flex items-center\"\n          >\n            <RocketOutlined className=\"text-3xl text-blue-400\" />\n            <AnimatePresence>\n              {!collapsed && (\n                <motion.span\n                  initial={{ opacity: 0, x: -20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  exit={{ opacity: 0, x: -20 }}\n                  className=\"ml-3 text-white font-bold text-lg\"\n                >\n                  VibeSearch\n                </motion.span>\n              )}\n            </AnimatePresence>\n          </motion.div>\n        </div>\n\n        <Menu\n          theme=\"dark\"\n          mode=\"inline\"\n          selectedKeys={[currentKey]}\n          onClick={handleMenuClick}\n          className=\"mt-4\"\n          items={menuItems.map(item => ({\n            key: item.key,\n            icon: item.icon,\n            label: (\n              <div className=\"flex items-center justify-between\">\n                <span>{item.label}</span>\n                {item.badge && !collapsed && (\n                  <Badge\n                    count={item.badge}\n                    overflowCount={99}\n                    style={{ backgroundColor: '#52c41a' }}\n                  />\n                )}\n              </div>\n            ),\n          }))}\n        />\n\n        {/* 底部用户信息 */}\n        <div className=\"absolute bottom-0 left-0 right-0 p-4 border-t border-gray-700\">\n          {collapsed ? (\n            <Avatar\n              size=\"small\"\n              src=\"https://api.dicebear.com/7.x/avataaars/svg?seed=user\"\n              className=\"cursor-pointer\"\n            />\n          ) : (\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center\">\n                <Avatar\n                  src=\"https://api.dicebear.com/7.x/avataaars/svg?seed=user\"\n                  className=\"cursor-pointer\"\n                />\n                <div className=\"ml-3\">\n                  <Text className=\"text-white block text-sm font-medium\">研究员</Text>\n                  <Text className=\"text-gray-400 text-xs\">在线</Text>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </Sider>\n\n      <Layout>\n        {/* 顶部导航栏 */}\n        <Header className=\"bg-white shadow-sm px-6 flex items-center justify-between\" style={{ height: 64 }}>\n          <div className=\"flex items-center\">\n            <Button\n              type=\"text\"\n              icon={collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}\n              onClick={() => setCollapsed(!collapsed)}\n              className=\"text-lg\"\n            />\n\n            <div className=\"ml-6 w-96\">\n              <Input\n                placeholder=\"搜索文献、项目、任务...\"\n                prefix={<SearchOutlined />}\n                className=\"rounded-full\"\n                allowClear\n              />\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-4\">\n            {/* 暗黑模式切换 */}\n            <Tooltip title={darkMode ? '切换到亮色模式' : '切换到暗色模式'}>\n              <Switch\n                checked={darkMode}\n                onChange={setDarkMode}\n                checkedChildren={<MoonOutlined />}\n                unCheckedChildren={<SunOutlined />}\n              />\n            </Tooltip>\n\n            {/* 通知 */}\n            <Badge count={5} size=\"small\">\n              <Button type=\"text\" icon={<BellOutlined />} className=\"text-lg\" />\n            </Badge>\n\n            {/* 用户菜单 */}\n            <Dropdown overlay={userMenu} placement=\"bottomRight\">\n              <Avatar\n                size={36}\n                src=\"https://api.dicebear.com/7.x/avataaars/svg?seed=user\"\n                className=\"cursor-pointer hover:shadow-lg transition-all\"\n              />\n            </Dropdown>\n          </div>\n        </Header>\n\n        {/* 主内容区 */}\n        <Content className=\"bg-gray-50\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.3 }}\n            className=\"h-full\"\n          >\n            <Outlet />\n          </motion.div>\n        </Content>\n\n        {/* 页脚 */}\n        <Footer className=\"text-center bg-white border-t\">\n          <div className=\"flex justify-center items-center gap-2\">\n            <RocketOutlined className=\"text-blue-500\" />\n            <Text type=\"secondary\">\n              VibeSearch © 2024 - AI驱动的科研文献智能分析平台\n            </Text>\n          </div>\n        </Footer>\n      </Layout>\n    </Layout>\n  );\n};\n\n// 为了兼容性，添加Input组件的导入\nimport { Input } from 'antd';","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/components/layout/app-layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/components/layout/background-aurora.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/components/layout/sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/components/layout/top-bar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/components/library/library-search-panel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/components/library/library-upload-center.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/components/library/literature-table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/components/literature/LiteratureUploadModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Space' is defined but never used.","line":2,"column":71,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":76},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AnimatePresence' is defined but never used.","line":13,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'acceptedFiles' is assigned a value but never used.","line":45,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":67},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to property where a void return was expected.","line":50,"column":13,"nodeType":"Identifier","messageId":"voidReturnProperty","endLine":50,"endColumn":26},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":55,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":55,"endColumn":38,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1535,1535],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":102,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":102,"endColumn":46,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2991,2991],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":111,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":111,"endColumn":44,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3257,3257],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":120,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":120,"endColumn":39,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3397,3397],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":128,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":128,"endColumn":36,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3625,3625],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":141,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3959,3962],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3959,3962],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":149,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":149,"endColumn":35,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4121,4121],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":153,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4224,4227],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4224,4227],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":154,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":154,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .title on an `any` value.","line":154,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":154,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":155,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":157,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .authors on an `any` value.","line":155,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":155,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":156,"column":13,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":156,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":156,"column":13,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":156,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":156,"column":13,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":156,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .authors on an `any` value.","line":156,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":156,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .map on an `any` value.","line":156,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":156,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .filter on an `any` value.","line":156,"column":77,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":156,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":158,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":158,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .abstract on an `any` value.","line":158,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":158,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":159,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":159,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .journal on an `any` value.","line":159,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":159,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":160,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":160,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .year on an `any` value.","line":160,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":160,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":161,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":161,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .doi on an `any` value.","line":161,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":161,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":163,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":163,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .url on an `any` value.","line":163,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":163,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":164,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":164,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .citations on an `any` value.","line":164,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":164,"endColumn":40},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":176,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":176,"endColumn":51,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[5011,5011],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":178,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":178,"endColumn":98,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[5077,5077],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":182,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":182,"endColumn":71,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[5229,5229],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":188,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":188,"endColumn":32,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[5369,5369],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":196,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":196,"endColumn":44,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[5520,5520],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":200,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":200,"endColumn":40,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[5607,5607],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":223,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":223,"endColumn":72,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[6275,6275],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":227,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":227,"endColumn":35,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[6417,6417],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":401,"column":33,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12585,12614],"text":"选择格式为 &quot;Zotero RDF\" 或 \"BibTeX\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12585,12614],"text":"选择格式为 &ldquo;Zotero RDF\" 或 \"BibTeX\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12585,12614],"text":"选择格式为 &#34;Zotero RDF\" 或 \"BibTeX\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12585,12614],"text":"选择格式为 &rdquo;Zotero RDF\" 或 \"BibTeX\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":401,"column":44,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12585,12614],"text":"选择格式为 \"Zotero RDF&quot; 或 \"BibTeX\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12585,12614],"text":"选择格式为 \"Zotero RDF&ldquo; 或 \"BibTeX\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12585,12614],"text":"选择格式为 \"Zotero RDF&#34; 或 \"BibTeX\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12585,12614],"text":"选择格式为 \"Zotero RDF&rdquo; 或 \"BibTeX\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":401,"column":48,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12585,12614],"text":"选择格式为 \"Zotero RDF\" 或 &quot;BibTeX\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12585,12614],"text":"选择格式为 \"Zotero RDF\" 或 &ldquo;BibTeX\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12585,12614],"text":"选择格式为 \"Zotero RDF\" 或 &#34;BibTeX\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12585,12614],"text":"选择格式为 \"Zotero RDF\" 或 &rdquo;BibTeX\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":401,"column":55,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12585,12614],"text":"选择格式为 \"Zotero RDF\" 或 \"BibTeX&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12585,12614],"text":"选择格式为 \"Zotero RDF\" 或 \"BibTeX&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12585,12614],"text":"选择格式为 \"Zotero RDF\" 或 \"BibTeX&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12585,12614],"text":"选择格式为 \"Zotero RDF\" 或 \"BibTeX&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":402,"column":30,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12646,12666],"text":"勾选 &quot;导出文件\" 选项（如需要PDF）"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12646,12666],"text":"勾选 &ldquo;导出文件\" 选项（如需要PDF）"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12646,12666],"text":"勾选 &#34;导出文件\" 选项（如需要PDF）"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12646,12666],"text":"勾选 &rdquo;导出文件\" 选项（如需要PDF）"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":402,"column":35,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12646,12666],"text":"勾选 \"导出文件&quot; 选项（如需要PDF）"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12646,12666],"text":"勾选 \"导出文件&ldquo; 选项（如需要PDF）"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12646,12666],"text":"勾选 \"导出文件&#34; 选项（如需要PDF）"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12646,12666],"text":"勾选 \"导出文件&rdquo; 选项（如需要PDF）"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":423,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":423,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13363,13366],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13363,13366],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":49,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Modal, Upload, Tabs, Input, Button, message, Progress, List, Space, Tag, Alert } from 'antd';\nimport {\n  InboxOutlined,\n  FileTextOutlined,\n  LinkOutlined,\n  CloudUploadOutlined,\n  FilePdfOutlined,\n  CheckCircleOutlined,\n  CloseCircleOutlined,\n  LoadingOutlined,\n} from '@ant-design/icons';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useDropzone } from 'react-dropzone';\nimport { apiClient } from '@/services/api/client';\nimport { literatureAPI, type LiteratureItem } from '@/services/api/literature';\n\ninterface UploadModalProps {\n  visible: boolean;\n  onClose: () => void;\n  projectId: number;\n  onSuccess?: () => void;\n}\n\ninterface UploadFile {\n  name: string;\n  size: number;\n  status: 'waiting' | 'uploading' | 'success' | 'error';\n  progress: number;\n  message?: string;\n}\n\nexport const LiteratureUploadModal: React.FC<UploadModalProps> = ({\n  visible,\n  onClose,\n  projectId,\n  onSuccess,\n}) => {\n  const [activeTab, setActiveTab] = useState('pdf');\n  const [uploadFiles, setUploadFiles] = useState<UploadFile[]>([]);\n  const [dois, setDois] = useState('');\n  const [zoteroFile, setZoteroFile] = useState<File | null>(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const { getRootProps, getInputProps, isDragActive, acceptedFiles } = useDropzone({\n    accept: {\n      'application/pdf': ['.pdf']\n    },\n    multiple: true,\n    onDrop: handlePDFDrop,\n  });\n\n  async function handlePDFDrop(files: File[]) {\n    if (!projectId) {\n      message.warning('请先选择项目再上传文献');\n      return;\n    }\n    const newFiles: UploadFile[] = files.map(file => ({\n      name: file.name,\n      size: file.size,\n      status: 'waiting' as const,\n      progress: 0,\n    }));\n\n    setUploadFiles(prev => [...prev, ...newFiles]);\n\n    // 批量上传\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i];\n      const fileIndex = uploadFiles.length + i;\n\n      try {\n        setUploadFiles(prev => prev.map((f, idx) =>\n          idx === fileIndex ? { ...f, status: 'uploading' as const } : f\n        ));\n\n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('project_id', projectId.toString());\n\n        await apiClient.post<{ success: boolean; data: LiteratureItem }>(\n          '/api/literature/upload',\n          formData,\n          {\n            headers: {\n              'Content-Type': 'multipart/form-data',\n            },\n            onUploadProgress: (progressEvent) => {\n              if (!progressEvent.total) return;\n              const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n              setUploadFiles(prev => prev.map((f, idx) =>\n                idx === fileIndex ? { ...f, progress } : f\n              ));\n            }\n          }\n        );\n\n        setUploadFiles(prev => prev.map((f, idx) =>\n          idx === fileIndex ? { ...f, status: 'success' as const, progress: 100 } : f\n        ));\n\n        message.success(`${file.name} 上传成功`);\n      } catch (error) {\n        setUploadFiles(prev => prev.map((f, idx) =>\n          idx === fileIndex ? {\n            ...f,\n            status: 'error' as const,\n            message: '上传失败'\n          } : f\n        ));\n        message.error(`${file.name} 上传失败`);\n      }\n    }\n\n    onSuccess?.();\n  }\n\n  async function handleDOIImport() {\n    if (!projectId) {\n      message.warning('请先选择项目再导入DOI');\n      return;\n    }\n    const doiList = dois.split('\\n')\n      .map(d => d.trim())\n      .filter(d => d && (d.startsWith('10.') || d.includes('doi.org')));\n\n    if (doiList.length === 0) {\n      message.warning('请输入有效的DOI');\n      return;\n    }\n\n    setIsProcessing(true);\n\n    try {\n      const searchResponse = (await literatureAPI.searchWithAI({\n        query: doiList.join(' '),\n        project_id: projectId,\n        max_results: doiList.length,\n      })) as {\n        success: boolean;\n        papers: Array<Record<string, any>>;\n        total_count: number;\n        query: string;\n      };\n\n      const papers = searchResponse?.papers ?? [];\n\n      if (papers.length === 0) {\n        message.info('未检索到匹配的文献');\n        return;\n      }\n\n      const literaturePayload = papers.map((paper: any) => ({\n        title: paper.title ?? '',\n        authors: typeof paper.authors === 'string'\n          ? paper.authors.split(',').map((author: string) => author.trim()).filter(Boolean)\n          : [],\n        abstract: paper.abstract ?? '',\n        journal: paper.journal ?? '',\n        publication_year: paper.year ?? undefined,\n        doi: paper.doi ?? '',\n        source_platform: 'ai_search',\n        source_url: paper.url ?? '',\n        citation_count: paper.citations ?? 0,\n        quality_score: 0,\n      }));\n\n      const batchAddResponse = (await literatureAPI.batchAdd(projectId, literaturePayload)) as {\n        success: boolean;\n        message: string;\n        added_count: number;\n        skipped_count: number;\n      };\n\n      if (batchAddResponse?.message) {\n        message.success(batchAddResponse.message);\n      } else {\n        message.success(`成功添加 ${batchAddResponse?.added_count ?? literaturePayload.length} 篇文献`);\n      }\n\n      if (batchAddResponse?.skipped_count) {\n        message.warning(`跳过 ${batchAddResponse.skipped_count} 篇重复文献`);\n      }\n\n      setDois('');\n      onSuccess?.();\n    } catch (error) {\n      message.error('DOI导入失败');\n    } finally {\n      setIsProcessing(false);\n    }\n  }\n\n  async function handleZoteroImport() {\n    if (!projectId) {\n      message.warning('请先选择项目再导入Zotero文件');\n      return;\n    }\n    if (!zoteroFile) {\n      message.warning('请选择Zotero导出文件');\n      return;\n    }\n\n    setIsProcessing(true);\n\n    try {\n      const formData = new FormData();\n      formData.append('file', zoteroFile);\n      formData.append('project_id', projectId.toString());\n      formData.append('import_type', 'zotero');\n\n      const response = (await apiClient.post<{ imported_count?: number; message?: string }>(\n        '/api/literature/upload',\n        formData,\n        {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n          },\n        }\n      )) as unknown as { imported_count?: number; message?: string };\n\n      const importedCount = response.imported_count ?? 0;\n      message.success(response.message || `成功导入 ${importedCount} 篇文献`);\n      setZoteroFile(null);\n      onSuccess?.();\n    } catch (error) {\n      message.error('Zotero导入失败');\n    } finally {\n      setIsProcessing(false);\n    }\n  }\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes < 1024) return bytes + ' B';\n    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';\n    return (bytes / (1024 * 1024)).toFixed(1) + ' MB';\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'success':\n        return <CheckCircleOutlined className=\"text-green-500\" />;\n      case 'error':\n        return <CloseCircleOutlined className=\"text-red-500\" />;\n      case 'uploading':\n        return <LoadingOutlined className=\"text-blue-500\" />;\n      default:\n        return <CloudUploadOutlined className=\"text-gray-400\" />;\n    }\n  };\n\n  return (\n    <Modal\n      title=\"导入文献\"\n      open={visible}\n      onCancel={onClose}\n      width={800}\n      footer={null}\n      className=\"literature-upload-modal\"\n    >\n      <Tabs\n        activeKey={activeTab}\n        onChange={setActiveTab}\n        items={[\n          {\n            key: 'pdf',\n            label: (\n              <span>\n                <FilePdfOutlined /> PDF上传\n              </span>\n            ),\n            children: (\n              <div className=\"space-y-4\">\n                <div\n                  {...getRootProps()}\n                  className={`\n                    border-2 border-dashed rounded-lg p-8 text-center cursor-pointer\n                    transition-all duration-200\n                    ${isDragActive\n                      ? 'border-blue-400 bg-blue-50'\n                      : 'border-gray-300 hover:border-blue-400 hover:bg-gray-50'\n                    }\n                  `}\n                >\n                  <input {...getInputProps()} />\n                  <InboxOutlined className=\"text-5xl text-gray-400 mb-4\" />\n                  <p className=\"text-lg text-gray-600 mb-2\">\n                    {isDragActive ? '释放文件以上传' : '拖拽PDF文件到此处，或点击选择文件'}\n                  </p>\n                  <p className=\"text-sm text-gray-400\">支持批量上传，单个文件最大50MB</p>\n                </div>\n\n                {/* 上传列表 */}\n                {uploadFiles.length > 0 && (\n                  <div className=\"mt-4\">\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <span className=\"font-medium\">上传列表</span>\n                      <Button\n                        size=\"small\"\n                        onClick={() => setUploadFiles([])}\n                        disabled={uploadFiles.some(f => f.status === 'uploading')}\n                      >\n                        清空列表\n                      </Button>\n                    </div>\n                    <List\n                      dataSource={uploadFiles}\n                      renderItem={(file, index) => (\n                        <List.Item>\n                          <motion.div\n                            initial={{ opacity: 0, x: -20 }}\n                            animate={{ opacity: 1, x: 0 }}\n                            transition={{ delay: index * 0.05 }}\n                            className=\"w-full\"\n                          >\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <div className=\"flex items-center gap-2\">\n                                {getStatusIcon(file.status)}\n                                <span className=\"text-sm font-medium\">{file.name}</span>\n                                <Tag>{formatFileSize(file.size)}</Tag>\n                              </div>\n                              {file.status === 'error' && (\n                                <span className=\"text-xs text-red-500\">{file.message}</span>\n                              )}\n                            </div>\n                            {file.status === 'uploading' && (\n                              <Progress\n                                percent={file.progress}\n                                size=\"small\"\n                                strokeColor=\"#1890ff\"\n                              />\n                            )}\n                          </motion.div>\n                        </List.Item>\n                      )}\n                    />\n                  </div>\n                )}\n              </div>\n            ),\n          },\n          {\n            key: 'doi',\n            label: (\n              <span>\n                <LinkOutlined /> DOI导入\n              </span>\n            ),\n            children: (\n              <div className=\"space-y-4\">\n                <Alert\n                  message=\"DOI导入说明\"\n                  description=\"输入DOI号码，每行一个。支持完整URL或仅DOI号码（如：10.1038/nature12373）\"\n                  type=\"info\"\n                  showIcon\n                />\n\n                <div>\n                  <div className=\"mb-2 font-medium\">输入DOI列表：</div>\n                  <Input.TextArea\n                    value={dois}\n                    onChange={(e) => setDois(e.target.value)}\n                    placeholder={`10.1038/nature12373\n10.1126/science.1234567\nhttps://doi.org/10.1016/j.cell.2020.01.001`}\n                    rows={10}\n                    disabled={isProcessing}\n                  />\n                  <div className=\"text-xs text-gray-500 mt-1\">\n                    已输入 {dois.split('\\n').filter(d => d.trim()).length} 个DOI\n                  </div>\n                </div>\n\n                <Button\n                  type=\"primary\"\n                  onClick={handleDOIImport}\n                  loading={isProcessing}\n                  disabled={!dois.trim()}\n                  block\n                >\n                  开始导入\n                </Button>\n              </div>\n            ),\n          },\n          {\n            key: 'zotero',\n            label: (\n              <span>\n                <FileTextOutlined /> Zotero导入\n              </span>\n            ),\n            children: (\n              <div className=\"space-y-4\">\n                <Alert\n                  message=\"Zotero导入步骤\"\n                  description={\n                    <ol className=\"list-decimal list-inside space-y-1 mt-2\">\n                      <li>在Zotero中选择要导出的文献</li>\n                      <li>点击 文件 → 导出文献库</li>\n                      <li>选择格式为 \"Zotero RDF\" 或 \"BibTeX\"</li>\n                      <li>勾选 \"导出文件\" 选项（如需要PDF）</li>\n                      <li>上传导出的文件</li>\n                    </ol>\n                  }\n                  type=\"info\"\n                  showIcon\n                />\n\n                <Upload.Dragger\n                  accept=\".rdf,.bib,.bibtex,.json\"\n                  beforeUpload={(file) => {\n                    setZoteroFile(file);\n                    return false;\n                  }}\n                  maxCount={1}\n                  onRemove={() => setZoteroFile(null)}\n                  fileList={zoteroFile ? [{\n                    uid: '-1',\n                    name: zoteroFile.name,\n                    status: 'done',\n                    size: zoteroFile.size,\n                  } as any] : []}\n                >\n                  <p className=\"ant-upload-drag-icon\">\n                    <InboxOutlined className=\"text-4xl text-gray-400\" />\n                  </p>\n                  <p className=\"ant-upload-text\">点击或拖拽Zotero导出文件到此处</p>\n                  <p className=\"ant-upload-hint\">支持 .rdf, .bib, .bibtex, .json 格式</p>\n                </Upload.Dragger>\n\n                <Button\n                  type=\"primary\"\n                  onClick={handleZoteroImport}\n                  loading={isProcessing}\n                  disabled={!zoteroFile}\n                  block\n                >\n                  开始导入\n                </Button>\n              </div>\n            ),\n          },\n        ]}\n      />\n    </Modal>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/components/research/ResearchResultPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":67,"column":20,"nodeType":"TSAsExpression","messageId":"anyAssignment","endLine":67,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":67,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1934,1937],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1934,1937],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo } from 'react';\nimport { Card, Tabs, Button, Space, Tag, List, Typography, Tooltip, Progress, Badge, Empty } from 'antd';\nimport {\n  FileTextOutlined,\n  BulbOutlined,\n  ExperimentOutlined,\n  DownloadOutlined,\n  ShareAltOutlined,\n  SyncOutlined,\n  BookOutlined,\n  OrderedListOutlined,\n  QuestionCircleOutlined,\n  ToolOutlined,\n} from '@ant-design/icons';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport ReactMarkdown from 'react-markdown';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport type { ResearchResult } from '@/types';\n\nconst { TabPane } = Tabs;\nconst { Title, Text, Paragraph } = Typography;\n\ninterface ResearchResultPanelProps {\n  result: ResearchResult;\n  onExport?: () => void;\n  onShare?: () => void;\n  onRegenerateExperience?: () => void;\n}\n\nconst modeColorMap: Record<ResearchResult['mode'], string> = {\n  rag: '#52c41a',\n  deep: '#1890ff',\n  auto: '#722ed1',\n};\n\nconst statusBadge = (status: ResearchResult['status'], error?: string) => {\n  switch (status) {\n    case 'pending':\n      return <Badge status=\"default\" text=\"等待中\" />;\n    case 'processing':\n      return <Badge status=\"processing\" text=\"处理中\" />;\n    case 'completed':\n      return <Badge status=\"success\" text=\"已完成\" />;\n    case 'error':\n      return <Badge status=\"error\" text={error || '处理失败'} />;\n    default:\n      return null;\n  }\n};\n\nconst renderMarkdown = (content: string) => (\n  <ReactMarkdown\n    components={{\n      code({ className, children, ...props }) {\n        const match = /language-(\\w+)/.exec(className || '');\n        const isInline = !match;\n        if (isInline) {\n          return (\n            <code className={className} {...props}>\n              {children}\n            </code>\n          );\n        }\n        return (\n          <SyntaxHighlighter\n            style={vscDarkPlus as any}\n            language={match?.[1]}\n            PreTag=\"div\"\n          >\n            {String(children).replace(/\\n$/, '')}\n          </SyntaxHighlighter>\n        );\n      },\n    }}\n  >\n    {content || '_暂无内容_'}\n  </ReactMarkdown>\n);\n\nconst confidencePercent = (confidence: number | undefined) =>\n  Math.round(Math.min(Math.max((confidence ?? 0) * 100, 0), 100));\n\nexport const ResearchResultPanel: React.FC<ResearchResultPanelProps> = ({\n  result,\n  onExport,\n  onShare,\n  onRegenerateExperience,\n}) => {\n  const modeTag = useMemo(() => (\n    <Tag color={modeColorMap[result.mode] || '#999'}>\n      {result.mode === 'rag' && 'RAG模式'}\n      {result.mode === 'deep' && '深度研究'}\n      {result.mode === 'auto' && '全自动'}\n    </Tag>\n  ), [result.mode]);\n\n  const confidence = confidencePercent(result.confidence);\n\n  return (\n    <Card className=\"research-result-panel\">\n      <div className=\"flex justify-between items-center mb-4\">\n        <div className=\"flex items-center gap-3\">\n          {modeTag}\n          {statusBadge(result.status, result.error_message)}\n          <Text type=\"secondary\">{new Date(result.timestamp).toLocaleString()}</Text>\n        </div>\n        <Space>\n          {result.status === 'completed' && onRegenerateExperience && (\n            <Tooltip title=\"重新生成经验\">\n              <Button icon={<SyncOutlined />} onClick={onRegenerateExperience} />\n            </Tooltip>\n          )}\n          <Tooltip title=\"导出结果\">\n            <Button icon={<DownloadOutlined />} onClick={onExport} disabled={!onExport} />\n          </Tooltip>\n          <Tooltip title=\"分享结果\">\n            <Button icon={<ShareAltOutlined />} onClick={onShare} disabled={!onShare} />\n          </Tooltip>\n        </Space>\n      </div>\n\n      {result.status === 'error' ? (\n        <Card className=\"bg-red-50 border-red-100\">\n          <Text type=\"danger\">{result.error_message || '处理过程中出现错误，请稍后再试。'}</Text>\n        </Card>\n      ) : (\n        <>\n          <div className=\"flex flex-wrap items-center gap-6 mb-4\">\n            <div>\n              <Text type=\"secondary\">整体可信度</Text>\n              <Progress\n                percent={confidence}\n                status={confidence > 70 ? 'success' : confidence > 40 ? 'active' : 'exception'}\n                size=\"small\"\n                className=\"w-48\"\n              />\n            </div>\n            <div>\n              <Text type=\"secondary\">引用文献数量</Text>\n              <div className=\"text-lg font-semibold\">{result.literature_count}</div>\n            </div>\n          </div>\n\n          <Tabs defaultActiveKey=\"answer\">\n            <TabPane tab={<span><FileTextOutlined /> 研究答案</span>} key=\"answer\">\n              <AnimatePresence mode=\"wait\">\n                <motion.div\n                  key=\"answer-content\"\n                  initial={{ opacity: 0, y: 12 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: -12 }}\n                >\n                  <Card bordered={false} className=\"bg-white\">\n                    {renderMarkdown(result.answer)}\n\n                    {result.key_findings?.length ? (\n                      <div className=\"mt-6\">\n                        <Title level={5}>\n                          <OrderedListOutlined className=\"mr-2\" /> 关键发现\n                        </Title>\n                        <List\n                          size=\"small\"\n                          dataSource={result.key_findings}\n                          renderItem={(item, index) => (\n                            <List.Item>\n                              <Text>{index + 1}. {item}</Text>\n                            </List.Item>\n                          )}\n                        />\n                      </div>\n                    ) : null}\n                  </Card>\n                </motion.div>\n              </AnimatePresence>\n            </TabPane>\n\n            <TabPane tab={<span><BulbOutlined /> 详细分析</span>} key=\"analysis\">\n              <Card bordered={false}>{renderMarkdown(result.detailed_analysis)}</Card>\n            </TabPane>\n\n            <TabPane tab={<span><ExperimentOutlined /> 研究建议</span>} key=\"suggestions\">\n              <Card bordered={false}>\n                <Space direction=\"vertical\" className=\"w-full\" size=\"large\">\n                  <div>\n                    <Title level={5}><QuestionCircleOutlined className=\"mr-2\" /> 研究空白</Title>\n                    {result.research_gaps?.length ? (\n                      <List\n                        size=\"small\"\n                        dataSource={result.research_gaps}\n                        renderItem={(item) => <List.Item>{item}</List.Item>}\n                      />\n                    ) : (\n                      <Empty description=\"暂无研究空白\" image={Empty.PRESENTED_IMAGE_SIMPLE} />\n                    )}\n                  </div>\n\n                  <div>\n                    <Title level={5}><QuestionCircleOutlined className=\"mr-2\" /> 后续问题</Title>\n                    {result.next_questions?.length ? (\n                      <List\n                        size=\"small\"\n                        dataSource={result.next_questions}\n                        renderItem={(item) => <List.Item>{item}</List.Item>}\n                      />\n                    ) : (\n                      <Empty description=\"暂无后续问题\" image={Empty.PRESENTED_IMAGE_SIMPLE} />\n                    )}\n                  </div>\n\n                  <div>\n                    <Title level={5}><ToolOutlined className=\"mr-2\" /> 方法学建议</Title>\n                    {result.methodology_suggestions?.length ? (\n                      <List\n                        size=\"small\"\n                        dataSource={result.methodology_suggestions}\n                        renderItem={(item) => <List.Item>{item}</List.Item>}\n                      />\n                    ) : (\n                      <Empty description=\"暂无方法学建议\" image={Empty.PRESENTED_IMAGE_SIMPLE} />\n                    )}\n                  </div>\n                </Space>\n              </Card>\n            </TabPane>\n\n            <TabPane tab={<span><BookOutlined /> 参考文献</span>} key=\"sources\">\n              <Card bordered={false}>\n                {result.sources?.length ? (\n                  <List\n                    dataSource={result.sources}\n                    renderItem={(source, index) => (\n                      <List.Item key={source.id || index}>\n                        <List.Item.Meta\n                          title={\n                            <span>\n                              {index + 1}. {source.title || '未命名文献'}\n                              {source.confidence !== undefined && (\n                                <Tag color={source.confidence > 0.7 ? 'green' : source.confidence > 0.4 ? 'blue' : 'orange'} className=\"ml-2\">\n                                  置信度 {Math.round((source.confidence || 0) * 100)}%\n                                </Tag>\n                              )}\n                            </span>\n                          }\n                          description={\n                            <div className=\"text-sm text-gray-600 space-y-1\">\n                              {source.authors?.length ? <div>作者：{source.authors.join(', ')}</div> : null}\n                              {source.journal ? <div>期刊：{source.journal}{source.year ? ` (${source.year})` : ''}</div> : null}\n                              {source.doi ? <div>DOI：{source.doi}</div> : null}\n                            </div>\n                          }\n                        />\n                      </List.Item>\n                    )}\n                  />\n                ) : (\n                  <Empty description=\"暂无引用文献\" image={Empty.PRESENTED_IMAGE_SIMPLE} />\n                )}\n              </Card>\n            </TabPane>\n\n            {result.main_experiences?.length ? (\n              <TabPane tab={<span><BookOutlined /> 主经验</span>} key=\"experiences\">\n                <Card bordered={false}>\n                  <List\n                    dataSource={result.main_experiences}\n                    renderItem={(experience, index) => (\n                      <List.Item key={experience.id || index}>\n                        <List.Item.Meta\n                          title={experience.title || `经验 ${index + 1}`}\n                          description={\n                            <div className=\"space-y-2 text-sm text-gray-600\">\n                              {experience.content && <Paragraph>{experience.content}</Paragraph>}\n                              {experience.key_findings?.length ? (\n                                <div>\n                                  <Text strong>关键要点：</Text>\n                                  <List\n                                    size=\"small\"\n                                    dataSource={experience.key_findings}\n                                    renderItem={(item) => <List.Item>{item}</List.Item>}\n                                  />\n                                </div>\n                              ) : null}\n                            </div>\n                          }\n                        />\n                      </List.Item>\n                    )}\n                  />\n                </Card>\n              </TabPane>\n            ) : null}\n          </Tabs>\n        </>\n      )}\n    </Card>\n  );\n};\n\nexport default ResearchResultPanel;\n","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/components/research/auto-panel.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1297,1300],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1297,1300],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of an `any` typed value.","line":42,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":42,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":99,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":99,"endColumn":68},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":99,"column":24,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":99,"endColumn":44,"fix":{"range":[3287,3294],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3291,3294],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3291,3294],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .answer on an `any` value.","line":99,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":99,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":100,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":100,"endColumn":94},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":100,"column":35,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":100,"endColumn":55,"fix":{"range":[3367,3374],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":100,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3371,3374],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3371,3374],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .detailed_analysis on an `any` value.","line":100,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":100,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":101,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":101,"endColumn":71},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":101,"column":30,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":101,"endColumn":50,"fix":{"range":[3457,3464],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3461,3464],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3461,3464],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .key_findings on an `any` value.","line":101,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":101,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":102,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":102,"endColumn":68},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":102,"column":28,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":102,"endColumn":48,"fix":{"range":[3527,3534],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3531,3534],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3531,3534],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .confidence on an `any` value.","line":102,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":102,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":103,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":103,"endColumn":61},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":103,"column":25,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":103,"endColumn":45,"fix":{"range":[3593,3600],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3597,3600],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3597,3600],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .sources on an `any` value.","line":103,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":103,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":104,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":104,"endColumn":73},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":104,"column":31,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":104,"endColumn":51,"fix":{"range":[3661,3668],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":104,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3665,3668],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3665,3668],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .research_gaps on an `any` value.","line":104,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":104,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":105,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":105,"endColumn":75},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":105,"column":32,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":105,"endColumn":52,"fix":{"range":[3736,3743],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":105,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3740,3743],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3740,3743],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .next_questions on an `any` value.","line":105,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":105,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":106,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":106,"endColumn":93},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":106,"column":41,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":106,"endColumn":61,"fix":{"range":[3821,3828],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3825,3828],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3825,3828],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .methodology_suggestions on an `any` value.","line":106,"column":64,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":106,"endColumn":87},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":107,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":107,"endColumn":78},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":107,"column":34,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":107,"endColumn":54,"fix":{"range":[3908,3915],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3912,3915],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3912,3915],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .literature_count on an `any` value.","line":107,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":107,"endColumn":73}],"suppressedMessages":[],"errorCount":38,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":9,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { triggerResearch } from '@/services/api/research';\nimport { ResearchResultPanel } from '@/components/research/ResearchResultPanel';\nimport { Empty, Spin } from 'antd';\nimport styles from './auto-panel.module.css';\nimport { motion } from 'framer-motion';\nimport type { ResearchResult } from '@/types';\n\ninterface Props {\n  sessionId: string | null;\n  projectId: number | null;\n}\n\nexport function AutoPanel({ sessionId, projectId }: Props) {\n  const [goal, setGoal] = useState('');\n  const [keywords, setKeywords] = useState<string>('');\n  const [agent, setAgent] = useState<'claude' | 'codex' | 'gemini'>('claude');\n\n  const mutation = useMutation({\n    mutationFn: async () => {\n      if (!projectId) {\n        throw new Error('未选择项目，无法启动全自动研究');\n      }\n\n      const response = (await triggerResearch({\n        project_id: projectId,\n        query: goal,\n        mode: 'auto',\n        keywords: keywords\n          .split(',')\n          .map((word) => word.trim())\n          .filter(Boolean),\n        auto_config: {\n          enable_ai_filtering: true,\n          enable_pdf_processing: true,\n          enable_structured_extraction: true,\n        },\n        agent,\n      })) as { mode: string; payload: any };\n\n      return response.payload;\n    },\n  });\n\n  const disabled = !projectId || !goal.trim();\n\n  return (\n    <section className={styles.panel}>\n      <header>\n        <h2>全自动研究流水线</h2>\n        <span>Session: {sessionId ?? '未启动'}</span>\n      </header>\n      <div className={styles.form}>\n        <label>研究目标</label>\n        <textarea\n          rows={3}\n          placeholder=\"描述希望自动探索的研究课题\"\n          value={goal}\n          onChange={(event) => setGoal(event.target.value)}\n        />\n        <label>初始关键词（逗号分隔）</label>\n        <input\n          placeholder=\"例如：solid electrolyte, garnet, thin film\"\n          value={keywords}\n          onChange={(event) => setKeywords(event.target.value)}\n        />\n        <label>调度核心</label>\n        <select value={agent} onChange={(event) => setAgent(event.target.value as 'claude' | 'codex' | 'gemini')}>\n          <option value=\"claude\">Claude Code</option>\n          <option value=\"codex\">CodeX</option>\n          <option value=\"gemini\">Gemini CLI</option>\n        </select>\n        <motion.button\n          whileHover={disabled ? undefined : { scale: 1.02 }}\n          whileTap={disabled ? undefined : { scale: 0.97 }}\n          disabled={disabled || mutation.isPending}\n          onClick={() => mutation.mutate()}\n        >\n          {mutation.isPending ? '执行中…' : '启动全自动流水线'}\n        </motion.button>\n      </div>\n      <div className={styles.result}>\n        <h3>流水线状态</h3>\n        {mutation.isPending ? (\n          <div style={{ textAlign: 'center', padding: '40px' }}>\n            <Spin size=\"large\" />\n            <div style={{ marginTop: '16px' }}>Agent 正在生成任务编排方案…</div>\n          </div>\n        ) : mutation.data ? (\n          <ResearchResultPanel\n            result={{\n              id: `auto-${Date.now()}`,\n              project_id: projectId ?? 0,\n              mode: 'auto',\n              question: goal,\n              status: 'completed',\n              timestamp: new Date().toISOString(),\n              answer: (mutation.data as any)?.answer || '自动流水线执行完成',\n              detailed_analysis: (mutation.data as any)?.detailed_analysis || '智能体已完成任务编排和执行',\n              key_findings: (mutation.data as any)?.key_findings || [],\n              confidence: (mutation.data as any)?.confidence || 0.8,\n              sources: (mutation.data as any)?.sources || [],\n              research_gaps: (mutation.data as any)?.research_gaps || [],\n              next_questions: (mutation.data as any)?.next_questions || [],\n              methodology_suggestions: (mutation.data as any)?.methodology_suggestions || [],\n              literature_count: (mutation.data as any)?.literature_count || 0,\n              keywords: keywords.split(',').map(k => k.trim()).filter(Boolean),\n              agent,\n              ...mutation.data\n            } as ResearchResult}\n            onExport={() => {\n              // TODO: 实现导出功能\n              console.log('Export auto result');\n            }}\n            onShare={() => {\n              // TODO: 实现分享功能\n              console.log('Share auto result');\n            }}\n            onRegenerateExperience={() => {\n              // TODO: 实现重新生成经验功能\n              console.log('Regenerate experience');\n            }}\n          />\n        ) : (\n          <Empty description=\"暂无结果，请启动全自动流水线\" />\n        )}\n      </div>\n    </section>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/components/research/clarification-deck.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/components/research/deep-panel.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[980,983],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[980,983],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of an `any` typed value.","line":32,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":32,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":83,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":83,"endColumn":67},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":83,"column":24,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":83,"endColumn":44,"fix":{"range":[2738,2745],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2742,2745],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2742,2745],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .answer on an `any` value.","line":83,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":83,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":84,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":84,"endColumn":88},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":84,"column":35,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":84,"endColumn":55,"fix":{"range":[2817,2824],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2821,2824],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2821,2824],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .detailed_analysis on an `any` value.","line":84,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":84,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":85,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":85,"endColumn":71},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":85,"column":30,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":85,"endColumn":50,"fix":{"range":[2901,2908],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":85,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2905,2908],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2905,2908],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .key_findings on an `any` value.","line":85,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":85,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":86,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":86,"endColumn":68},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":86,"column":28,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":86,"endColumn":48,"fix":{"range":[2971,2978],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2975,2978],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2975,2978],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .confidence on an `any` value.","line":86,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":86,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":87,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":87,"endColumn":61},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":87,"column":25,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":87,"endColumn":45,"fix":{"range":[3037,3044],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":87,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3041,3044],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3041,3044],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .sources on an `any` value.","line":87,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":88,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":88,"endColumn":73},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":88,"column":31,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":88,"endColumn":51,"fix":{"range":[3105,3112],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3109,3112],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3109,3112],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .research_gaps on an `any` value.","line":88,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":88,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":89,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":89,"endColumn":75},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":89,"column":32,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":89,"endColumn":52,"fix":{"range":[3180,3187],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":89,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3184,3187],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3184,3187],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .next_questions on an `any` value.","line":89,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":89,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":90,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":90,"endColumn":93},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":90,"column":41,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":90,"endColumn":61,"fix":{"range":[3265,3272],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":90,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3269,3272],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3269,3272],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .methodology_suggestions on an `any` value.","line":90,"column":64,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":90,"endColumn":87},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":91,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":91,"endColumn":78},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":91,"column":34,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":91,"endColumn":54,"fix":{"range":[3352,3359],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":91,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3356,3359],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3356,3359],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .literature_count on an `any` value.","line":91,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":91,"endColumn":73}],"suppressedMessages":[],"errorCount":38,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":9,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { triggerResearch } from '@/services/api/research';\nimport { ResearchResultPanel } from '@/components/research/ResearchResultPanel';\nimport { Empty, Spin } from 'antd';\nimport styles from './deep-panel.module.css';\nimport { motion } from 'framer-motion';\nimport type { ResearchResult } from '@/types';\n\ninterface Props {\n  sessionId: string | null;\n  projectId: number | null;\n}\n\nexport function DeepPanel({ sessionId, projectId }: Props) {\n  const [question, setQuestion] = useState('');\n  const [method, setMethod] = useState('premium_mineru');\n\n  const mutation = useMutation({\n    mutationFn: async () => {\n      if (!projectId) {\n        throw new Error('未选择项目，无法启动深度研究');\n      }\n\n      const response = (await triggerResearch({\n        project_id: projectId,\n        query: question,\n        mode: 'deep',\n        processing_method: method,\n      })) as { mode: string; payload: any };\n\n      return response.payload;\n    },\n  });\n\n  const disabled = !projectId || !question.trim();\n\n  return (\n    <section className={styles.panel}>\n      <header>\n        <h2>深度研究流程</h2>\n        <span>Session: {sessionId ?? '未启动'}</span>\n      </header>\n      <div className={styles.form}>\n        <label>研究问题</label>\n        <textarea\n          rows={3}\n          placeholder=\"描述需要深入分析的问题\"\n          value={question}\n          onChange={(event) => setQuestion(event.target.value)}\n        />\n        <label>处理方式</label>\n        <select value={method} onChange={(event) => setMethod(event.target.value)}>\n          <option value=\"fast_basic\">快速基础</option>\n          <option value=\"standard\">标准结构化</option>\n          <option value=\"premium_mineru\">MinerU 高质量</option>\n        </select>\n        <motion.button\n          whileHover={disabled ? undefined : { scale: 1.02 }}\n          whileTap={disabled ? undefined : { scale: 0.97 }}\n          disabled={disabled || mutation.isPending}\n          onClick={() => mutation.mutate()}\n        >\n          {mutation.isPending ? '提交中…' : '启动经验生成'}\n        </motion.button>\n      </div>\n      <div className={styles.output}>\n        <h3>任务响应</h3>\n        {mutation.isPending ? (\n          <div style={{ textAlign: 'center', padding: '40px' }}>\n            <Spin size=\"large\" />\n            <div style={{ marginTop: '16px' }}>已提交深度任务，等待经验生成…</div>\n          </div>\n        ) : mutation.data ? (\n          <ResearchResultPanel\n            result={{\n              id: `deep-${Date.now()}`,\n              project_id: projectId ?? 0,\n              mode: 'deep',\n              question: question,\n              status: 'completed',\n              timestamp: new Date().toISOString(),\n              answer: (mutation.data as any)?.answer || '深度研究任务完成',\n              detailed_analysis: (mutation.data as any)?.detailed_analysis || '经验生成已完成',\n              key_findings: (mutation.data as any)?.key_findings || [],\n              confidence: (mutation.data as any)?.confidence || 0.8,\n              sources: (mutation.data as any)?.sources || [],\n              research_gaps: (mutation.data as any)?.research_gaps || [],\n              next_questions: (mutation.data as any)?.next_questions || [],\n              methodology_suggestions: (mutation.data as any)?.methodology_suggestions || [],\n              literature_count: (mutation.data as any)?.literature_count || 0,\n              processing_method: method,\n              ...mutation.data\n            } as ResearchResult}\n            onExport={() => {\n              // TODO: 实现导出功能\n              console.log('Export deep result');\n            }}\n            onShare={() => {\n              // TODO: 实现分享功能\n              console.log('Share deep result');\n            }}\n            onRegenerateExperience={() => {\n              // TODO: 实现重新生成经验功能\n              console.log('Regenerate experience');\n            }}\n          />\n        ) : (\n          <Empty description=\"暂无结果，请启动经验生成任务\" />\n        )}\n      </div>\n    </section>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/components/research/mode-switcher.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/components/research/rag-panel.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[920,923],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[920,923],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of an `any` typed value.","line":30,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":30,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":74,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":74,"endColumn":66},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":74,"column":24,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":74,"endColumn":44,"fix":{"range":[2360,2367],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2364,2367],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2364,2367],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .answer on an `any` value.","line":74,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":74,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":75,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":75,"endColumn":91},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":75,"column":35,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":75,"endColumn":55,"fix":{"range":[2438,2445],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2442,2445],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2442,2445],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .detailed_analysis on an `any` value.","line":75,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":75,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":76,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":76,"endColumn":71},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":76,"column":30,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":76,"endColumn":50,"fix":{"range":[2525,2532],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":76,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2529,2532],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2529,2532],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .key_findings on an `any` value.","line":76,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":76,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":77,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":77,"endColumn":68},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":77,"column":28,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":77,"endColumn":48,"fix":{"range":[2595,2602],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2599,2602],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2599,2602],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .confidence on an `any` value.","line":77,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":77,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":78,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":78,"endColumn":61},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":78,"column":25,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":78,"endColumn":45,"fix":{"range":[2661,2668],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2665,2668],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2665,2668],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .sources on an `any` value.","line":78,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":78,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":79,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":79,"endColumn":73},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":79,"column":31,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":79,"endColumn":51,"fix":{"range":[2729,2736],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2733,2736],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2733,2736],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .research_gaps on an `any` value.","line":79,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":79,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":80,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":80,"endColumn":75},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":80,"column":32,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":80,"endColumn":52,"fix":{"range":[2804,2811],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":80,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2808,2811],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2808,2811],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .next_questions on an `any` value.","line":80,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":80,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":81,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":81,"endColumn":93},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":81,"column":41,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":81,"endColumn":61,"fix":{"range":[2889,2896],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2893,2896],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2893,2896],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .methodology_suggestions on an `any` value.","line":81,"column":64,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":81,"endColumn":87},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":82,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":82,"endColumn":78},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":82,"column":34,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":82,"endColumn":54,"fix":{"range":[2976,2983],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":82,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2980,2983],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2980,2983],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .literature_count on an `any` value.","line":82,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":82,"endColumn":73}],"suppressedMessages":[],"errorCount":38,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":9,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { triggerResearch } from '@/services/api/research';\nimport { ResearchResultPanel } from '@/components/research/ResearchResultPanel';\nimport { Empty, Spin } from 'antd';\nimport styles from './rag-panel.module.css';\nimport { motion } from 'framer-motion';\nimport type { ResearchResult } from '@/types';\n\ninterface Props {\n  sessionId: string | null;\n  projectId: number | null;\n}\n\nexport function RagPanel({ sessionId, projectId }: Props) {\n  const [question, setQuestion] = useState('');\n  const mutation = useMutation({\n    mutationFn: async () => {\n      if (!projectId) {\n        throw new Error('未选择项目，无法启动 RAG 查询');\n      }\n\n      const response = (await triggerResearch({\n        project_id: projectId,\n        query: question,\n        mode: 'rag',\n        max_literature_count: 12,\n      })) as { mode: string; payload: any };\n\n      return response.payload;\n    },\n  });\n\n  const disabled = !projectId || !question.trim();\n\n  return (\n    <section className={styles.panel}>\n      <header>\n        <h2>RAG 问答</h2>\n        <span>Session: {sessionId ?? '未启动'}</span>\n      </header>\n      <div className={styles.controls}>\n        <textarea\n          rows={3}\n          placeholder=\"输入问题，使用清洁化文献与主经验回答\"\n          value={question}\n          onChange={(event) => setQuestion(event.target.value)}\n        />\n        <motion.button\n          whileHover={disabled ? undefined : { scale: 1.02 }}\n          whileTap={disabled ? undefined : { scale: 0.97 }}\n          disabled={disabled || mutation.isPending}\n          onClick={() => mutation.mutate()}\n        >\n          {mutation.isPending ? '处理中…' : '提交问题'}\n        </motion.button>\n      </div>\n      <article className={styles.answer}>\n        <h3>回答结果</h3>\n        {mutation.isPending ? (\n          <div style={{ textAlign: 'center', padding: '40px' }}>\n            <Spin size=\"large\" />\n            <div style={{ marginTop: '16px' }}>生成中...</div>\n          </div>\n        ) : mutation.data ? (\n          <ResearchResultPanel\n            result={{\n              id: `rag-${Date.now()}`,\n              project_id: projectId ?? 0,\n              mode: 'rag',\n              question: question,\n              status: 'completed',\n              timestamp: new Date().toISOString(),\n              answer: (mutation.data as any)?.answer || 'RAG查询完成',\n              detailed_analysis: (mutation.data as any)?.detailed_analysis || '基于知识库的检索完成',\n              key_findings: (mutation.data as any)?.key_findings || [],\n              confidence: (mutation.data as any)?.confidence || 0.8,\n              sources: (mutation.data as any)?.sources || [],\n              research_gaps: (mutation.data as any)?.research_gaps || [],\n              next_questions: (mutation.data as any)?.next_questions || [],\n              methodology_suggestions: (mutation.data as any)?.methodology_suggestions || [],\n              literature_count: (mutation.data as any)?.literature_count || 0,\n              ...mutation.data\n            } as ResearchResult}\n            onExport={() => {\n              // TODO: 实现导出功能\n              console.log('Export RAG result');\n            }}\n            onShare={() => {\n              // TODO: 实现分享功能\n              console.log('Share RAG result');\n            }}\n            onRegenerateExperience={() => {\n              // TODO: 实现重新生成经验功能\n              console.log('Regenerate experience');\n            }}\n          />\n        ) : (\n          <Empty description=\"暂无结果，请提交问题获取回答\" />\n        )}\n      </article>\n    </section>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/components/tasks/task-detail-drawer.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":28,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":28,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[999,999],"text":"void "},"desc":"Add void operator to ignore."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { fetchTaskDetail } from '@/services/api/tasks';\nimport styles from './task-detail-drawer.module.css';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useProgressSocket } from '@/services/ws/progress-socket';\nimport { useAuthStore } from '@/stores/auth-store';\n\ninterface Props {\n  taskId: number | null;\n  onClose: () => void;\n}\n\nexport function TaskDetailDrawer({ taskId, onClose }: Props) {\n  const token = useAuthStore((state) => state.accessToken);\n  const events = useProgressSocket((state) => (taskId ? state.events[String(taskId)] ?? [] : []));\n  const connect = useProgressSocket((state) => state.connect);\n  const disconnect = useProgressSocket((state) => state.disconnect);\n\n  const { data, refetch } = useQuery({\n    queryKey: ['task-detail', taskId],\n    queryFn: () => fetchTaskDetail(taskId!),\n    enabled: taskId !== null\n  });\n\n  useEffect(() => {\n    if (taskId) {\n      refetch();\n      connect(String(taskId), token ?? undefined);\n      return () => {\n        disconnect(String(taskId));\n      };\n    }\n    return () => undefined;\n  }, [connect, disconnect, refetch, taskId, token]);\n\n  return (\n    <AnimatePresence>\n      {taskId && (\n        <motion.div\n          className={styles.overlay}\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n        >\n          <motion.div className={styles.drawer} initial={{ x: '100%' }} animate={{ x: 0 }} exit={{ x: '100%' }}>\n            <header>\n              <h3>{data?.title ?? '任务详情'}</h3>\n              <button onClick={onClose}>关闭</button>\n            </header>\n            <section>\n              <dl>\n                <div>\n                  <dt>类型</dt>\n                  <dd>{data?.task_type}</dd>\n                </div>\n                <div>\n                  <dt>状态</dt>\n                  <dd>{data?.status}</dd>\n                </div>\n                <div>\n                  <dt>当前步骤</dt>\n                  <dd>{data?.current_step}</dd>\n                </div>\n                <div>\n                  <dt>进度</dt>\n                  <dd>{data?.progress_percentage}%</dd>\n                </div>\n              </dl>\n            </section>\n            <section className={styles.result}>\n              <h4>结果 / 错误</h4>\n              <pre>{JSON.stringify(data?.result ?? data?.error_message ?? {}, null, 2)}</pre>\n            </section>\n            <section className={styles.timeline}>\n              <h4>历史进度</h4>\n              <div className={styles.events}>\n                {data?.progress_logs?.length ? (\n                  data.progress_logs.map((log, index) => (\n                    <div key={`${log.step_name}-${index}`} className={styles.eventRow}>\n                      <div>\n                        <div className={styles.eventType}>{log.step_name}</div>\n                        {log.step_description && <div>{log.step_description}</div>}\n                      </div>\n                      <div>\n                        <span>{Math.round(log.progress_percentage)}%</span>\n                        {log.completed_at && (\n                          <div>{new Date(log.completed_at).toLocaleString()}</div>\n                        )}\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <div className={styles.empty}>暂无历史进度</div>\n                )}\n              </div>\n            </section>\n            <section className={styles.timeline}>\n              <h4>实时事件</h4>\n              <div className={styles.events}>\n                {events.length === 0 && <div className={styles.empty}>暂无实时事件</div>}\n                {events.map((event, index) => (\n                  <div key={`${event.type}-${index}`} className={styles.eventRow}>\n                    <span className={styles.eventType}>{event.type}</span>\n                    {event.current_step && <span>{event.current_step}</span>}\n                    {typeof event.progress === 'number' && <span>{event.progress}%</span>}\n                  </div>\n                ))}\n              </div>\n            </section>\n          </motion.div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/components/tasks/task-row.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/components/workspace/AutoModeControlPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Input' is defined but never used.","line":2,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Title' is assigned a value but never used.","line":5,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":14},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":182,"column":59,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":182,"endColumn":77,"fix":{"range":[5865,5877],"text":""}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Card, Select, Switch, Input, Space, Tooltip, Typography, Slider, Checkbox } from 'antd';\nimport { RobotOutlined, InfoCircleOutlined } from '@ant-design/icons';\n\nconst { Title, Text } = Typography;\nconst { Option } = Select;\n\ninterface AutoModeControlPanelProps {\n  onConfigChange: (config: AutoModeConfig) => void;\n  disabled?: boolean;\n}\n\nexport interface AutoModeConfig {\n  agent: 'claude' | 'codex' | 'gemini';\n  collectFirst: boolean;\n  enableAiFiltering: boolean;\n  enablePdfProcessing: boolean;\n  enableStructuredExtraction: boolean;\n  batchSize: number;\n  maxConcurrentDownloads: number;\n  collectionMaxCount: number;\n  sources: string[];\n  processingMethod: 'standard' | 'fast' | 'premium';\n}\n\nconst AVAILABLE_SOURCES = [\n  { value: 'arxiv', label: 'arXiv' },\n  { value: 'pubmed', label: 'PubMed' },\n  { value: 'ieee', label: 'IEEE Xplore' },\n  { value: 'acm', label: 'ACM Digital Library' },\n  { value: 'springer', label: 'Springer' },\n  { value: 'elsevier', label: 'Elsevier' },\n  { value: 'researchgate', label: 'ResearchGate' },\n];\n\nexport const AutoModeControlPanel: React.FC<AutoModeControlPanelProps> = ({\n  onConfigChange,\n  disabled = false\n}) => {\n  const [config, setConfig] = useState<AutoModeConfig>({\n    agent: 'claude',\n    collectFirst: false,\n    enableAiFiltering: true,\n    enablePdfProcessing: true,\n    enableStructuredExtraction: true,\n    batchSize: 10,\n    maxConcurrentDownloads: 5,\n    collectionMaxCount: 100,\n    sources: ['arxiv', 'pubmed'],\n    processingMethod: 'standard'\n  });\n\n  const updateConfig = (updates: Partial<AutoModeConfig>) => {\n    const newConfig = { ...config, ...updates };\n    setConfig(newConfig);\n    onConfigChange(newConfig);\n  };\n\n  return (\n    <Card\n      title={\n        <Space>\n          <RobotOutlined />\n          <span>全自动模式配置</span>\n        </Space>\n      }\n      size=\"small\"\n      className=\"auto-mode-control-panel\"\n    >\n      <Space direction=\"vertical\" className=\"w-full\" size=\"middle\">\n        {/* 调度智能体选择 */}\n        <div>\n          <div className=\"flex items-center gap-2 mb-2\">\n            <Text strong>调度智能体</Text>\n            <Tooltip title=\"选择负责任务编排的AI智能体\">\n              <InfoCircleOutlined style={{ color: '#666' }} />\n            </Tooltip>\n          </div>\n          <Select\n            value={config.agent}\n            onChange={(value) => updateConfig({ agent: value })}\n            disabled={disabled}\n            className=\"w-full\"\n          >\n            <Option value=\"claude\">Claude Code</Option>\n            <Option value=\"codex\">CodeX</Option>\n            <Option value=\"gemini\">Gemini CLI</Option>\n          </Select>\n        </div>\n\n        {/* 执行策略 */}\n        <div>\n          <Text strong className=\"block mb-2\">执行策略</Text>\n          <Space direction=\"vertical\" className=\"w-full\">\n            <div className=\"flex items-center justify-between\">\n              <span>先采集文献再处理</span>\n              <Switch\n                checked={config.collectFirst}\n                onChange={(checked) => updateConfig({ collectFirst: checked })}\n                disabled={disabled}\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span>启用AI智能筛选</span>\n              <Switch\n                checked={config.enableAiFiltering}\n                onChange={(checked) => updateConfig({ enableAiFiltering: checked })}\n                disabled={disabled}\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span>启用PDF处理</span>\n              <Switch\n                checked={config.enablePdfProcessing}\n                onChange={(checked) => updateConfig({ enablePdfProcessing: checked })}\n                disabled={disabled}\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span>启用结构化提取</span>\n              <Switch\n                checked={config.enableStructuredExtraction}\n                onChange={(checked) => updateConfig({ enableStructuredExtraction: checked })}\n                disabled={disabled}\n              />\n            </div>\n          </Space>\n        </div>\n\n        {/* 性能参数 */}\n        <div>\n          <div className=\"flex items-center gap-2 mb-2\">\n            <Text strong>性能参数</Text>\n            <Tooltip title=\"控制并发度和批次大小以优化处理速度\">\n              <InfoCircleOutlined style={{ color: '#666' }} />\n            </Tooltip>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Text className=\"block mb-1\">批次大小: {config.batchSize}</Text>\n              <Slider\n                min={5}\n                max={50}\n                value={config.batchSize}\n                onChange={(value) => updateConfig({ batchSize: value })}\n                disabled={disabled}\n                marks={{\n                  5: '5',\n                  10: '10',\n                  20: '20',\n                  50: '50'\n                }}\n              />\n            </div>\n\n            <div>\n              <Text className=\"block mb-1\">并发下载: {config.maxConcurrentDownloads}</Text>\n              <Slider\n                min={1}\n                max={10}\n                value={config.maxConcurrentDownloads}\n                onChange={(value) => updateConfig({ maxConcurrentDownloads: value })}\n                disabled={disabled}\n                marks={{\n                  1: '1',\n                  3: '3',\n                  5: '5',\n                  10: '10'\n                }}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* 文献源配置 */}\n        <div>\n          <Text strong className=\"block mb-2\">文献来源</Text>\n          <Checkbox.Group\n            options={AVAILABLE_SOURCES}\n            value={config.sources}\n            onChange={(values) => updateConfig({ sources: values as string[] })}\n            disabled={disabled}\n            className=\"w-full\"\n          />\n        </div>\n\n        {/* 采集限制 */}\n        {config.collectFirst && (\n          <div>\n            <Text className=\"block mb-1\">最大采集数量: {config.collectionMaxCount}</Text>\n            <Slider\n              min={10}\n              max={500}\n              value={config.collectionMaxCount}\n              onChange={(value) => updateConfig({ collectionMaxCount: value })}\n              disabled={disabled}\n              marks={{\n                10: '10',\n                50: '50',\n                100: '100',\n                200: '200',\n                500: '500'\n              }}\n            />\n          </div>\n        )}\n\n        {/* 处理质量 */}\n        <div>\n          <Text strong className=\"block mb-2\">处理质量</Text>\n          <Select\n            value={config.processingMethod}\n            onChange={(value) => updateConfig({ processingMethod: value })}\n            disabled={disabled}\n            className=\"w-full\"\n          >\n            <Option value=\"fast\">快速处理（速度优先）</Option>\n            <Option value=\"standard\">标准处理（平衡质量与速度）</Option>\n            <Option value=\"premium\">高质量处理（质量优先）</Option>\n          </Select>\n        </div>\n      </Space>\n    </Card>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/components/workspace/DeepModeControlPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Input' is defined but never used.","line":2,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Title' is assigned a value but never used.","line":5,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":14}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Card, Slider, Select, Switch, Input, Space, Tooltip, Typography } from 'antd';\nimport { SettingOutlined, InfoCircleOutlined } from '@ant-design/icons';\n\nconst { Title, Text } = Typography;\nconst { Option } = Select;\n\ninterface DeepModeControlPanelProps {\n  onConfigChange: (config: DeepModeConfig) => void;\n  disabled?: boolean;\n}\n\nexport interface DeepModeConfig {\n  maxIterations: number;\n  batchSize: number;\n  processingMethod: 'fast_basic' | 'standard' | 'premium_mineru';\n  enableStructuredTemplate: boolean;\n  templateType: string;\n  convergenceThreshold: number;\n  enableQualityFilter: boolean;\n}\n\nexport const DeepModeControlPanel: React.FC<DeepModeControlPanelProps> = ({\n  onConfigChange,\n  disabled = false\n}) => {\n  const [config, setConfig] = useState<DeepModeConfig>({\n    maxIterations: 3,\n    batchSize: 10,\n    processingMethod: 'standard',\n    enableStructuredTemplate: true,\n    templateType: 'research_paper',\n    convergenceThreshold: 0.85,\n    enableQualityFilter: true\n  });\n\n  const updateConfig = (updates: Partial<DeepModeConfig>) => {\n    const newConfig = { ...config, ...updates };\n    setConfig(newConfig);\n    onConfigChange(newConfig);\n  };\n\n  return (\n    <Card\n      title={\n        <Space>\n          <SettingOutlined />\n          <span>深度研究高级配置</span>\n        </Space>\n      }\n      size=\"small\"\n      className=\"deep-mode-control-panel\"\n    >\n      <Space direction=\"vertical\" className=\"w-full\" size=\"middle\">\n        {/* 迭代配置 */}\n        <div>\n          <div className=\"flex items-center gap-2 mb-2\">\n            <Text strong>迭代参数</Text>\n            <Tooltip title=\"控制经验生成的迭代轮次和批次大小\">\n              <InfoCircleOutlined style={{ color: '#666' }} />\n            </Tooltip>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Text className=\"block mb-1\">最大迭代轮次: {config.maxIterations}</Text>\n              <Slider\n                min={1}\n                max={10}\n                value={config.maxIterations}\n                onChange={(value) => updateConfig({ maxIterations: value })}\n                disabled={disabled}\n                marks={{\n                  1: '1',\n                  3: '3',\n                  5: '5',\n                  10: '10'\n                }}\n              />\n            </div>\n\n            <div>\n              <Text className=\"block mb-1\">批次大小: {config.batchSize}</Text>\n              <Slider\n                min={5}\n                max={50}\n                value={config.batchSize}\n                onChange={(value) => updateConfig({ batchSize: value })}\n                disabled={disabled}\n                marks={{\n                  5: '5',\n                  10: '10',\n                  20: '20',\n                  50: '50'\n                }}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* 处理方式 */}\n        <div>\n          <Text strong className=\"block mb-2\">处理方式</Text>\n          <Select\n            value={config.processingMethod}\n            onChange={(value) => updateConfig({ processingMethod: value })}\n            disabled={disabled}\n            className=\"w-full\"\n          >\n            <Option value=\"fast_basic\">快速基础处理</Option>\n            <Option value=\"standard\">标准结构化处理</Option>\n            <Option value=\"premium_mineru\">MinerU 高质量处理</Option>\n          </Select>\n        </div>\n\n        {/* 结构化模板 */}\n        <div>\n          <div className=\"flex items-center justify-between mb-2\">\n            <Text strong>结构化模板</Text>\n            <Switch\n              checked={config.enableStructuredTemplate}\n              onChange={(checked) => updateConfig({ enableStructuredTemplate: checked })}\n              disabled={disabled}\n            />\n          </div>\n\n          {config.enableStructuredTemplate && (\n            <Select\n              value={config.templateType}\n              onChange={(value) => updateConfig({ templateType: value })}\n              disabled={disabled}\n              className=\"w-full\"\n            >\n              <Option value=\"research_paper\">学术论文模板</Option>\n              <Option value=\"technical_report\">技术报告模板</Option>\n              <Option value=\"literature_review\">文献综述模板</Option>\n              <Option value=\"methodology\">方法论模板</Option>\n            </Select>\n          )}\n        </div>\n\n        {/* 质量控制 */}\n        <div>\n          <div className=\"flex items-center gap-2 mb-2\">\n            <Text strong>质量控制</Text>\n            <Tooltip title=\"设置收敛阈值和质量过滤器\">\n              <InfoCircleOutlined style={{ color: '#666' }} />\n            </Tooltip>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Text className=\"block mb-1\">收敛阈值: {(config.convergenceThreshold * 100).toFixed(0)}%</Text>\n              <Slider\n                min={0.5}\n                max={1.0}\n                step={0.05}\n                value={config.convergenceThreshold}\n                onChange={(value) => updateConfig({ convergenceThreshold: value })}\n                disabled={disabled}\n              />\n            </div>\n\n            <div className=\"flex items-center\">\n              <Switch\n                checked={config.enableQualityFilter}\n                onChange={(checked) => updateConfig({ enableQualityFilter: checked })}\n                disabled={disabled}\n              />\n              <Text className=\"ml-2\">启用质量过滤</Text>\n            </div>\n          </div>\n        </div>\n      </Space>\n    </Card>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/components/workspace/LiteratureSelector.tsx","messages":[{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"URLSearchParams\" of template literal expression.","line":56,"column":55,"nodeType":"Identifier","messageId":"invalidType","endLine":56,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":58,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":58,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<Literature[]>`.","line":59,"column":23,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":59,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .items on an `any` value.","line":59,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":59,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":63,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":63,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .total on an `any` value.","line":63,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":63,"endColumn":28},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":66,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":66,"endColumn":35,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1866,1866],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":70,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":70,"endColumn":33,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1988,1988],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":78,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":78,"endColumn":25,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2126,2126],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchLiterature'. Either include it or remove the dependency array.","line":80,"column":6,"nodeType":"ArrayExpression","endLine":80,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [visible, projectId, fetchLiterature]","fix":{"range":[2156,2176],"text":"[visible, projectId, fetchLiterature]"}}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":87,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":87,"endColumn":37,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2298,2298],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":91,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":91,"endColumn":40,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2388,2388],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":97,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":97,"endColumn":55,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2564,2564],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":111,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":111,"endColumn":53,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3000,3000],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"react/jsx-key","severity":2,"message":"Missing \"key\" prop for element in array","line":126,"column":9,"nodeType":"JSXElement","messageId":"missingArrayKey","endLine":129,"endColumn":11}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Modal, Input, List, Checkbox, Button, Space, Tag, Pagination, Spin, Empty, message } from 'antd';\nimport { SearchOutlined, BookOutlined, CalendarOutlined, UserOutlined } from '@ant-design/icons';\n\nexport interface Literature {\n  id: number;\n  title: string;\n  authors: string[];\n  abstract?: string;\n  doi?: string;\n  publication_date?: string;\n  journal?: string;\n  tags?: string[];\n  processing_status?: string;\n}\n\ninterface LiteratureSelectorProps {\n  visible: boolean;\n  onCancel: () => void;\n  onConfirm: (selectedIds: number[]) => void;\n  projectId?: number;\n  initialSelected?: number[];\n  maxSelection?: number;\n}\n\nexport const LiteratureSelector: React.FC<LiteratureSelectorProps> = ({\n  visible,\n  onCancel,\n  onConfirm,\n  projectId,\n  initialSelected = [],\n  maxSelection = 10\n}) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [literature, setLiterature] = useState<Literature[]>([]);\n  const [selectedIds, setSelectedIds] = useState<number[]>(initialSelected);\n  const [loading, setLoading] = useState(false);\n  const [pagination, setPagination] = useState({\n    current: 1,\n    pageSize: 10,\n    total: 0\n  });\n\n  const fetchLiterature = async (query = '', page = 1) => {\n    if (!projectId) return;\n\n    setLoading(true);\n    try {\n      const params = new URLSearchParams({\n        project_id: projectId.toString(),\n        page: page.toString(),\n        page_size: pagination.pageSize.toString(),\n        ...(query && { search: query })\n      });\n\n      const response = await fetch(`/api/literature?${params}`);\n      if (response.ok) {\n        const data = await response.json();\n        setLiterature(data.items || []);\n        setPagination(prev => ({\n          ...prev,\n          current: page,\n          total: data.total || 0\n        }));\n      } else {\n        message.error('获取文献列表失败');\n      }\n    } catch (error) {\n      console.error('Failed to fetch literature:', error);\n      message.error('获取文献列表失败');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (visible && projectId) {\n      fetchLiterature();\n    }\n  }, [visible, projectId]);\n\n  useEffect(() => {\n    setSelectedIds(initialSelected);\n  }, [initialSelected]);\n\n  const handleSearch = () => {\n    fetchLiterature(searchQuery, 1);\n  };\n\n  const handlePageChange = (page: number) => {\n    fetchLiterature(searchQuery, page);\n  };\n\n  const handleSelect = (id: number, checked: boolean) => {\n    if (checked) {\n      if (selectedIds.length >= maxSelection) {\n        message.warning(`最多只能选择 ${maxSelection} 篇文献`);\n        return;\n      }\n      setSelectedIds([...selectedIds, id]);\n    } else {\n      setSelectedIds(selectedIds.filter(selectedId => selectedId !== id));\n    }\n  };\n\n  const handleSelectAll = () => {\n    const currentPageIds = literature.map(item => item.id);\n    const newSelected = [...new Set([...selectedIds, ...currentPageIds])];\n\n    if (newSelected.length > maxSelection) {\n      message.warning(`最多只能选择 ${maxSelection} 篇文献`);\n      return;\n    }\n\n    setSelectedIds(newSelected);\n  };\n\n  const handleClearAll = () => {\n    setSelectedIds([]);\n  };\n\n  const renderLiteratureItem = (item: Literature) => (\n    <List.Item\n      key={item.id}\n      actions={[\n        <Checkbox\n          checked={selectedIds.includes(item.id)}\n          onChange={(e) => handleSelect(item.id, e.target.checked)}\n        />\n      ]}\n    >\n      <List.Item.Meta\n        avatar={<BookOutlined style={{ fontSize: 24, color: '#1890ff' }} />}\n        title={\n          <div>\n            <span style={{ fontWeight: 'bold' }}>{item.title}</span>\n            {item.processing_status && (\n              <Tag\n                color={item.processing_status === 'completed' ? 'green' : 'orange'}\n                style={{ marginLeft: 8 }}\n              >\n                {item.processing_status === 'completed' ? '已处理' : '处理中'}\n              </Tag>\n            )}\n          </div>\n        }\n        description={\n          <div>\n            {item.authors.length > 0 && (\n              <div style={{ marginBottom: 4 }}>\n                <UserOutlined style={{ marginRight: 4 }} />\n                {item.authors.slice(0, 3).join(', ')}\n                {item.authors.length > 3 && ' 等'}\n              </div>\n            )}\n\n            {item.publication_date && (\n              <div style={{ marginBottom: 4 }}>\n                <CalendarOutlined style={{ marginRight: 4 }} />\n                {item.publication_date}\n                {item.journal && ` • ${item.journal}`}\n              </div>\n            )}\n\n            {item.abstract && (\n              <div style={{\n                marginTop: 8,\n                color: '#666',\n                fontSize: '12px',\n                lineHeight: 1.4\n              }}>\n                {item.abstract.length > 200\n                  ? `${item.abstract.slice(0, 200)}...`\n                  : item.abstract\n                }\n              </div>\n            )}\n\n            {item.tags && item.tags.length > 0 && (\n              <div style={{ marginTop: 8 }}>\n                {item.tags.slice(0, 5).map(tag => (\n                  <Tag key={tag}>{tag}</Tag>\n                ))}\n              </div>\n            )}\n          </div>\n        }\n      />\n    </List.Item>\n  );\n\n  return (\n    <Modal\n      title={`选择上下文文献 (已选择 ${selectedIds.length}/${maxSelection})`}\n      open={visible}\n      onCancel={onCancel}\n      onOk={() => onConfirm(selectedIds)}\n      width={800}\n      style={{ top: 20 }}\n      bodyStyle={{ maxHeight: '70vh', overflow: 'auto' }}\n      okText=\"确认选择\"\n      cancelText=\"取消\"\n    >\n      {/* 搜索栏 */}\n      <div style={{ marginBottom: 16 }}>\n        <Input.Search\n          placeholder=\"搜索文献标题、作者或关键词\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          onSearch={handleSearch}\n          enterButton={<SearchOutlined />}\n          size=\"large\"\n        />\n      </div>\n\n      {/* 操作栏 */}\n      <div style={{ marginBottom: 16 }}>\n        <Space>\n          <Button size=\"small\" onClick={handleSelectAll}>\n            全选当前页\n          </Button>\n          <Button size=\"small\" onClick={handleClearAll}>\n            清空选择\n          </Button>\n          <span style={{ color: '#666' }}>\n            当前页: {literature.length} 篇，总共: {pagination.total} 篇\n          </span>\n        </Space>\n      </div>\n\n      {/* 文献列表 */}\n      <Spin spinning={loading}>\n        {literature.length > 0 ? (\n          <>\n            <List\n              dataSource={literature}\n              renderItem={renderLiteratureItem}\n              size=\"small\"\n            />\n\n            {pagination.total > pagination.pageSize && (\n              <div style={{ textAlign: 'center', marginTop: 16 }}>\n                <Pagination\n                  current={pagination.current}\n                  pageSize={pagination.pageSize}\n                  total={pagination.total}\n                  onChange={handlePageChange}\n                  showSizeChanger={false}\n                  showQuickJumper\n                  showTotal={(total, range) =>\n                    `第 ${range[0]}-${range[1]} 条，共 ${total} 条`\n                  }\n                />\n              </div>\n            )}\n          </>\n        ) : loading ? null : (\n          <Empty description=\"暂无文献数据\" />\n        )}\n      </Spin>\n    </Modal>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/components/workspace/ModeSelector.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Radio' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Radio, Tooltip, Space } from 'antd';\nimport {\n  DatabaseOutlined,\n  ExperimentOutlined,\n  RobotOutlined,\n  InfoCircleOutlined,\n} from '@ant-design/icons';\nimport { motion } from 'framer-motion';\nimport type { ResearchMode } from '@/types';\n\ninterface ModeSelectorProps {\n  value: ResearchMode;\n  onChange: (mode: ResearchMode) => void;\n  disabled?: boolean;\n}\n\ninterface ModeOption {\n  value: ResearchMode;\n  label: string;\n  icon: React.ReactNode;\n  description: string;\n  color: string;\n}\n\nconst MODE_OPTIONS: ModeOption[] = [\n  {\n    value: 'rag',\n    label: 'RAG模式',\n    icon: <DatabaseOutlined />,\n    description: '从现有知识库中快速检索相关内容，适合已有文献的问题查询',\n    color: 'text-green-600',\n  },\n  {\n    value: 'deep',\n    label: '深度研究',\n    icon: <ExperimentOutlined />,\n    description: '针对特定问题生成专属研究经验，适合深入探究科研难题',\n    color: 'text-purple-600',\n  },\n  {\n    value: 'auto',\n    label: '全自动',\n    icon: <RobotOutlined />,\n    description: 'AI智能编排完整研究流程，从搜索到分析全程自动化',\n    color: 'text-blue-600',\n  },\n];\n\nexport const ModeSelector: React.FC<ModeSelectorProps> = ({\n  value,\n  onChange,\n  disabled = false,\n}) => {\n  return (\n    <div className=\"mode-selector\">\n      <Space direction=\"vertical\" className=\"w-full\">\n        <div className=\"flex items-center gap-2 mb-2\">\n          <span className=\"text-sm font-medium text-gray-700\">研究模式</span>\n          <Tooltip\n            title={\n              <div className=\"p-2\">\n                <div className=\"mb-2 font-semibold\">三种研究模式说明：</div>\n                <ul className=\"space-y-1 text-xs\">\n                  <li>• RAG模式：快速检索，适合日常查询</li>\n                  <li>• 深度研究：生成经验，适合复杂问题</li>\n                  <li>• 全自动：端到端流程，适合系统性研究</li>\n                </ul>\n              </div>\n            }\n          >\n            <InfoCircleOutlined className=\"text-gray-400 cursor-help\" />\n          </Tooltip>\n        </div>\n\n        <div className=\"grid grid-cols-3 gap-3\">\n          {MODE_OPTIONS.map((option) => {\n            const isSelected = value === option.value;\n\n            return (\n              <motion.div\n                key={option.value}\n                whileHover={{ scale: disabled ? 1 : 1.02 }}\n                whileTap={{ scale: disabled ? 1 : 0.98 }}\n              >\n                <div\n                  className={`\n                    relative cursor-pointer rounded-lg border-2 p-4\n                    transition-all duration-200\n                    ${\n                      isSelected\n                        ? 'border-blue-500 bg-blue-50 shadow-lg'\n                        : 'border-gray-200 hover:border-gray-300 hover:shadow-md'\n                    }\n                    ${disabled ? 'opacity-50 cursor-not-allowed' : ''}\n                  `}\n                  onClick={() => !disabled && onChange(option.value)}\n                >\n                  {/* 选中标记 */}\n                  {isSelected && (\n                    <motion.div\n                      initial={{ scale: 0 }}\n                      animate={{ scale: 1 }}\n                      className=\"absolute -top-2 -right-2 bg-blue-500 text-white rounded-full w-6 h-6 flex items-center justify-center\"\n                    >\n                      ✓\n                    </motion.div>\n                  )}\n\n                  {/* 图标 */}\n                  <div className={`text-2xl mb-2 ${isSelected ? 'text-blue-600' : option.color}`}>\n                    {option.icon}\n                  </div>\n\n                  {/* 标题 */}\n                  <div className={`font-semibold mb-1 ${isSelected ? 'text-blue-700' : 'text-gray-800'}`}>\n                    {option.label}\n                  </div>\n\n                  {/* 描述 */}\n                  <div className=\"text-xs text-gray-600 leading-relaxed\">\n                    {option.description}\n                  </div>\n\n                  {/* 性能指标 */}\n                  <div className=\"mt-3 pt-3 border-t border-gray-100\">\n                    <div className=\"flex justify-between text-xs\">\n                      <span className=\"text-gray-500\">速度</span>\n                      <div className=\"flex gap-1\">\n                        {option.value === 'rag' && (\n                          <>\n                            <div className=\"w-1 h-3 bg-green-500 rounded-full\" />\n                            <div className=\"w-1 h-3 bg-green-500 rounded-full\" />\n                            <div className=\"w-1 h-3 bg-green-500 rounded-full\" />\n                          </>\n                        )}\n                        {option.value === 'deep' && (\n                          <>\n                            <div className=\"w-1 h-3 bg-yellow-500 rounded-full\" />\n                            <div className=\"w-1 h-3 bg-yellow-500 rounded-full\" />\n                            <div className=\"w-1 h-3 bg-gray-300 rounded-full\" />\n                          </>\n                        )}\n                        {option.value === 'auto' && (\n                          <>\n                            <div className=\"w-1 h-3 bg-orange-500 rounded-full\" />\n                            <div className=\"w-1 h-3 bg-gray-300 rounded-full\" />\n                            <div className=\"w-1 h-3 bg-gray-300 rounded-full\" />\n                          </>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex justify-between text-xs mt-1\">\n                      <span className=\"text-gray-500\">深度</span>\n                      <div className=\"flex gap-1\">\n                        {option.value === 'rag' && (\n                          <>\n                            <div className=\"w-1 h-3 bg-blue-500 rounded-full\" />\n                            <div className=\"w-1 h-3 bg-gray-300 rounded-full\" />\n                            <div className=\"w-1 h-3 bg-gray-300 rounded-full\" />\n                          </>\n                        )}\n                        {option.value === 'deep' && (\n                          <>\n                            <div className=\"w-1 h-3 bg-blue-500 rounded-full\" />\n                            <div className=\"w-1 h-3 bg-blue-500 rounded-full\" />\n                            <div className=\"w-1 h-3 bg-blue-500 rounded-full\" />\n                          </>\n                        )}\n                        {option.value === 'auto' && (\n                          <>\n                            <div className=\"w-1 h-3 bg-blue-500 rounded-full\" />\n                            <div className=\"w-1 h-3 bg-blue-500 rounded-full\" />\n                            <div className=\"w-1 h-3 bg-gray-300 rounded-full\" />\n                          </>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        {/* 模式说明 */}\n        <motion.div\n          key={value}\n          initial={{ opacity: 0, y: -10 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"mt-4 p-3 bg-gray-50 rounded-lg\"\n        >\n          <div className=\"text-sm\">\n            <span className=\"font-medium text-gray-700\">当前选择：</span>\n            <span className=\"ml-2 text-blue-600 font-semibold\">\n              {MODE_OPTIONS.find((o) => o.value === value)?.label}\n            </span>\n          </div>\n          <div className=\"text-xs text-gray-600 mt-1\">\n            {MODE_OPTIONS.find((o) => o.value === value)?.description}\n          </div>\n        </motion.div>\n      </Space>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/components/workspace/ProgressPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useCallback' is defined but never used.","line":1,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onCancel' is defined but never used.","line":67,"column":69,"nodeType":"Identifier","messageId":"unusedVar","endLine":67,"endColumn":77},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'totalEstimated' is assigned a value but never used.","line":178,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":178,"endColumn":25},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":193,"column":27,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":193,"endColumn":86,"fix":{"range":[6642,6677],"text":""}}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useRef, useCallback } from 'react';\nimport { Steps, Progress, Timeline, Tag, Collapse, Space, Button, Tooltip } from 'antd';\nimport {\n  LoadingOutlined,\n  CheckCircleOutlined,\n  CloseCircleOutlined,\n  ClockCircleOutlined,\n  PauseCircleOutlined,\n  PlayCircleOutlined,\n  ReloadOutlined,\n  ExpandOutlined,\n  CompressOutlined,\n} from '@ant-design/icons';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useWebSocket } from '@/hooks/useWebSocket';\nimport type { Task, TaskProgress, TaskProgressDetails } from '@/types';\n\ninterface ProgressPanelProps {\n  task: Task;\n  onCancel?: () => void;\n}\n\ninterface StageInfo {\n  title: string;\n  description: string;\n  expectedDuration?: number; // 秒\n}\n\nconst TASK_STAGES: Record<string, StageInfo[]> = {\n  'literature_collection': [\n    { title: '初始化', description: '准备搜索环境', expectedDuration: 2 },\n    { title: '搜索文献', description: '从多个数据源搜索', expectedDuration: 10 },\n    { title: '筛选去重', description: '去除重复文献', expectedDuration: 5 },\n    { title: '质量评估', description: 'AI质量评分', expectedDuration: 8 },\n    { title: '入库', description: '保存到数据库', expectedDuration: 3 },\n  ],\n  'search_and_build_library': [\n    { title: '搜索', description: '搜索相关文献', expectedDuration: 10 },\n    { title: 'AI筛选', description: '智能质量评估', expectedDuration: 15 },\n    { title: 'PDF下载', description: '批量下载PDF', expectedDuration: 20 },\n    { title: '内容提取', description: '解析PDF内容', expectedDuration: 15 },\n    { title: '结构化处理', description: '提取结构化数据', expectedDuration: 20 },\n    { title: '数据入库', description: '保存处理结果', expectedDuration: 5 },\n  ],\n  'experience_generation': [\n    { title: '准备', description: '加载文献数据', expectedDuration: 3 },\n    { title: '第1轮迭代', description: '初始知识提取', expectedDuration: 30 },\n    { title: '第2轮迭代', description: '知识深化', expectedDuration: 30 },\n    { title: '第3轮迭代', description: '知识整合', expectedDuration: 30 },\n    { title: '第4轮迭代', description: '知识优化', expectedDuration: 30 },\n    { title: '第5轮迭代', description: '最终总结', expectedDuration: 30 },\n    { title: '完成', description: '生成研究经验', expectedDuration: 5 },\n  ],\n  'analysis': [\n    { title: '数据准备', description: '加载分析数据', expectedDuration: 5 },\n    { title: '分析处理', description: 'AI深度分析', expectedDuration: 20 },\n    { title: '生成结果', description: '整理分析结果', expectedDuration: 10 },\n  ],\n  'auto_pipeline': [\n    { title: '编排任务', description: '分析研究目标并规划任务链', expectedDuration: 8 },\n    { title: '执行搜索', description: '调用搜索建库工具', expectedDuration: 15 },\n    { title: '处理文献', description: '解析并结构化文献', expectedDuration: 20 },\n    { title: '生成经验', description: '生成经验与回答', expectedDuration: 15 },\n  ],\n};\n\nexport const ProgressPanel: React.FC<ProgressPanelProps> = ({ task, onCancel }) => {\n  const [currentProgress, setCurrentProgress] = useState<TaskProgress | null>(null);\n  const [logs, setLogs] = useState<string[]>([]);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const startTimeRef = useRef<number>(Date.now());\n  const { subscribe } = useWebSocket();\n\n  const isTaskProgressMessage = (value: unknown): value is TaskProgress => {\n    if (!value || typeof value !== 'object') return false;\n    const candidate = value as Partial<TaskProgress>;\n    return typeof candidate.task_id === 'string' && typeof candidate.status === 'string';\n  };\n\n  useEffect(() => {\n    startTimeRef.current = Date.now();\n    const timer = setInterval(() => {\n      setElapsedTime(Math.floor((Date.now() - startTimeRef.current) / 1000));\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [task.id]);\n\n  useEffect(() => {\n    const handler = (...args: unknown[]) => {\n      const payload = args[0];\n      if (!isTaskProgressMessage(payload)) {\n        return;\n      }\n\n      const matchesTask =\n        String(payload.task_id) === String(task.backendTaskId ?? '') ||\n        String(payload.task_id) === String(task.id);\n\n      if (!matchesTask) {\n        return;\n      }\n\n      setCurrentProgress(payload);\n\n      if (payload.log) {\n        setLogs((prev) => [\n          ...prev,\n          `[${new Date().toLocaleTimeString()}] ${payload.log}`,\n        ]);\n      }\n      if (payload.step_result) {\n        const resultText = typeof payload.step_result === 'string'\n          ? payload.step_result\n          : JSON.stringify(payload.step_result);\n        setLogs((prev) => [\n          ...prev,\n          `[${new Date().toLocaleTimeString()}] ${resultText}`,\n        ]);\n      }\n    };\n\n    const unsubscribeFn = subscribe('task_progress', handler);\n\n    return () => {\n      unsubscribeFn();\n    };\n  }, [task, subscribe]);\n\n  const getStageIcon = (status?: string) => {\n    switch (status) {\n      case 'processing':\n        return <LoadingOutlined className=\"text-blue-500\" spin />;\n      case 'completed':\n        return <CheckCircleOutlined className=\"text-green-500\" />;\n      case 'failed':\n        return <CloseCircleOutlined className=\"text-red-500\" />;\n      case 'paused':\n        return <PauseCircleOutlined className=\"text-yellow-500\" />;\n      default:\n        return <ClockCircleOutlined className=\"text-gray-400\" />;\n    }\n  };\n\n  const normalizedStatus = task.status === 'running' ? 'processing' : task.status;\n\n  const getProgressStatus = () => {\n    if (normalizedStatus === 'failed') return 'exception';\n    if (normalizedStatus === 'completed') return 'success';\n    if (isPaused) return 'normal';\n    return 'active';\n  };\n\n  const stages = TASK_STAGES[task.type] || [];\n  const currentStageIndex = currentProgress?.current_stage || 0;\n  const overallProgress =\n    currentProgress?.overall_progress ?? currentProgress?.progress ?? task.progress ?? 0;\n\n  const formatTime = (seconds: number) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n\n    if (hours > 0) {\n      return `${hours}小时${minutes}分${secs}秒`;\n    } else if (minutes > 0) {\n      return `${minutes}分${secs}秒`;\n    } else {\n      return `${secs}秒`;\n    }\n  };\n\n  const estimateRemainingTime = () => {\n    if (!currentProgress || overallProgress === 0) return null;\n\n    const totalEstimated = stages.reduce((sum, stage) => sum + (stage.expectedDuration || 0), 0);\n    const elapsed = elapsedTime;\n    const rate = overallProgress / 100;\n\n    if (rate > 0) {\n      const totalTime = elapsed / rate;\n      const remaining = Math.max(0, totalTime - elapsed);\n      return Math.ceil(remaining);\n    }\n\n    return null;\n  };\n\n  const remainingTime = estimateRemainingTime();\n\n  const progressDetails = currentProgress?.details as TaskProgressDetails | undefined;\n  const filesProcessed = typeof progressDetails?.files_processed === 'number' ? progressDetails.files_processed : undefined;\n  const successCount = typeof progressDetails?.success_count === 'number' ? progressDetails.success_count : undefined;\n  const failedCount = typeof progressDetails?.failed_count === 'number' ? progressDetails.failed_count : undefined;\n\n  return (\n    <div className=\"progress-panel\">\n      <Space direction=\"vertical\" className=\"w-full\" size=\"large\">\n        {/* 总体进度 */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          className=\"bg-gradient-to-r from-blue-50 to-indigo-50 p-4 rounded-lg\"\n        >\n          <div className=\"flex justify-between items-center mb-2\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"font-semibold\">总体进度</span>\n              <Tag color={normalizedStatus === 'completed' ? 'success' : 'processing'}>\n                {normalizedStatus === 'pending' && '等待中'}\n                {normalizedStatus === 'processing' && '处理中'}\n                {normalizedStatus === 'completed' && '已完成'}\n                {normalizedStatus === 'failed' && '失败'}\n              </Tag>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <span className=\"text-sm text-gray-600\">\n                已用时：{formatTime(elapsedTime)}\n              </span>\n              {remainingTime && (\n                <Tag color=\"blue\">\n                  预计剩余：{formatTime(remainingTime)}\n                </Tag>\n              )}\n            </div>\n          </div>\n\n          <Progress\n            percent={overallProgress}\n            status={getProgressStatus()}\n            strokeColor={{\n              '0%': '#108ee9',\n              '100%': '#87d068',\n            }}\n            format={(percent) => (\n              <span className=\"text-sm font-medium\">{percent}%</span>\n            )}\n          />\n\n          {/* 控制按钮 */}\n          <div className=\"flex justify-end gap-2 mt-3\">\n            <Tooltip title={isPaused ? '继续' : '暂停'}>\n              <Button\n                size=\"small\"\n                icon={isPaused ? <PlayCircleOutlined /> : <PauseCircleOutlined />}\n                onClick={() => setIsPaused(!isPaused)}\n                disabled={normalizedStatus !== 'processing'}\n              >\n                {isPaused ? '继续' : '暂停'}\n              </Button>\n            </Tooltip>\n\n            <Tooltip title=\"重试\">\n              <Button\n                size=\"small\"\n                icon={<ReloadOutlined />}\n                disabled={normalizedStatus === 'processing'}\n              >\n                重试\n              </Button>\n            </Tooltip>\n\n            <Tooltip title={isExpanded ? '收起' : '展开'}>\n              <Button\n                size=\"small\"\n                icon={isExpanded ? <CompressOutlined /> : <ExpandOutlined />}\n                onClick={() => setIsExpanded(!isExpanded)}\n              >\n                {isExpanded ? '收起' : '详情'}\n              </Button>\n            </Tooltip>\n          </div>\n        </motion.div>\n\n        {/* 阶段进度 */}\n        <Steps\n          current={currentStageIndex}\n          size=\"small\"\n          items={stages.map((stage, index) => {\n            const isCurrentStage = index === currentStageIndex;\n            const stageProgress = isCurrentStage ? (currentProgress?.progress || 0) :\n                                index < currentStageIndex ? 100 : 0;\n\n            return {\n              title: (\n                <div className=\"flex items-center gap-2\">\n                  <span>{stage.title}</span>\n                  {isCurrentStage && normalizedStatus === 'processing' && (\n                    <Tag color=\"processing\" className=\"ml-2\">\n                      {stageProgress}%\n                    </Tag>\n                  )}\n                </div>\n              ),\n              description: (\n                <div className=\"text-xs\">\n                  <div>{stage.description}</div>\n                  {isCurrentStage && currentProgress?.message && (\n                    <div className=\"text-blue-600 mt-1\">{currentProgress.message}</div>\n                  )}\n                </div>\n              ),\n              status: index < currentStageIndex ? 'finish' :\n                     index === currentStageIndex ? 'process' : 'wait',\n              icon: index === currentStageIndex ? getStageIcon(normalizedStatus) : undefined,\n            };\n          })}\n        />\n\n        {/* 详细日志 - 可展开 */}\n        <AnimatePresence>\n          {isExpanded && (\n            <motion.div\n              initial={{ height: 0, opacity: 0 }}\n              animate={{ height: 'auto', opacity: 1 }}\n              exit={{ height: 0, opacity: 0 }}\n            >\n              <Collapse ghost>\n                <Collapse.Panel\n                  header={`详细日志 (${logs.length} 条)`}\n                  key=\"logs\"\n                  className=\"bg-gray-50\"\n                >\n                  <div className=\"max-h-60 overflow-y-auto\">\n                    <Timeline\n                      items={logs.map((log, index) => ({\n                        key: index,\n                        children: (\n                          <motion.div\n                            initial={{ opacity: 0, x: -20 }}\n                            animate={{ opacity: 1, x: 0 }}\n                            transition={{ delay: index * 0.05 }}\n                            className=\"text-xs font-mono text-gray-600\"\n                          >\n                            {log}\n                          </motion.div>\n                        ),\n                        color: log.includes('错误') ? 'red' :\n                              log.includes('警告') ? 'yellow' :\n                              log.includes('成功') ? 'green' : 'blue',\n                      }))}\n                    />\n                  </div>\n                </Collapse.Panel>\n              </Collapse>\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        {/* 统计信息 */}\n        {progressDetails && (\n          <div className=\"grid grid-cols-3 gap-2 text-xs\">\n            {typeof filesProcessed === 'number' && (\n              <div className=\"bg-blue-50 p-2 rounded\">\n                <div className=\"text-gray-600\">已处理文件</div>\n                <div className=\"font-semibold\">{filesProcessed}</div>\n              </div>\n            )}\n            {typeof successCount === 'number' && (\n              <div className=\"bg-green-50 p-2 rounded\">\n                <div className=\"text-gray-600\">成功</div>\n                <div className=\"font-semibold\">{successCount}</div>\n              </div>\n            )}\n            {typeof failedCount === 'number' && (\n              <div className=\"bg-red-50 p-2 rounded\">\n                <div className=\"text-gray-600\">失败</div>\n                <div className=\"font-semibold\">{failedCount}</div>\n              </div>\n            )}\n          </div>\n        )}\n      </Space>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/components/workspace/ProjectSelector.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":50,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":50,"endColumn":33,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1602,1602],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":57,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":57,"endColumn":21,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1706,1706],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchProjects'. Either include it or remove the dependency array.","line":58,"column":6,"nodeType":"ArrayExpression","endLine":58,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchProjects]","fix":{"range":[1728,1730],"text":"[fetchProjects]"}}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":85,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":85,"endColumn":33,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2547,2547],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":92,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":92,"endColumn":31,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2749,2749],"text":"void "},"desc":"Add void operator to ignore."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Select, Space, Button, Modal, Form, Input, message } from 'antd';\nimport { PlusOutlined, FolderOutlined } from '@ant-design/icons';\nimport { projectAPI } from '@/services/api/project';\nimport type { Project as ApiProject } from '@/services/api/project';\n\nexport interface Project {\n  id: number;\n  title: string;\n  description?: string;\n  created_at: string;\n  updated_at?: string;\n}\n\ninterface ProjectSelectorProps {\n  value?: number;\n  onChange?: (projectId: number, project: Project) => void;\n  style?: React.CSSProperties;\n}\n\nexport const ProjectSelector: React.FC<ProjectSelectorProps> = ({\n  value,\n  onChange,\n  style\n}) => {\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [createModalVisible, setCreateModalVisible] = useState(false);\n  const [form] = Form.useForm();\n\n  const fetchProjects = async () => {\n    setLoading(true);\n    try {\n      const apiProjects = await projectAPI.getProjects();\n      const normalizedProjects: Project[] = apiProjects.map((project: ApiProject) => ({\n        id: project.id,\n        title: project.title,\n        description: project.description ?? undefined,\n        created_at: project.created_at,\n        updated_at: project.updated_at ?? undefined,\n      }));\n\n      setProjects(normalizedProjects);\n\n      if (!value && normalizedProjects.length > 0 && onChange) {\n        onChange(normalizedProjects[0].id, normalizedProjects[0]);\n      }\n    } catch (error) {\n      console.error('Failed to fetch projects:', error);\n      message.error('获取项目列表失败');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchProjects();\n  }, []);\n\n  const handleProjectChange = (projectId: number) => {\n    const project = projects.find(p => p.id === projectId);\n    if (project && onChange) {\n      onChange(projectId, project);\n    }\n  };\n\n  const handleCreateProject = async (values: { name: string; description?: string }) => {\n    try {\n      const created = await projectAPI.createEmptyProject({\n        name: values.name,\n        description: values.description,\n      });\n\n      const normalizedProject: Project = {\n        id: created.id,\n        title: created.title,\n        description: created.description ?? undefined,\n        created_at: created.created_at,\n        updated_at: created.updated_at ?? undefined,\n      };\n\n      setProjects(prev => [...prev, normalizedProject]);\n      setCreateModalVisible(false);\n      form.resetFields();\n      message.success('项目创建成功');\n\n      if (onChange) {\n        onChange(normalizedProject.id, normalizedProject);\n      }\n    } catch (error) {\n      console.error('Failed to create project:', error);\n      message.error('项目创建失败');\n    }\n  };\n\n  return (\n    <>\n      <Space.Compact style={style}>\n        <Select\n          value={value}\n          onChange={handleProjectChange}\n          placeholder=\"选择项目\"\n          loading={loading}\n          style={{ minWidth: 200 }}\n          optionLabelProp=\"label\"\n        >\n          {projects.map(project => (\n            <Select.Option\n              key={project.id}\n              value={project.id}\n              label={project.title}\n            >\n              <Space>\n                <FolderOutlined />\n                <span>{project.title}</span>\n                {project.description && (\n                  <span style={{ color: '#666', fontSize: '12px' }}>\n                    {project.description.slice(0, 30)}...\n                  </span>\n                )}\n              </Space>\n            </Select.Option>\n          ))}\n        </Select>\n        <Button\n          icon={<PlusOutlined />}\n          onClick={() => setCreateModalVisible(true)}\n          type=\"dashed\"\n        >\n          新建项目\n        </Button>\n      </Space.Compact>\n\n      <Modal\n        title=\"创建新项目\"\n        open={createModalVisible}\n        onCancel={() => {\n          setCreateModalVisible(false);\n          form.resetFields();\n        }}\n        onOk={() => form.submit()}\n        destroyOnClose\n      >\n        <Form\n          form={form}\n          layout=\"vertical\"\n          onFinish={handleCreateProject}\n        >\n          <Form.Item\n            name=\"name\"\n            label=\"项目名称\"\n            rules={[{ required: true, message: '请输入项目名称' }]}\n          >\n            <Input placeholder=\"输入项目名称\" />\n          </Form.Item>\n          <Form.Item\n            name=\"description\"\n            label=\"项目描述\"\n          >\n            <Input.TextArea\n              placeholder=\"输入项目描述（可选）\"\n              rows={3}\n            />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/components/workspace/ResultDisplay.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FileTextOutlined' is defined but never used.","line":4,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Literature' is defined but never used.","line":16,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":41},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":36,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":36,"endColumn":41,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[972,972],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":37,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":37,"endColumn":32,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1013,1013],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":49,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":49,"endColumn":29,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1437,1437],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":70,"column":38,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":70,"endColumn":92,"fix":{"range":[2143,2182],"text":""}},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":107,"column":44,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":107,"endColumn":98,"fix":{"range":[3058,3097],"text":""}}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Card, Tabs, Tag, Space, Button, Tooltip, Collapse, Empty, Divider, Rate } from 'antd';\nimport {\n  FileTextOutlined,\n  CopyOutlined,\n  DownloadOutlined,\n  ExpandOutlined,\n  BookOutlined,\n  ExperimentOutlined,\n  BulbOutlined,\n  LinkOutlined,\n} from '@ant-design/icons';\nimport { motion } from 'framer-motion';\nimport ReactMarkdown from 'react-markdown';\nimport { message } from 'antd';\nimport type { ResearchResult, Literature } from '@/types';\n\ninterface ResultDisplayProps {\n  results: ResearchResult[];\n}\n\nexport const ResultDisplay: React.FC<ResultDisplayProps> = ({ results }) => {\n  const [activeKey, setActiveKey] = useState('0');\n  const [expandedSections, setExpandedSections] = useState<Record<string, boolean>>({});\n\n  if (results.length === 0) {\n    return (\n      <Empty\n        description=\"暂无研究结果\"\n        image={Empty.PRESENTED_IMAGE_SIMPLE}\n      />\n    );\n  }\n\n  const handleCopy = (text: string) => {\n    navigator.clipboard.writeText(text);\n    message.success('已复制到剪贴板');\n  };\n\n  const handleDownload = (result: ResearchResult) => {\n    const content = generateExportContent(result);\n    const blob = new Blob([content], { type: 'text/markdown' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `research-result-${result.id || Date.now()}.md`;\n    a.click();\n    URL.revokeObjectURL(url);\n    message.success('下载成功');\n  };\n\n  const resolveMetadata = (meta?: Record<string, unknown>) => {\n    if (!meta) return {} as {\n      modelUsed?: string;\n      tokensUsed?: string | number;\n      experienceUsed?: boolean;\n    };\n\n    return {\n      modelUsed: typeof meta.model_used === 'string' ? meta.model_used : undefined,\n      tokensUsed:\n        typeof meta.tokens_used === 'number' || typeof meta.tokens_used === 'string'\n          ? meta.tokens_used\n          : undefined,\n      experienceUsed: typeof meta.experience_used === 'boolean' ? meta.experience_used : undefined,\n    };\n  };\n\n  const generateExportContent = (result: ResearchResult) => {\n    const metadata = resolveMetadata(result.metadata as Record<string, unknown> | undefined);\n    return `# 研究结果报告\n\n## 研究问题\n${result.query}\n\n## 研究模式\n${result.mode === 'rag' ? 'RAG检索模式' : result.mode === 'deep' ? '深度研究模式' : '全自动模式'}\n\n## 研究结果\n${result.answer}\n\n## 参考文献\n${result.references?.map(ref => `- ${ref.title} (${ref.authors?.join(', ')})`).join('\\n') || '暂无参考文献'}\n\n## 元数据\n- 置信度：${result.confidence_score}\n- 处理时间：${result.processing_time}秒\n- 生成时间：${result.created_at}\n${metadata.tokensUsed ? `- Token使用：${metadata.tokensUsed}` : ''}\n${metadata.modelUsed ? `- 使用模型：${metadata.modelUsed}` : ''}\n`;\n  };\n\n  const toggleSection = (key: string) => {\n    setExpandedSections(prev => ({\n      ...prev,\n      [key]: !prev[key]\n    }));\n  };\n\n  return (\n    <div className=\"result-display\">\n      <Tabs\n        activeKey={activeKey}\n        onChange={setActiveKey}\n        items={results.map((result, index) => {\n          const metadata = resolveMetadata(result.metadata as Record<string, unknown> | undefined);\n          return {\n            key: String(index),\n            label: (\n              <span>\n                结果 {index + 1}\n                <Tag className=\"ml-2\" color={\n                  result.mode === 'rag' ? 'green' :\n                  result.mode === 'deep' ? 'purple' : 'blue'\n                }>\n                  {result.mode.toUpperCase()}\n                </Tag>\n              </span>\n            ),\n            children: (\n              <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ duration: 0.3 }}\n            >\n              <Space direction=\"vertical\" className=\"w-full\" size=\"large\">\n                {/* 研究问题 */}\n                <Card size=\"small\" className=\"bg-blue-50\">\n                  <div className=\"flex items-start gap-2\">\n                    <BulbOutlined className=\"text-blue-500 text-lg mt-1\" />\n                    <div className=\"flex-1\">\n                      <div className=\"text-xs text-gray-600 mb-1\">研究问题</div>\n                      <div className=\"font-medium\">{result.query}</div>\n                    </div>\n                  </div>\n                </Card>\n\n                {/* 主要结果 */}\n                <Card\n                  title={\n                    <div className=\"flex justify-between items-center\">\n                      <span>研究结果</span>\n                      <Space>\n                        <Tooltip title=\"复制结果\">\n                          <Button\n                            size=\"small\"\n                            icon={<CopyOutlined />}\n                            onClick={() => handleCopy(result.answer)}\n                          />\n                        </Tooltip>\n                        <Tooltip title=\"下载报告\">\n                          <Button\n                            size=\"small\"\n                            icon={<DownloadOutlined />}\n                            onClick={() => handleDownload(result)}\n                          />\n                        </Tooltip>\n                        <Tooltip title={expandedSections[`result-${index}`] ? '收起' : '展开'}>\n                          <Button\n                            size=\"small\"\n                            icon={<ExpandOutlined />}\n                            onClick={() => toggleSection(`result-${index}`)}\n                          />\n                        </Tooltip>\n                      </Space>\n                    </div>\n                  }\n                  className=\"shadow-sm\"\n                >\n                  <div className={expandedSections[`result-${index}`] ? '' : 'max-h-96 overflow-y-auto'}>\n                    <ReactMarkdown className=\"prose prose-sm max-w-none\">\n                      {result.answer}\n                    </ReactMarkdown>\n                  </div>\n\n                  {/* 置信度评分 */}\n                  <Divider />\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-sm text-gray-600\">置信度：</span>\n                      <Rate\n                        disabled\n                        value={Math.round((result.confidence_score || result.confidence || 0) * 5)}\n                        className=\"text-sm\"\n                      />\n                      <span className=\"text-sm font-medium\">\n                        {((result.confidence_score || result.confidence || 0) * 100).toFixed(1)}%\n                      </span>\n                    </div>\n                    <div className=\"text-xs text-gray-500\">\n                      处理时间：{result.processing_time}秒\n                    </div>\n                  </div>\n                </Card>\n\n                {/* 参考文献 */}\n                {result.references && result.references.length > 0 && (\n                  <Collapse ghost>\n                    <Collapse.Panel\n                      header={\n                        <div className=\"flex items-center gap-2\">\n                          <BookOutlined />\n                          <span>参考文献 ({result.references.length}篇)</span>\n                        </div>\n                      }\n                      key=\"references\"\n                    >\n                      <div className=\"space-y-3\">\n                        {result.references.map((ref, refIndex) => (\n                          <motion.div\n                            key={refIndex}\n                            initial={{ opacity: 0, x: -20 }}\n                            animate={{ opacity: 1, x: 0 }}\n                            transition={{ delay: refIndex * 0.05 }}\n                          >\n                            <Card size=\"small\" className=\"hover:shadow-md transition-shadow\">\n                              <div className=\"flex items-start gap-3\">\n                                <div className=\"text-2xl font-bold text-gray-300\">\n                                  {refIndex + 1}\n                                </div>\n                                <div className=\"flex-1\">\n                                  <div className=\"font-medium text-sm mb-1\">\n                                    {ref.title}\n                                  </div>\n                                  <div className=\"text-xs text-gray-600 mb-2\">\n                                    {ref.authors?.join(', ')}\n                                  </div>\n                                  <Space size=\"small\" wrap>\n                                    {ref.journal && (\n                                      <Tag icon={<BookOutlined />} color=\"blue\">\n                                        {ref.journal}\n                                      </Tag>\n                                    )}\n                                    {ref.publication_year && (\n                                      <Tag>{ref.publication_year}</Tag>\n                                    )}\n                                    {ref.doi && (\n                                      <Tooltip title=\"查看DOI\">\n                                        <Tag\n                                          icon={<LinkOutlined />}\n                                          color=\"green\"\n                                          className=\"cursor-pointer\"\n                                          onClick={() => window.open(`https://doi.org/${ref.doi}`, '_blank')}\n                                        >\n                                          DOI\n                                        </Tag>\n                                      </Tooltip>\n                                    )}\n                                    {ref.citation_count !== undefined && (\n                                      <Tag color=\"orange\">\n                                        引用: {ref.citation_count}\n                                      </Tag>\n                                    )}\n                                  </Space>\n                                  {ref.abstract && (\n                                    <div className=\"mt-2\">\n                                      <div\n                                        className=\"text-xs text-gray-500 cursor-pointer\"\n                                        onClick={() => toggleSection(`ref-${index}-${refIndex}`)}\n                                      >\n                                        {expandedSections[`ref-${index}-${refIndex}`] ? '收起摘要 ▲' : '查看摘要 ▼'}\n                                      </div>\n                                      {expandedSections[`ref-${index}-${refIndex}`] && (\n                                        <div className=\"mt-2 p-2 bg-gray-50 rounded text-xs\">\n                                          {ref.abstract}\n                                        </div>\n                                      )}\n                                    </div>\n                                  )}\n                                </div>\n                              </div>\n                            </Card>\n                          </motion.div>\n                        ))}\n                      </div>\n                    </Collapse.Panel>\n                  </Collapse>\n                )}\n\n                {/* 元数据 */}\n                {(result.metadata && (metadata.modelUsed || metadata.tokensUsed !== undefined || metadata.experienceUsed !== undefined)) && (\n                  <Collapse ghost>\n                    <Collapse.Panel\n                      header={\n                        <div className=\"flex items-center gap-2\">\n                          <ExperimentOutlined />\n                          <span>技术细节</span>\n                        </div>\n                      }\n                      key=\"metadata\"\n                    >\n                      <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                        {metadata.modelUsed && (\n                          <div className=\"bg-gray-50 p-2 rounded\">\n                            <div className=\"text-gray-600\">使用模型</div>\n                            <div className=\"font-medium\">{metadata.modelUsed}</div>\n                          </div>\n                        )}\n                        {metadata.tokensUsed !== undefined && (\n                          <div className=\"bg-gray-50 p-2 rounded\">\n                            <div className=\"text-gray-600\">Token消耗</div>\n                            <div className=\"font-medium\">{metadata.tokensUsed}</div>\n                          </div>\n                        )}\n                        {metadata.experienceUsed !== undefined && (\n                          <div className=\"bg-gray-50 p-2 rounded\">\n                            <div className=\"text-gray-600\">使用经验</div>\n                            <div className=\"font-medium\">\n                              {metadata.experienceUsed ? '是' : '否'}\n                            </div>\n                          </div>\n                        )}\n                        <div className=\"bg-gray-50 p-2 rounded\">\n                          <div className=\"text-gray-600\">生成时间</div>\n                          <div className=\"font-medium\">\n                            {result.created_at ? new Date(result.created_at).toLocaleString('zh-CN') : result.timestamp ? new Date(result.timestamp).toLocaleString('zh-CN') : '未知时间'}\n                          </div>\n                        </div>\n                      </div>\n                    </Collapse.Panel>\n                  </Collapse>\n                )}\n              </Space>\n            </motion.div>\n            ),\n          };\n        })}\n      />\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/components/workspace/SmartQueryInput.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AutoComplete' is defined but never used.","line":2,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":2,"column":51,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PaperClipOutlined' is defined but never used.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CloseOutlined' is defined but never used.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":16},{"ruleId":"@typescript-eslint/consistent-type-imports","severity":1,"message":"Import \"DeepModeConfig\" is only used as types.","line":16,"column":1,"nodeType":"ImportDeclaration","messageId":"aImportIsOnlyTypes","endLine":16,"endColumn":79,"fix":{"range":[517,562],"text":"import type { DeepModeConfig } from './DeepModeControlPanel';\nimport { DeepModeControlPanel"}},{"ruleId":"@typescript-eslint/consistent-type-imports","severity":1,"message":"Import \"AutoModeConfig\" is only used as types.","line":17,"column":1,"nodeType":"ImportDeclaration","messageId":"aImportIsOnlyTypes","endLine":17,"endColumn":79,"fix":{"range":[596,641],"text":"import type { AutoModeConfig } from './AutoModeControlPanel';\nimport { AutoModeControlPanel"}},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string[]>`.","line":91,"column":24,"nodeType":"CallExpression","messageId":"unsafeArgument","endLine":91,"endColumn":42}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { Input, Button, Space, AutoComplete, Tag, Tooltip, Dropdown, Menu } from 'antd';\nimport {\n  SearchOutlined,\n  PlusOutlined,\n  HistoryOutlined,\n  PaperClipOutlined,\n  CloseOutlined,\n  FileTextOutlined,\n  BulbOutlined,\n} from '@ant-design/icons';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport MDEditor from '@uiw/react-md-editor';\nimport { useDebounce } from 'ahooks';\nimport { LiteratureSelector } from './LiteratureSelector';\nimport { DeepModeControlPanel, DeepModeConfig } from './DeepModeControlPanel';\nimport { AutoModeControlPanel, AutoModeConfig } from './AutoModeControlPanel';\nimport { useAppStore } from '@/stores/app.store';\nimport type { ResearchMode } from '@/types';\n\ninterface SmartQueryInputProps {\n  onSubmit: (query: string, options?: {\n    attachments?: number[];\n    deepConfig?: DeepModeConfig;\n    autoConfig?: AutoModeConfig;\n  }) => void;\n  mode: ResearchMode;\n  disabled?: boolean;\n  placeholder?: string;\n}\n\ninterface QueryTemplate {\n  title: string;\n  query: string;\n  keywords: string[];\n}\n\n// 查询模板\nconst QUERY_TEMPLATES: Record<ResearchMode, QueryTemplate[]> = {\n  'rag': [\n    { title: '文献综述', query: '请总结关于{topic}的最新研究进展', keywords: ['综述', '进展'] },\n    { title: '方法比较', query: '比较{method1}和{method2}在{field}中的应用', keywords: ['比较', '方法'] },\n  ],\n  'deep': [\n    { title: '机制研究', query: '深入分析{phenomenon}的分子机制和调控网络', keywords: ['机制', '调控'] },\n    { title: '假设验证', query: '基于{theory}，验证{hypothesis}的可行性', keywords: ['假设', '验证'] },\n  ],\n  'auto': [\n    { title: '研究方案', query: '设计关于{topic}的完整研究方案，包括实验设计和预期结果', keywords: ['方案', '设计'] },\n    { title: '创新探索', query: '探索{field}领域的创新方向和潜在突破点', keywords: ['创新', '突破'] },\n  ],\n};\n\nexport const SmartQueryInput: React.FC<SmartQueryInputProps> = ({\n  onSubmit,\n  mode,\n  disabled = false,\n  placeholder,\n}) => {\n  const [query, setQuery] = useState('');\n  const [showMarkdown, setShowMarkdown] = useState(false);\n  const [showAdvanced, setShowAdvanced] = useState(false);\n  const [selectedLiterature, setSelectedLiterature] = useState<number[]>([]);\n  const [showLiteratureSelector, setShowLiteratureSelector] = useState(false);\n  const [deepModeConfig, setDeepModeConfig] = useState<DeepModeConfig | null>(null);\n  const [autoModeConfig, setAutoModeConfig] = useState<AutoModeConfig | null>(null);\n  const [suggestions, setSuggestions] = useState<string[]>([]);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [recentQueries, setRecentQueries] = useState<string[]>([]);\n\n  // 从 App Store 获取当前项目信息\n  const { currentProject } = useAppStore();\n\n  // 防抖查询\n  const debouncedQuery = useDebounce(query, { wait: 500 });\n\n  // 文献选择器处理函数\n  const handleLiteratureConfirm = useCallback((selectedIds: number[]) => {\n    setSelectedLiterature(selectedIds);\n    setShowLiteratureSelector(false);\n  }, []);\n\n  const handleRemoveLiterature = useCallback((id: number) => {\n    setSelectedLiterature(prev => prev.filter(i => i !== id));\n  }, []);\n\n  // 加载历史查询\n  useEffect(() => {\n    const stored = localStorage.getItem('recentQueries');\n    if (stored) {\n      setRecentQueries(JSON.parse(stored));\n    }\n  }, []);\n\n  // AI智能提示\n  useEffect(() => {\n    if (debouncedQuery && debouncedQuery.length > 10) {\n      setIsAnalyzing(true);\n      // 模拟AI分析\n      setTimeout(() => {\n        const templates = QUERY_TEMPLATES[mode];\n        const relatedSuggestions = templates\n          .filter((t) =>\n            t.keywords.some((k) => debouncedQuery.includes(k))\n          )\n          .map((t) => t.title);\n        setSuggestions(relatedSuggestions);\n        setIsAnalyzing(false);\n      }, 500);\n    } else {\n      setSuggestions([]);\n    }\n  }, [debouncedQuery, mode]);\n\n  const handleSubmit = useCallback(() => {\n    if (!query.trim()) return;\n\n    // 保存到历史记录\n    const newRecent = [query, ...recentQueries.filter((q) => q !== query)].slice(0, 10);\n    setRecentQueries(newRecent);\n    localStorage.setItem('recentQueries', JSON.stringify(newRecent));\n\n    // 构建提交选项\n    const options: {\n      attachments?: number[];\n      deepConfig?: DeepModeConfig;\n      autoConfig?: AutoModeConfig;\n    } = {};\n\n    if (selectedLiterature.length > 0) {\n      options.attachments = selectedLiterature;\n    }\n\n    if (mode === 'deep' && deepModeConfig) {\n      options.deepConfig = deepModeConfig;\n    }\n\n    if (mode === 'auto' && autoModeConfig) {\n      options.autoConfig = autoModeConfig;\n    }\n\n    onSubmit(query, options);\n    setQuery('');\n    setSelectedLiterature([]);\n  }, [query, selectedLiterature, recentQueries, onSubmit, mode, deepModeConfig, autoModeConfig]);\n\n  const handleTemplateSelect = (template: QueryTemplate) => {\n    setQuery(template.query);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey && !showMarkdown) {\n      e.preventDefault();\n      handleSubmit();\n    }\n  };\n\n  const templateMenu = (\n    <Menu\n      items={QUERY_TEMPLATES[mode].map((template, index) => ({\n        key: index,\n        label: (\n          <div onClick={() => handleTemplateSelect(template)}>\n            <div className=\"font-medium\">{template.title}</div>\n            <div className=\"text-xs text-gray-500\">{template.query}</div>\n          </div>\n        ),\n      }))}\n    />\n  );\n\n  const historyMenu = (\n    <Menu\n      items={recentQueries.map((q, index) => ({\n        key: index,\n        label: (\n          <div onClick={() => setQuery(q)} className=\"max-w-xs truncate\">\n            {q}\n          </div>\n        ),\n      }))}\n    />\n  );\n\n  return (\n    <div className=\"smart-query-input\">\n      <Space direction=\"vertical\" className=\"w-full\" size=\"middle\">\n        {/* 输入区域 */}\n        {showMarkdown ? (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            className=\"relative\"\n          >\n            <MDEditor\n              value={query}\n              onChange={(val) => setQuery(val || '')}\n              preview=\"edit\"\n              height={200}\n              data-color-mode=\"light\"\n            />\n            <Button\n              size=\"small\"\n              onClick={() => setShowMarkdown(false)}\n              className=\"absolute top-2 right-2 z-10\"\n            >\n              切换到普通模式\n            </Button>\n          </motion.div>\n        ) : (\n          <div className=\"relative\">\n            <Input.TextArea\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n              placeholder={placeholder || '输入您的研究问题...'}\n              rows={4}\n              disabled={disabled}\n              onKeyPress={handleKeyPress}\n              className=\"text-base\"\n            />\n\n            {/* AI分析指示器 */}\n            <AnimatePresence>\n              {isAnalyzing && (\n                <motion.div\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  exit={{ opacity: 0 }}\n                  className=\"absolute top-2 right-2\"\n                >\n                  <Tag icon={<BulbOutlined />} color=\"processing\">\n                    AI分析中...\n                  </Tag>\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </div>\n        )}\n\n        {/* 智能建议 */}\n        <AnimatePresence>\n          {suggestions.length > 0 && (\n            <motion.div\n              initial={{ height: 0, opacity: 0 }}\n              animate={{ height: 'auto', opacity: 1 }}\n              exit={{ height: 0, opacity: 0 }}\n              className=\"bg-blue-50 p-3 rounded-lg\"\n            >\n              <div className=\"text-sm text-gray-600 mb-2 flex items-center gap-1\">\n                <BulbOutlined />\n                AI建议的相关问题：\n              </div>\n              <Space wrap>\n                {suggestions.map((suggestion, index) => (\n                  <Tag\n                    key={index}\n                    className=\"cursor-pointer hover:bg-blue-100\"\n                    onClick={() => {\n                      const template = QUERY_TEMPLATES[mode].find((t) => t.title === suggestion);\n                      if (template) setQuery(template.query);\n                    }}\n                  >\n                    {suggestion}\n                  </Tag>\n                ))}\n              </Space>\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        {/* 高级选项 */}\n        <AnimatePresence>\n          {showAdvanced && (\n            <motion.div\n              initial={{ height: 0, opacity: 0 }}\n              animate={{ height: 'auto', opacity: 1 }}\n              exit={{ height: 0, opacity: 0 }}\n              className=\"bg-gray-50 p-4 rounded-lg\"\n            >\n              <div className=\"mb-3\">\n                <div className=\"text-sm text-gray-600 mb-2\">关联文献：</div>\n                <div className=\"flex flex-wrap gap-2\">\n                  {selectedLiterature.map((id) => (\n                    <Tag\n                      key={id}\n                      closable\n                      onClose={() => handleRemoveLiterature(id)}\n                    >\n                      <FileTextOutlined /> 文献 {id}\n                    </Tag>\n                  ))}\n                  <Button\n                    size=\"small\"\n                    icon={<PlusOutlined />}\n                    onClick={() => setShowLiteratureSelector(true)}\n                    disabled={!currentProject}\n                  >\n                    添加文献\n                  </Button>\n                </div>\n              </div>\n\n              {/* 模式特定控制面板 */}\n              {mode === 'deep' && (\n                <div className=\"mt-4\">\n                  <DeepModeControlPanel\n                    onConfigChange={setDeepModeConfig}\n                    disabled={disabled}\n                  />\n                </div>\n              )}\n\n              {mode === 'auto' && (\n                <div className=\"mt-4\">\n                  <AutoModeControlPanel\n                    onConfigChange={setAutoModeConfig}\n                    disabled={disabled}\n                  />\n                </div>\n              )}\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        {/* 操作按钮 */}\n        <div className=\"flex justify-between items-center\">\n          <Space>\n            <Dropdown overlay={templateMenu} placement=\"topLeft\" disabled={disabled}>\n              <Button icon={<FileTextOutlined />}>查询模板</Button>\n            </Dropdown>\n\n            <Dropdown\n              overlay={historyMenu}\n              placement=\"topLeft\"\n              disabled={disabled || recentQueries.length === 0}\n            >\n              <Button icon={<HistoryOutlined />}>历史记录</Button>\n            </Dropdown>\n\n            <Button\n              icon={<PlusOutlined />}\n              onClick={() => setShowAdvanced(!showAdvanced)}\n              disabled={disabled}\n            >\n              {showAdvanced ? '收起' : '高级选项'}\n            </Button>\n\n            <Button\n              onClick={() => setShowMarkdown(!showMarkdown)}\n              disabled={disabled}\n            >\n              {showMarkdown ? '普通模式' : 'Markdown'}\n            </Button>\n          </Space>\n\n          <Button\n            type=\"primary\"\n            size=\"large\"\n            icon={<SearchOutlined />}\n            onClick={handleSubmit}\n            disabled={disabled || !query.trim()}\n            loading={disabled}\n          >\n            开始研究\n          </Button>\n        </div>\n      </Space>\n\n      {/* 文献选择器 */}\n      <LiteratureSelector\n        visible={showLiteratureSelector}\n        onCancel={() => setShowLiteratureSelector(false)}\n        onConfirm={handleLiteratureConfirm}\n        projectId={currentProject?.id}\n        initialSelected={selectedLiterature}\n        maxSelection={10}\n      />\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/config/env.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/contexts/theme-context.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/hooks/api-hooks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/hooks/use-app-startup.ts","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":24,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":24,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[646,646],"text":"void "},"desc":"Add void operator to ignore."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect } from 'react';\nimport { useSystemStore } from '@/stores/system-store';\nimport { fetchUserProfile } from '@/services/api/user';\n\nexport function useAppStartup() {\n  const { hydrated, setHydrated, setProfile } = useSystemStore();\n\n  useEffect(() => {\n    if (hydrated) return;\n\n    const controller = new AbortController();\n\n    async function bootstrap() {\n      try {\n        const profile = await fetchUserProfile({ signal: controller.signal });\n        setProfile(profile);\n      } catch (error) {\n        console.warn('Bootstrap user profile failed', error);\n      } finally {\n        setHydrated(true);\n      }\n    }\n\n    bootstrap();\n\n    return () => controller.abort();\n  }, [hydrated, setHydrated, setProfile]);\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/hooks/useWebSocket.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The ref value 'handlersRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'handlersRef.current' to a variable inside the effect, and use that variable in the cleanup function.","line":37,"column":19,"nodeType":"Identifier","endLine":37,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useRef, useCallback } from 'react';\nimport { wsManager } from '@/services/websocket/WebSocketManager';\n\ntype WSHandler = (...args: unknown[]) => void;\n\nexport function useWebSocket() {\n  const handlersRef = useRef<Map<string, WSHandler>>(new Map());\n\n  const subscribe = useCallback((event: string, handler: WSHandler) => {\n    wsManager.subscribe(event, handler);\n    handlersRef.current.set(event, handler);\n\n    return () => {\n      wsManager.unsubscribe(event, handler);\n      handlersRef.current.delete(event);\n    };\n  }, []);\n\n  const unsubscribe = useCallback((event: string, handler?: WSHandler) => {\n    const targetHandler = handler ?? handlersRef.current.get(event);\n    if (!targetHandler) {\n      return;\n    }\n    wsManager.unsubscribe(event, targetHandler);\n    handlersRef.current.delete(event);\n  }, []);\n\n  const send = useCallback((event: string, data?: Record<string, unknown>) => {\n    wsManager.send(event, data);\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      handlersRef.current.forEach((handler, event) => {\n        wsManager.unsubscribe(event, handler);\n      });\n      handlersRef.current.clear();\n    };\n  }, []);\n\n  const status = wsManager.getConnectionStatus();\n\n  return {\n    subscribe,\n    unsubscribe,\n    send,\n    isConnected: status.connected,\n    connectionStatus: status,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/pages/ProjectListDemo.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":188,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":188,"endColumn":39,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4803,4803],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":207,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":207,"endColumn":31,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[5412,5412],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":219,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":219,"endColumn":31,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[5877,5877],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":259,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":259,"endColumn":20,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[6979,6979],"text":"void "},"desc":"Add void operator to ignore."}]}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadProjects'. Either include it or remove the dependency array.","line":261,"column":6,"nodeType":"ArrayExpression","endLine":261,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadProjects]","fix":{"range":[7060,7062],"text":"[loadProjects]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useMemo, useState } from 'react';\nimport {\n  Alert,\n  Badge,\n  Button,\n  Card,\n  Divider,\n  Empty,\n  Form,\n  Input,\n  List,\n  Modal,\n  Progress,\n  Segmented,\n  Select,\n  Space,\n  Statistic,\n  Tag,\n  Tooltip,\n  Typography,\n  message\n} from 'antd';\nimport {\n  AimOutlined,\n  DeleteOutlined,\n  ExperimentOutlined,\n  FileTextOutlined,\n  PlusOutlined,\n  RocketOutlined,\n  SettingOutlined,\n  ThunderboltOutlined\n} from '@ant-design/icons';\nimport { motion } from 'framer-motion';\nimport { projectAPI, type CreateEmptyProjectPayload, type Project } from '@/services/api/project';\n\nconst { Title, Text, Paragraph } = Typography;\n\ntype BannerState = {\n  type: 'success' | 'info' | 'warning' | 'error';\n  content: string;\n} | null;\n\ntype ResearchMode = 'rag' | 'deep' | 'auto';\n\nconst researchModes: Array<{\n  value: ResearchMode;\n  label: string;\n  subtitle: string;\n  icon: React.ReactNode;\n}> = [\n  { value: 'rag', label: 'RAG 模式', subtitle: '利用主经验快速检索与问答', icon: <AimOutlined /> },\n  { value: 'deep', label: '深度研究模式', subtitle: '迭代生成课题经验书', icon: <ExperimentOutlined /> },\n  { value: 'auto', label: '全自动模式', subtitle: 'Agent 自动拆解与调度', icon: <RocketOutlined /> }\n];\n\nconst modeTips: Record<ResearchMode, { title: string; description: string; checklist: string[] }> = {\n  rag: {\n    title: '快速问答的最佳实践',\n    description: '确保文献已完成清洁化整理，并同步主经验索引，问题可立即得到引用支撑。',\n    checklist: [\n      '保持文献分段结构完整，支持精准引用',\n      '问答中插入澄清节点，确保上下文一致',\n      '关键问题答复后同步检索记录，便于复用'\n    ]\n  },\n  deep: {\n    title: '深度研究流程建议',\n    description: '围绕具体课题生成经验书，保持每轮输出可追溯并可复盘。',\n    checklist: [\n      '为项目补齐关键词和研究方向元数据',\n      '依托任务中心查看 Celery 队列执行情况',\n      '生成的经验立即回填主经验库，用于后续问答'\n    ]\n  },\n  auto: {\n    title: '自动化编排提示',\n    description: '适合复杂课题，Agent 会依次完成建库、经验生成与验证任务。',\n    checklist: [\n      '明确核心问题与子问题拆解思路',\n      '设置任务超时与回退策略，避免资源浪费',\n      '完成后将有效流程沉淀为模板，供团队复用'\n    ]\n  }\n};\n\nconst statusMeta: Record<\n  string,\n  {\n    text: string;\n    tagColor: string;\n    ribbonColor: string;\n    description: string;\n  }\n> = {\n  empty: {\n    text: '待启动',\n    tagColor: 'default',\n    ribbonColor: '#475569',\n    description: '尚未启动建库或经验生成任务'\n  },\n  active: {\n    text: '进行中',\n    tagColor: 'processing',\n    ribbonColor: '#38BDF8',\n    description: '流水线正在执行，可随时插入澄清'\n  },\n  completed: {\n    text: '已完成',\n    tagColor: 'success',\n    ribbonColor: '#4ADE80',\n    description: '经验书生成完成，建议复盘并固化模板'\n  },\n  archived: {\n    text: '已归档',\n    tagColor: 'warning',\n    ribbonColor: '#FACC15',\n    description: '项目已归档，可整理沉淀或删除'\n  },\n  default: {\n    text: '未标记',\n    tagColor: 'default',\n    ribbonColor: '#64748B',\n    description: '状态未知，请检查项目元数据'\n  }\n};\n\nconst recommendedAction: Record<string, string> = {\n  empty: '启动自动建库流水线，优先完成文献结构化。',\n  active: '进入深度模式，检查最近一轮经验生成输出。',\n  completed: '导出经验书并同步主经验库，供 RAG 答复使用。',\n  archived: '复盘归档记录并清理冗余任务。'\n};\n\nconst categoryOptions = [\n  { label: '材料科学', value: 'materials' },\n  { label: '化学工程', value: 'chemistry' },\n  { label: '生命科学', value: 'biology' },\n  { label: '计算方法', value: 'computational' }\n];\n\nexport const ProjectListDemo: React.FC = () => {\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [createModalOpen, setCreateModalOpen] = useState(false);\n  const [banner, setBanner] = useState<BannerState>(null);\n  const [selectedMode, setSelectedMode] = useState<ResearchMode>('rag');\n  const [form] = Form.useForm<CreateEmptyProjectPayload>();\n\n  const summary = useMemo(() => {\n    if (!projects.length) {\n      return { total: 0, active: 0, completed: 0, literature: 0, avgProgress: 0 };\n    }\n\n    const active = projects.filter(project => project.status === 'active').length;\n    const completed = projects.filter(project => project.status === 'completed').length;\n    const literature = projects.reduce((total, project) => total + (project.literature_count ?? 0), 0);\n    const progressList = projects\n      .map(project => project.progress_percentage)\n      .filter((value): value is number => typeof value === 'number');\n    const avgProgress = progressList.length\n      ? Math.round(progressList.reduce((total, value) => total + value, 0) / progressList.length)\n      : 0;\n\n    return {\n      total: projects.length,\n      active,\n      completed,\n      literature,\n      avgProgress\n    };\n  }, [projects]);\n\n  const loadProjects = async () => {\n    setLoading(true);\n    try {\n      const data = await projectAPI.getProjects();\n      setProjects(data);\n      if (data.length) {\n        setBanner({\n          type: 'success',\n          content: `已同步 ${data.length} 个项目，可根据 ${modeTips[selectedMode].title} 选择研究流程。`\n        });\n      } else {\n        setBanner({ type: 'info', content: '还没有项目，先创建一个示例计划试试不同模式吧。' });\n      }\n    } catch (error) {\n      console.error('Load projects error:', error);\n      message.error('加载项目失败，可能需要先登录');\n      setBanner({ type: 'error', content: '加载项目失败，请确认登录状态或稍后重试。' });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateProject = async (values: CreateEmptyProjectPayload) => {\n    try {\n      const project = await projectAPI.createEmptyProject(values);\n      setProjects(prev => [project, ...prev]);\n      setCreateModalOpen(false);\n      form.resetFields();\n      setBanner({\n        type: 'success',\n        content: `项目「${project.name}」已创建，建议立即在深度模式下拆解研究问题。`\n      });\n    } catch (error) {\n      console.error('Create project error:', error);\n      message.error('创建项目失败');\n      setBanner({ type: 'error', content: '创建项目失败，请检查表单信息或稍后重试。' });\n    }\n  };\n\n  const handleDeleteProject = async (project: Project) => {\n    try {\n      await projectAPI.deleteProject(project.id);\n      setProjects(prev => prev.filter(item => item.id !== project.id));\n      setBanner({ type: 'warning', content: `项目「${project.name}」已删除，相关任务记录将一并清理。` });\n    } catch (error) {\n      console.error('Delete project error:', error);\n      message.error('删除项目失败');\n      setBanner({ type: 'error', content: '删除项目失败，请稍后重试。' });\n    }\n  };\n\n  const confirmDeleteProject = (project: Project) => {\n    Modal.confirm({\n      title: '确认删除',\n      content: `确定要删除项目“${project.name}”吗？此操作无法撤销。`,\n      okText: '删除',\n      okType: 'danger',\n      cancelText: '取消',\n      onOk: () => handleDeleteProject(project)\n    });\n  };\n\n  const handleShowComingSoon = () => {\n    setBanner({ type: 'info', content: '项目配置与高级建模工具正在完善中，敬请期待。' });\n  };\n\n  const segmentedOptions = useMemo(\n    () =>\n      researchModes.map(mode => ({\n        value: mode.value,\n        label: (\n          <div className=\"min-w-[140px]\">\n            <Space direction=\"vertical\" size={4}>\n              <Space size={8}>\n                <span className=\"text-lg text-slate-100\">{mode.icon}</span>\n                <span className=\"text-sm text-slate-100\">{mode.label}</span>\n              </Space>\n              <span className=\"text-xs text-slate-400 leading-tight\">{mode.subtitle}</span>\n            </Space>\n          </div>\n        )\n      })),\n    []\n  );\n\n  useEffect(() => {\n    loadProjects();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (!projects.length) return;\n    setBanner(current => {\n      if (current && current.type === 'error') {\n        return current;\n      }\n      return {\n        type: 'success',\n        content: `已同步 ${projects.length} 个项目，可根据 ${modeTips[selectedMode].title} 选择研究流程。`\n      };\n    });\n  }, [projects.length, selectedMode]);\n\n  const renderModeTips = () => {\n    const tip = modeTips[selectedMode];\n    return (\n      <div className=\"rounded-2xl border border-slate-800/60 bg-slate-900/40 p-5\">\n        <Space direction=\"vertical\" size={12} className=\"w-full\">\n          <Space size={10}>\n            <div className=\"flex h-10 w-10 items-center justify-center rounded-xl bg-indigo-500/15 text-indigo-300\">\n              {researchModes.find(mode => mode.value === selectedMode)?.icon}\n            </div>\n            <div>\n              <Text strong className=\"text-slate-100\">\n                {tip.title}\n              </Text>\n              <Paragraph className=\"!mb-0 text-xs text-slate-400\">{tip.description}</Paragraph>\n            </div>\n          </Space>\n          <Divider className=\"my-2 border-slate-800/60\" />\n          <ul className=\"list-disc list-inside space-y-1 text-xs text-slate-300\">\n            {tip.checklist.map(item => (\n              <li key={item}>{item}</li>\n            ))}\n          </ul>\n        </Space>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"mx-auto max-w-7xl space-y-6 p-6 text-slate-100\">\n      <motion.section\n        initial={{ opacity: 0, y: 16 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.4 }}\n        className=\"rounded-3xl border border-slate-800/60 bg-slate-900/40 p-6 shadow-[0_24px_60px_rgba(12,18,32,0.45)]\"\n      >\n        <Space direction=\"vertical\" size={18} className=\"w-full\">\n          <div className=\"flex flex-col gap-4 md:flex-row md:items-center md:justify-between\">\n            <div>\n              <Title level={2} className=\"!mb-2 text-slate-100\">\n                科研项目驾驶舱\n              </Title>\n              <Paragraph className=\"!mb-0 text-sm text-slate-300\">\n                结合快速问答、深度研究与自动编排三种模式，帮助团队把控研究节奏。\n              </Paragraph>\n            </div>\n            <Space size={12}>\n              <Button icon={<SettingOutlined />} onClick={loadProjects} loading={loading}>\n                刷新状态\n              </Button>\n              <Button type=\"primary\" icon={<PlusOutlined />} onClick={() => setCreateModalOpen(true)}>\n                创建项目\n              </Button>\n            </Space>\n          </div>\n\n          <Segmented\n            value={selectedMode}\n            onChange={value => setSelectedMode(value as ResearchMode)}\n            options={segmentedOptions}\n            className=\"w-full overflow-hidden bg-slate-800/40\"\n          />\n\n          <div className=\"grid gap-6 lg:grid-cols-[1.3fr_1fr]\">\n            <div className=\"grid gap-4 sm:grid-cols-2 xl:grid-cols-4\">\n              <motion.div whileHover={{ y: -4 }} className=\"rounded-2xl border border-slate-800/80 bg-slate-900/50 p-4\">\n                <Space direction=\"vertical\" size={6}>\n                  <Text className=\"text-xs uppercase tracking-wide text-slate-400\">项目总数</Text>\n                  <div className=\"flex items-baseline gap-2\">\n                    <Statistic value={summary.total} suffix=\"个\" valueStyle={{ color: '#F8FAFC' }} />\n                    <Tag color=\"blue\" bordered={false}>\n                      全量\n                    </Tag>\n                  </div>\n                </Space>\n              </motion.div>\n\n              <motion.div whileHover={{ y: -4 }} className=\"rounded-2xl border border-slate-800/80 bg-slate-900/50 p-4\">\n                <Space direction=\"vertical\" size={6}>\n                  <Text className=\"text-xs uppercase tracking-wide text-slate-400\">活跃项目</Text>\n                  <div className=\"flex items-baseline gap-2\">\n                    <Statistic value={summary.active} suffix=\"个\" valueStyle={{ color: '#38BDF8' }} />\n                    <Tag icon={<ThunderboltOutlined />} color=\"processing\" bordered={false}>\n                      实时\n                    </Tag>\n                  </div>\n                </Space>\n              </motion.div>\n\n              <motion.div whileHover={{ y: -4 }} className=\"rounded-2xl border border-slate-800/80 bg-slate-900/50 p-4\">\n                <Space direction=\"vertical\" size={6}>\n                  <Text className=\"text-xs uppercase tracking-wide text-slate-400\">平均进度</Text>\n                  <div className=\"flex items-baseline gap-2\">\n                    <Statistic value={summary.avgProgress} suffix=\"%\" valueStyle={{ color: '#A855F7' }} />\n                    <Tag color=\"purple\" bordered={false}>\n                      经验迭代\n                    </Tag>\n                  </div>\n                </Space>\n              </motion.div>\n\n              <motion.div whileHover={{ y: -4 }} className=\"rounded-2xl border border-slate-800/80 bg-slate-900/50 p-4\">\n                <Space direction=\"vertical\" size={6}>\n                  <Text className=\"text-xs uppercase tracking-wide text-slate-400\">累计文献</Text>\n                  <div className=\"flex items-baseline gap-2\">\n                    <Statistic value={summary.literature} suffix=\"篇\" valueStyle={{ color: '#4ADE80' }} />\n                    <Tag color=\"green\" bordered={false}>\n                      清洁化\n                    </Tag>\n                  </div>\n                </Space>\n              </motion.div>\n            </div>\n\n            {renderModeTips()}\n          </div>\n        </Space>\n      </motion.section>\n\n      {banner && (\n        <Alert\n          showIcon\n          type={banner.type}\n          message={banner.content}\n          className=\"rounded-2xl border border-slate-800/80 bg-slate-900/60\"\n        />\n      )}\n\n      <List\n        grid={{ gutter: 20, xs: 1, sm: 2, lg: 3 }}\n        loading={loading}\n        dataSource={projects}\n        locale={{\n          emptyText: (\n            <Empty description=\"暂无项目，试着创建一个新的研究计划吧\" image={Empty.PRESENTED_IMAGE_SIMPLE} />\n          )\n        }}\n        renderItem={(project, index) => {\n          const meta = statusMeta[project.status] ?? statusMeta.default;\n          const progressValue = typeof project.progress_percentage === 'number'\n            ? Math.min(Math.max(project.progress_percentage, 0), 100)\n            : null;\n\n          return (\n            <List.Item key={project.id}>\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: index * 0.05, duration: 0.35 }}\n              >\n                <Badge.Ribbon text={meta.text} color={meta.ribbonColor} placement=\"start\">\n                  <Card\n                    bordered={false}\n                    className=\"h-full rounded-3xl border border-slate-800/70 bg-slate-900/40 backdrop-blur-xl transition-all duration-300 hover:-translate-y-1 hover:shadow-[0_18px_45px_rgba(15,23,42,0.35)]\"\n                  >\n                    <Space direction=\"vertical\" size={16} className=\"w-full\">\n                      <div className=\"flex items-start justify-between gap-3\">\n                        <div className=\"min-w-0\">\n                          <Title level={4} className=\"truncate text-slate-100\">\n                            {project.name}\n                          </Title>\n                          <Paragraph\n                            ellipsis={{ rows: 2 }}\n                            className=\"!mb-0 text-sm text-slate-400\"\n                          >\n                            {project.description || '暂无描述，建议补充研究目标或关键假设。'}\n                          </Paragraph>\n                        </div>\n                        <Space size={6}>\n                          <Tooltip title=\"查看文献仓库\">\n                            <Button type=\"text\" shape=\"circle\" icon={<FileTextOutlined />} />\n                          </Tooltip>\n                          <Tooltip title=\"项目配置即将上线\">\n                            <Button type=\"text\" shape=\"circle\" icon={<SettingOutlined />} onClick={handleShowComingSoon} />\n                          </Tooltip>\n                          <Tooltip title=\"删除项目\">\n                            <Button\n                              type=\"text\"\n                              shape=\"circle\"\n                              danger\n                              icon={<DeleteOutlined />}\n                              onClick={() => confirmDeleteProject(project)}\n                            />\n                          </Tooltip>\n                        </Space>\n                      </div>\n\n                      <div className=\"grid gap-3 text-sm text-slate-300\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-slate-400\">项目状态</span>\n                          <Tag color={meta.tagColor}>{meta.text}</Tag>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-slate-400\">文献数量</span>\n                          <Text strong>{project.literature_count}</Text>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-slate-400\">状态说明</span>\n                          <Text className=\"max-w-[70%] truncate text-xs text-slate-400\">{meta.description}</Text>\n                        </div>\n                      </div>\n\n                      {progressValue !== null && (\n                        <motion.div\n                          initial={{ opacity: 0.6 }}\n                          animate={{ opacity: 1 }}\n                          className=\"rounded-2xl border border-slate-800/70 bg-slate-900/50 p-4\"\n                        >\n                          <Space direction=\"vertical\" size={6} className=\"w-full\">\n                            <Space className=\"w-full items-center justify-between\">\n                              <Text className=\"text-xs text-slate-400\">研究进度</Text>\n                              <Text strong className=\"text-sm text-slate-200\">{progressValue}%</Text>\n                            </Space>\n                            <Progress\n                              percent={progressValue}\n                              strokeWidth={6}\n                              strokeColor={{ from: '#4C6EF5', to: '#A855F7' }}\n                              showInfo={false}\n                              className=\"!mb-0\"\n                            />\n                          </Space>\n                        </motion.div>\n                      )}\n\n                      {!!project.keywords?.length && (\n                        <div className=\"flex flex-wrap gap-2\">\n                          {project.keywords.slice(0, 4).map(keyword => (\n                            <Tag key={keyword} color=\"geekblue\" bordered={false}>\n                              {keyword}\n                            </Tag>\n                          ))}\n                          {project.keywords.length > 4 && <Tag bordered={false}>+{project.keywords.length - 4}</Tag>}\n                        </div>\n                      )}\n\n                      <div className=\"rounded-2xl border border-indigo-500/35 bg-indigo-500/10 p-4\">\n                        <Space direction=\"vertical\" size={4} className=\"w-full text-sm\">\n                          <Space className=\"w-full items-center justify-between\">\n                            <Text className=\"text-indigo-200\">推荐下一步</Text>\n                            <Tag color=\"processing\">\n                              {researchModes.find(mode => mode.value === selectedMode)?.label}\n                            </Tag>\n                          </Space>\n                          <Text className=\"text-slate-200\">\n                            {recommendedAction[project.status] ?? '查看项目详情，补充元数据以获取更准确建议。'}\n                          </Text>\n                        </Space>\n                      </div>\n\n                      <div className=\"flex items-center justify-between border-t border-slate-800/60 pt-3 text-xs text-slate-400\">\n                        <span>创建时间: {new Date(project.created_at).toLocaleDateString()}</span>\n                        {project.updated_at && <span>最近更新: {new Date(project.updated_at).toLocaleDateString()}</span>}\n                      </div>\n                    </Space>\n                  </Card>\n                </Badge.Ribbon>\n              </motion.div>\n            </List.Item>\n          );\n        }}\n      />\n\n      <Modal\n        title=\"创建新项目\"\n        open={createModalOpen}\n        onOk={() => form.submit()}\n        onCancel={() => setCreateModalOpen(false)}\n        okText=\"创建\"\n        cancelText=\"取消\"\n        destroyOnClose\n      >\n        <div className=\"grid gap-6 lg:grid-cols-[minmax(0,1fr)_260px]\">\n          <Form\n            form={form}\n            layout=\"vertical\"\n            requiredMark={false}\n            onFinish={handleCreateProject}\n            className=\"rounded-2xl border border-slate-800/60 bg-slate-900/40 p-4\"\n          >\n            <Form.Item\n              label=\"项目名称\"\n              name=\"name\"\n              rules={[{ required: true, message: '请输入项目名称' }]}\n            >\n              <Input placeholder=\"例如：高性能钙钛矿太阳能电池\" />\n            </Form.Item>\n            <Form.Item label=\"项目简介\" name=\"description\">\n              <Input.TextArea\n                placeholder=\"简要描述研究目标或要解决的关键问题\"\n                autoSize={{ minRows: 3, maxRows: 4 }}\n              />\n            </Form.Item>\n            <Form.Item label=\"研究领域 (可选)\" name=\"category\">\n              <Select allowClear placeholder=\"选择适配的研究领域\" options={categoryOptions} />\n            </Form.Item>\n          </Form>\n\n          <div className=\"hidden rounded-2xl border border-slate-800/60 bg-slate-900/40 p-4 lg:block\">\n            <Space direction=\"vertical\" size={10}>\n              <Text strong className=\"text-slate-100\">流程提示</Text>\n              <Paragraph className=\"!mb-0 text-xs text-slate-400 leading-relaxed\">\n                创建后可在深度模式中拆解问题并启动经验生成任务；若需快速问答，直接在 RAG 模式下选择主经验即可。\n              </Paragraph>\n              <Divider className=\"my-2 border-slate-800/60\" />\n              <ul className=\"list-disc list-inside space-y-1 text-xs text-slate-400\">\n                <li>建库支持上传 PDF / DOI / Zotero 数据</li>\n                <li>耗时任务会自动进入后台，可在任务面板查看进度</li>\n                <li>交互流程可插入澄清问题，保持人机协同</li>\n              </ul>\n            </Space>\n          </div>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/pages/auth/auth-landing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/pages/auto/auto-research-page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":3,"column":56,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":63},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tag' is defined but never used.","line":3,"column":65,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":68},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AlertCircle' is defined but never used.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Pause' is defined but never used.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RotateCcw' is defined but never used.","line":11,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setIsVisible' is assigned a value but never used.","line":52,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":198,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6755,6758],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6755,6758],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":261,"column":10,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":261,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":261,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":261,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8885,8888],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8885,8888],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setCurrentStage' is assigned a value but never used.","line":262,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":262,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":268,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":268,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .analysisResult on an `any` value.","line":268,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":268,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .session_id on an `any` value.","line":271,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":271,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":272,"column":37,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":272,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .session_id on an `any` value.","line":272,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":272,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .session_id on an `any` value.","line":276,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":276,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":277,"column":40,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":277,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .session_id on an `any` value.","line":277,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":277,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":288,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":290,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":288,"column":32,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":288,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .clarification_options on an `any` value.","line":288,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":288,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .project_id on an `any` value.","line":295,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":295,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":304,"column":30,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":304,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .title on an `any` value.","line":304,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":304,"endColumn":55},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":368,"column":28,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12111,12140],"text":"\n                AI正在分析您的需求：&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12111,12140],"text":"\n                AI正在分析您的需求：&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12111,12140],"text":"\n                AI正在分析您的需求：&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12111,12140],"text":"\n                AI正在分析您的需求：&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":368,"column":52,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12163,12179],"text":"&quot;\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12163,12179],"text":"&ldquo;\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12163,12179],"text":"&#34;\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12163,12179],"text":"&rdquo;\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .clarification_options on an `any` value.","line":395,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":395,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":408,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":408,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .clarification_options on an `any` value.","line":408,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":408,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":417,"column":20,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":417,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .clarification_options on an `any` value.","line":417,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":417,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .intent_analysis on an `any` value.","line":496,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":496,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .intent_analysis on an `any` value.","line":502,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":502,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .intent_analysis on an `any` value.","line":507,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":507,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .intent_analysis on an `any` value.","line":508,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":508,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":517,"column":30,"nodeType":"Identifier","messageId":"anyAssignment","endLine":517,"endColumn":39}],"suppressedMessages":[],"errorCount":37,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Card, Button, Progress, Typography, Row, Col, Divider, Tag, Space, Timeline, Alert, Segmented } from 'antd';\nimport {\n  Zap,\n  Clock,\n  CheckCircle,\n  AlertCircle,\n  Play,\n  Pause,\n  RotateCcw,\n  Eye,\n  MessageSquare,\n  Cpu,\n  Database,\n  FileText,\n  BarChart3\n} from 'lucide-react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useAppStore } from '../../store/app-store';\nimport { useResearchQuery } from '../../hooks/api-hooks';\nimport { wsManager } from '../../api/websocket';\n\nconst { Title, Text, Paragraph } = Typography;\n\ninterface ClarificationOption {\n  option_id: string;\n  title: string;\n  description: string;\n  icon?: string;\n  estimated_time?: string;\n  estimated_results?: string;\n  confidence_score: number;\n  implications: string[];\n  is_recommended: boolean;\n}\n\ninterface ClarificationCardProps {\n  option: ClarificationOption;\n  onSelect: (optionId: string) => void;\n  isSelected?: boolean;\n  timeRemaining?: number;\n}\n\nconst ClarificationCard: React.FC<ClarificationCardProps> = ({\n  option,\n  onSelect,\n  isSelected,\n  timeRemaining = 5000\n}) => {\n  const [countdown, setCountdown] = useState(Math.ceil(timeRemaining / 1000));\n  const [isVisible, setIsVisible] = useState(true);\n\n  useEffect(() => {\n    if (timeRemaining <= 0) return;\n\n    const timer = setInterval(() => {\n      setCountdown(prev => {\n        if (prev <= 1) {\n          if (option.is_recommended) {\n            onSelect(option.option_id);\n          }\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [timeRemaining, option.is_recommended, option.option_id, onSelect]);\n\n  const progressPercent = ((5 - countdown) / 5) * 100;\n\n  return (\n    <AnimatePresence>\n      {isVisible && (\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9, y: 20 }}\n          animate={{ opacity: 1, scale: 1, y: 0 }}\n          exit={{ opacity: 0, scale: 0.9, y: -20 }}\n          transition={{ type: 'spring', stiffness: 300, damping: 30 }}\n          whileHover={{ y: -4, scale: 1.02 }}\n          className=\"relative\"\n        >\n          <Card\n            className={`relative overflow-hidden cursor-pointer transition-all duration-300 ${\n              isSelected\n                ? 'ring-2 ring-primary-500 border-primary-500'\n                : 'border-neutral-700 hover:border-primary-400'\n            } ${option.is_recommended ? 'border-accent-500' : ''}`}\n            onClick={() => onSelect(option.option_id)}\n            bodyStyle={{ padding: '20px' }}\n          >\n            {/* Countdown Ring */}\n            {option.is_recommended && countdown > 0 && (\n              <div className=\"absolute top-3 right-3 w-8 h-8\">\n                <svg className=\"w-8 h-8 transform -rotate-90\">\n                  <circle\n                    cx=\"16\"\n                    cy=\"16\"\n                    r=\"14\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                    fill=\"transparent\"\n                    className=\"text-neutral-600\"\n                  />\n                  <circle\n                    cx=\"16\"\n                    cy=\"16\"\n                    r=\"14\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                    fill=\"transparent\"\n                    strokeDasharray={`${2 * Math.PI * 14}`}\n                    strokeDashoffset={`${2 * Math.PI * 14 * (1 - progressPercent / 100)}`}\n                    className=\"text-accent-500 transition-all duration-1000 ease-linear\"\n                  />\n                </svg>\n                <div className=\"absolute inset-0 flex items-center justify-center text-sm font-bold text-accent-500\">\n                  {countdown}\n                </div>\n              </div>\n            )}\n\n            {/* Recommended Badge */}\n            {option.is_recommended && (\n              <div className=\"absolute top-0 right-0 bg-accent-500 text-white px-2 py-1 text-xs rounded-bl\">\n                推荐\n              </div>\n            )}\n\n            <div className=\"flex items-start space-x-4\">\n              {/* Icon */}\n              <div className=\"flex-shrink-0\">\n                <div className=\"w-12 h-12 rounded-lg bg-gradient-to-r from-primary-500 to-primary-600 flex items-center justify-center\">\n                  {option.icon ? (\n                    <span className=\"text-2xl\">{option.icon}</span>\n                  ) : (\n                    <Zap className=\"w-6 h-6 text-white\" />\n                  )}\n                </div>\n              </div>\n\n              <div className=\"flex-1 min-w-0\">\n                {/* Title */}\n                <Title level={5} className=\"!mb-2 !text-white\">\n                  {option.title}\n                </Title>\n\n                {/* Description */}\n                <Paragraph className=\"!mb-3 !text-neutral-300 text-sm\">\n                  {option.description}\n                </Paragraph>\n\n                {/* Meta Info */}\n                <div className=\"flex items-center space-x-4 mb-3\">\n                  {option.estimated_time && (\n                    <div className=\"flex items-center text-neutral-400 text-xs\">\n                      <Clock className=\"w-3 h-3 mr-1\" />\n                      {option.estimated_time}\n                    </div>\n                  )}\n                  <div className=\"flex items-center text-neutral-400 text-xs\">\n                    <BarChart3 className=\"w-3 h-3 mr-1\" />\n                    置信度 {Math.round(option.confidence_score * 100)}%\n                  </div>\n                </div>\n\n                {/* Implications */}\n                {option.implications && option.implications.length > 0 && (\n                  <div className=\"space-y-1\">\n                    {option.implications.slice(0, 2).map((implication, index) => (\n                      <div key={index} className=\"flex items-center text-neutral-400 text-xs\">\n                        <div className=\"w-1 h-1 rounded-full bg-primary-400 mr-2 flex-shrink-0\" />\n                        {implication}\n                      </div>\n                    ))}\n                  </div>\n                )}\n\n                {/* Expected Results */}\n                {option.estimated_results && (\n                  <div className=\"mt-3 p-2 bg-neutral-800 rounded text-xs text-neutral-300\">\n                    <Text className=\"text-primary-400\">预期结果：</Text>\n                    {option.estimated_results}\n                  </div>\n                )}\n              </div>\n            </div>\n          </Card>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n};\n\ninterface AgentOrchestrationProps {\n  agentPlan?: any;\n  currentStage?: string;\n}\n\nconst AgentOrchestration: React.FC<AgentOrchestrationProps> = ({ agentPlan, currentStage }) => {\n  const stages = [\n    { key: 'analysis', title: '问题分析', icon: <Cpu className=\"w-4 h-4\" /> },\n    { key: 'search', title: '文献搜索', icon: <Database className=\"w-4 h-4\" /> },\n    { key: 'download', title: 'PDF下载', icon: <FileText className=\"w-4 h-4\" /> },\n    { key: 'extraction', title: '内容提取', icon: <Eye className=\"w-4 h-4\" /> },\n    { key: 'synthesis', title: '知识合成', icon: <BarChart3 className=\"w-4 h-4\" /> },\n  ];\n\n  return (\n    <Card className=\"border-neutral-700\">\n      <Title level={5} className=\"!text-white !mb-4\">\n        <Cpu className=\"w-5 h-5 inline mr-2\" />\n        Claude Code 工具编排\n      </Title>\n\n      <Timeline\n        items={stages.map(stage => ({\n          dot: stage.icon,\n          color: currentStage === stage.key ? 'blue' : 'gray',\n          children: (\n            <div>\n              <Text className={currentStage === stage.key ? 'text-primary-400' : 'text-neutral-400'}>\n                {stage.title}\n              </Text>\n              {currentStage === stage.key && (\n                <div className=\"mt-1\">\n                  <Progress\n                    percent={65}\n                    size=\"small\"\n                    strokeColor=\"#3b82f6\"\n                    trailColor=\"#374151\"\n                  />\n                </div>\n              )}\n            </div>\n          ),\n        }))}\n      />\n\n      {agentPlan && (\n        <div className=\"mt-4 p-3 bg-neutral-800 rounded\">\n          <Text className=\"text-neutral-300 text-sm\">\n            AI编排计划：{JSON.stringify(agentPlan, null, 2)}\n          </Text>\n        </div>\n      )}\n    </Card>\n  );\n};\n\nexport const AutoResearchPage: React.FC = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { currentSession } = useAppStore();\n\n  const [selectedOption, setSelectedOption] = useState<string | null>(null);\n  const [clarificationPhase, setClarificationPhase] = useState(true);\n  const [researchPhase, setResearchPhase] = useState(false);\n  const [agentPlan, setAgentPlan] = useState<any>(null);\n  const [currentStage, setCurrentStage] = useState<string>('analysis');\n  const [selectedAgent, setSelectedAgent] = useState<'claude' | 'codex' | 'gemini'>('claude');\n\n  const researchQuery = useResearchQuery();\n\n  // Get analysis result from navigation state\n  const analysisResult = location.state?.analysisResult;\n\n  useEffect(() => {\n    if (analysisResult?.session_id) {\n      wsManager.joinResearchSession(analysisResult.session_id);\n    }\n\n    return () => {\n      if (analysisResult?.session_id) {\n        wsManager.leaveResearchSession(analysisResult.session_id);\n      }\n    };\n  }, [analysisResult]);\n\n  const handleOptionSelect = async (optionId: string) => {\n    setSelectedOption(optionId);\n    setClarificationPhase(false);\n    setResearchPhase(true);\n\n    // Find selected option details\n    const selectedOptionData = analysisResult?.clarification_options?.find(\n      (opt: ClarificationOption) => opt.option_id === optionId\n    );\n\n    try {\n      // Start research with selected parameters\n      const projectId =\n        (analysisResult?.project_id as number | undefined) ||\n        (currentSession?.context?.project_id as number | undefined) ||\n        1;\n\n      const result = await researchQuery.mutateAsync({\n        project_id: projectId,\n        query: currentSession?.query || '',\n        mode: 'auto',\n        auto_config: {\n          processing_method: selectedOptionData?.title.includes('深度') ? 'deep' : 'standard',\n          enable_ai_filtering: true,\n          enable_pdf_processing: true,\n          enable_structured_extraction: true,\n        },\n        agent: selectedAgent,\n      });\n\n      // 使用新的结构化响应\n      if (result.payload.structured_plan) {\n        setAgentPlan(result.payload.structured_plan);\n      } else {\n        setAgentPlan(result.payload.agent_plan);\n      }\n\n      // 如果有阶段详情，使用它来更新进度\n      if (result.payload.stage_details) {\n        console.log('Stage details received:', result.payload.stage_details);\n        // TODO: 集成到进度显示组件\n      }\n    } catch (error) {\n      console.error('Research query failed:', error);\n    }\n  };\n\n  const handleManualInput = () => {\n    // Allow user to input custom parameters\n    console.log('Manual input requested');\n  };\n\n  if (!analysisResult) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Alert\n          message=\"未找到分析结果\"\n          description=\"请返回首页重新开始研究\"\n          type=\"warning\"\n          showIcon\n          action={\n            <Button onClick={() => navigate('/')}>\n              返回首页\n            </Button>\n          }\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-neural-900 to-neural-800 p-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Header */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"mb-8\"\n        >\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <Title level={2} className=\"!text-white !mb-2\">\n                <Zap className=\"w-8 h-8 inline mr-3 text-primary-400\" />\n                全自动研究模式\n              </Title>\n              <Text className=\"text-neutral-400\">\n                AI正在分析您的需求：\"{currentSession?.query}\"\n              </Text>\n            </div>\n            <Space size=\"middle\">\n              <div className=\"text-right\">\n                <Text className=\"text-neutral-400 block mb-1\">选择调度核心</Text>\n                <Segmented\n                  size=\"middle\"\n                  options={[\n                    { label: 'Claude', value: 'claude' },\n                    { label: 'CodeX', value: 'codex' },\n                    { label: 'Gemini CLI', value: 'gemini' },\n                  ]}\n                  value={selectedAgent}\n                  onChange={value => setSelectedAgent(value as 'claude' | 'codex' | 'gemini')}\n                />\n              </div>\n              <Button onClick={() => navigate('/')} className=\"border-neutral-600\">\n                返回首页\n              </Button>\n            </Space>\n          </div>\n        </motion.div>\n\n        <Row gutter={[24, 24]}>\n          {/* Main Content */}\n          <Col xs={24} lg={16}>\n            {clarificationPhase && analysisResult.clarification_options && (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: 0.2 }}\n              >\n                <Card className=\"border-neutral-700 mb-6\">\n                  <Title level={4} className=\"!text-white !mb-4\">\n                    <MessageSquare className=\"w-5 h-5 inline mr-2\" />\n                    请选择研究方向\n                  </Title>\n                  <Text className=\"text-neutral-300 block mb-4\">\n                    AI已分析您的需求，请选择最符合您期望的研究方向。\n                    {analysisResult.clarification_options.some((opt: ClarificationOption) => opt.is_recommended) && (\n                      <span className=\"text-accent-400 ml-2\">\n                        5秒后将自动选择推荐选项\n                      </span>\n                    )}\n                  </Text>\n                </Card>\n\n                <div className=\"space-y-4\">\n                  {analysisResult.clarification_options.map((option: ClarificationOption) => (\n                    <ClarificationCard\n                      key={option.option_id}\n                      option={option}\n                      onSelect={handleOptionSelect}\n                      isSelected={selectedOption === option.option_id}\n                      timeRemaining={5000}\n                    />\n                  ))}\n                </div>\n\n                <div className=\"mt-6 text-center\">\n                  <Button\n                    type=\"default\"\n                    onClick={handleManualInput}\n                    className=\"border-neutral-600\"\n                  >\n                    自定义参数\n                  </Button>\n                </div>\n              </motion.div>\n            )}\n\n            {researchPhase && (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: 0.3 }}\n              >\n                <Card className=\"border-neutral-700\">\n                  <Title level={4} className=\"!text-white !mb-4\">\n                    <Play className=\"w-5 h-5 inline mr-2\" />\n                    研究进行中\n                  </Title>\n\n                  <div className=\"space-y-4\">\n                    <Alert\n                      message=\"AI正在执行您的研究任务\"\n                      description=\"请耐心等待，整个过程预计需要3-5分钟\"\n                      type=\"info\"\n                      showIcon\n                    />\n\n                    <div className=\"flex items-center justify-between p-4 bg-neutral-800 rounded\">\n                      <div>\n                        <Text className=\"text-white\">总体进度</Text>\n                        <div className=\"text-xs text-neutral-400 mt-1\">\n                          已完成 2/5 个阶段\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-2xl font-bold text-primary-400\">40%</div>\n                        <Progress\n                          percent={40}\n                          size=\"small\"\n                          strokeColor=\"#3b82f6\"\n                          trailColor=\"#374151\"\n                          className=\"w-32\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </Card>\n              </motion.div>\n            )}\n          </Col>\n\n          {/* Sidebar */}\n          <Col xs={24} lg={8}>\n            <div className=\"space-y-6\">\n              {/* Intent Analysis Results */}\n              <Card className=\"border-neutral-700\">\n                <Title level={5} className=\"!text-white !mb-4\">\n                  意图分析结果\n                </Title>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <Text className=\"text-neutral-400\">意图置信度</Text>\n                    <Text className=\"text-primary-400\">\n                      {Math.round((analysisResult.intent_analysis?.intent_confidence || 0) * 100)}%\n                    </Text>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <Text className=\"text-neutral-400\">模糊程度</Text>\n                    <Text className=\"text-accent-400\">\n                      {Math.round((analysisResult.intent_analysis?.ambiguity_score || 0) * 100)}%\n                    </Text>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <Text className=\"text-neutral-400\">需要澄清</Text>\n                    <Text className={analysisResult.intent_analysis?.clarification_needed ? 'text-orange-400' : 'text-green-400'}>\n                      {analysisResult.intent_analysis?.clarification_needed ? '是' : '否'}\n                    </Text>\n                  </div>\n                </div>\n              </Card>\n\n              {/* Agent Orchestration */}\n              {researchPhase && (\n                <AgentOrchestration\n                  agentPlan={agentPlan}\n                  currentStage={currentStage}\n                />\n              )}\n\n              {/* Real-time Logs */}\n              {researchPhase && (\n                <Card className=\"border-neutral-700\">\n                  <Title level={5} className=\"!text-white !mb-4\">\n                    实时日志\n                  </Title>\n                  <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n                    <div className=\"text-xs text-neutral-400\">\n                      [14:32:15] 开始问题分析...\n                    </div>\n                    <div className=\"text-xs text-neutral-400\">\n                      [14:32:18] 检测到关键词: 机器学习, 医疗诊断\n                    </div>\n                    <div className=\"text-xs text-primary-400\">\n                      [14:32:20] 启动文献搜索工具...\n                    </div>\n                    <div className=\"text-xs text-neutral-400\">\n                      [14:32:25] 找到 127 篇相关文献\n                    </div>\n                  </div>\n                </Card>\n              )}\n            </div>\n          </Col>\n        </Row>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/pages/dashboard/dashboard-page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tag' is defined but never used.","line":4,"column":62,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":65},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":5,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Empty' is defined but never used.","line":5,"column":56,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FileTextOutlined' is defined but never used.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrophyOutlined' is defined but never used.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'StarOutlined' is defined but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":15},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":74,"column":26,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":74,"endColumn":99,"fix":{"range":[2287,2297],"text":""}}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React, { useMemo } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport {\n  Layout, Row, Col, Card, Statistic, Progress, List, Avatar, Tag,\n  Button, Space, Typography, Tooltip, Badge, Skeleton, Empty\n} from 'antd';\nimport {\n  ExperimentOutlined,\n  FileTextOutlined,\n  RiseOutlined,\n  TeamOutlined,\n  ClockCircleOutlined,\n  ThunderboltOutlined,\n  BookOutlined,\n  BulbOutlined,\n  TrophyOutlined,\n  RocketOutlined,\n  FireOutlined,\n  StarOutlined,\n  SearchOutlined,\n  PlusOutlined,\n  CheckCircleOutlined,\n} from '@ant-design/icons';\nimport { motion } from 'framer-motion';\nimport { useNavigate } from 'react-router-dom';\nimport { useProjects, useTaskOverview } from '@/hooks/api-hooks';\nimport { fetchUsageStatistics } from '@/services/api/usage';\n\nconst { Title, Text, Paragraph } = Typography;\n\ninterface DashboardStats {\n  totalProjects: number;\n  totalLiterature: number;\n  totalExperience: number;\n  activeResearch: number;\n  weeklyGrowth: number;\n  monthlyQueries: number;\n  successRate: number;\n  avgResponseTime: number;\n}\n\ninterface RecentActivity {\n  id: string;\n  type: 'research' | 'upload' | 'experience' | 'collaboration';\n  title: string;\n  description: string;\n  timestamp: string;\n  icon: React.ReactNode;\n  color: string;\n}\n\nexport const DashboardPage: React.FC = () => {\n  const navigate = useNavigate();\n  const projectsQuery = useProjects();\n  const taskOverviewQuery = useTaskOverview();\n  const usageStatsQuery = useQuery({\n    queryKey: ['usage-statistics'],\n    queryFn: fetchUsageStatistics,\n    staleTime: 60_000,\n  });\n\n  const isLoading = projectsQuery.isLoading || taskOverviewQuery.isLoading || usageStatsQuery.isLoading;\n\n  const usageStats = usageStatsQuery.data;\n  const taskOverview = taskOverviewQuery.data;\n\n  const totalProjects = usageStats?.usage?.total_projects ?? projectsQuery.data?.length ?? 0;\n  const totalLiterature = usageStats?.usage?.total_literature ?? 0;\n  const completedTasks = usageStats?.usage?.completed_tasks ?? 0;\n  const runningTasks = taskOverview?.running_task_ids?.length ?? 0;\n  const monthlyQueries = usageStats?.usage?.monthly_queries_used ?? 0;\n\n  const statusBreakdown = taskOverview?.status_breakdown ?? {};\n  const completedCount = (statusBreakdown?.completed ?? statusBreakdown?.COMPLETED ?? 0) as number;\n  const totalTasks = taskOverview?.total_tasks ?? 0;\n  const successRate = totalTasks ? (completedCount / totalTasks) * 100 : 0;\n\n  const stats: DashboardStats = {\n    totalProjects,\n    totalLiterature,\n    totalExperience: completedTasks,\n    activeResearch: runningTasks,\n    weeklyGrowth: successRate,\n    monthlyQueries,\n    successRate,\n    avgResponseTime: 0,\n  };\n\n  const recentActivities: RecentActivity[] = useMemo(() => {\n    const recent = taskOverview?.recent_tasks ?? [];\n    return recent.map((task, index) => {\n      const taskId = task.id ?? task.task_id ?? index;\n      const status = (task.status ?? '').toLowerCase();\n      const createdAt = task.created_at ? new Date(task.created_at).toLocaleString() : '';\n\n      return {\n        id: String(taskId),\n        type: 'research',\n        title: task.title ?? task.task_type ?? `任务 ${taskId}`,\n        description: task.description ?? '无详细描述',\n        timestamp: createdAt,\n        icon: status === 'completed' ? <CheckCircleOutlined /> : <ThunderboltOutlined />,\n        color: status === 'failed' ? '#f87171' : '#1890ff',\n      };\n    });\n  }, [taskOverview]);\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1,\n      },\n    },\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.5,\n      },\n    },\n  };\n\n  return (\n    <Layout className=\"min-h-screen bg-gradient-to-br from-gray-50 to-gray-100\">\n      <div className=\"p-6\">\n        <motion.div\n          variants={containerVariants}\n          initial=\"hidden\"\n          animate=\"visible\"\n        >\n          {/* Header */}\n          <motion.div variants={itemVariants} className=\"mb-6\">\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <Title level={2} className=\"mb-0 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                  智能研究工作台\n                </Title>\n                <Text type=\"secondary\">欢迎回来，今天是探索科学的好日子 🚀</Text>\n              </div>\n              <Space>\n                <Button\n                  type=\"primary\"\n                  icon={<PlusOutlined />}\n                  onClick={() => navigate('/workspace')}\n                  className=\"bg-gradient-to-r from-blue-500 to-purple-500 border-0\"\n                >\n                  开始研究\n                </Button>\n                <Button\n                  icon={<SearchOutlined />}\n                  onClick={() => navigate('/library')}\n                >\n                  文献库\n                </Button>\n              </Space>\n            </div>\n          </motion.div>\n\n          {/* Stats Cards */}\n          <Row gutter={[24, 24]}>\n            <Col xs={24} sm={12} lg={6}>\n              <motion.div variants={itemVariants}>\n                <Card\n                  className=\"hover:shadow-xl transition-all duration-300 border-0\"\n                  style={{\n                    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\n                  }}\n                >\n                  <Statistic\n                    title={<span className=\"text-white opacity-90\">研究项目</span>}\n                    value={stats.totalProjects}\n                    prefix={<ExperimentOutlined className=\"text-white\" />}\n                    valueStyle={{ color: 'white', fontSize: '32px', fontWeight: 'bold' }}\n                  />\n                  <div className=\"mt-2\">\n                    <Badge status=\"processing\" />\n                    <Text className=\"text-white opacity-75 ml-2\">\n                      {stats.activeResearch} 个进行中\n                    </Text>\n                  </div>\n                </Card>\n              </motion.div>\n            </Col>\n\n            <Col xs={24} sm={12} lg={6}>\n              <motion.div variants={itemVariants}>\n                <Card\n                  className=\"hover:shadow-xl transition-all duration-300 border-0\"\n                  style={{\n                    background: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',\n                  }}\n                >\n                  <Statistic\n                    title={<span className=\"text-white opacity-90\">文献总数</span>}\n                    value={stats.totalLiterature}\n                    prefix={<BookOutlined className=\"text-white\" />}\n                    valueStyle={{ color: 'white', fontSize: '32px', fontWeight: 'bold' }}\n                  />\n                  <div className=\"mt-2 flex items-center\">\n                    <RiseOutlined className=\"text-white\" />\n                    <Text className=\"text-white opacity-75 ml-2\">\n                      本周新增 {Math.floor(stats.weeklyGrowth)}\n                    </Text>\n                  </div>\n                </Card>\n              </motion.div>\n            </Col>\n\n            <Col xs={24} sm={12} lg={6}>\n              <motion.div variants={itemVariants}>\n                <Card\n                  className=\"hover:shadow-xl transition-all duration-300 border-0\"\n                  style={{\n                    background: 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)',\n                  }}\n                >\n                  <Statistic\n                    title={<span className=\"text-white opacity-90\">研究经验</span>}\n                    value={stats.totalExperience}\n                    prefix={<BulbOutlined className=\"text-white\" />}\n                    suffix={<span className=\"text-white text-sm\">条</span>}\n                    valueStyle={{ color: 'white', fontSize: '32px', fontWeight: 'bold' }}\n                  />\n                  <Progress\n                    percent={stats.successRate}\n                    strokeColor=\"white\"\n                    trailColor=\"rgba(255,255,255,0.3)\"\n                    showInfo={false}\n                    className=\"mt-2\"\n                  />\n                </Card>\n              </motion.div>\n            </Col>\n\n            <Col xs={24} sm={12} lg={6}>\n              <motion.div variants={itemVariants}>\n                <Card\n                  className=\"hover:shadow-xl transition-all duration-300 border-0\"\n                  style={{\n                    background: 'linear-gradient(135deg, #fa709a 0%, #fee140 100%)',\n                  }}\n                >\n                  <Statistic\n                    title={<span className=\"text-white opacity-90\">响应速度</span>}\n                    value={stats.avgResponseTime}\n                    prefix={<ThunderboltOutlined className=\"text-white\" />}\n                    suffix={<span className=\"text-white text-sm\">秒</span>}\n                    valueStyle={{ color: 'white', fontSize: '32px', fontWeight: 'bold' }}\n                  />\n                  <div className=\"mt-2 flex items-center\">\n                    <FireOutlined className=\"text-white animate-pulse\" />\n                    <Text className=\"text-white opacity-75 ml-2\">\n                      极速响应\n                    </Text>\n                  </div>\n                </Card>\n              </motion.div>\n            </Col>\n          </Row>\n\n          {/* Recent Activities */}\n          <Row gutter={[24, 24]} className=\"mt-6\">\n            <Col xs={24}>\n              <motion.div variants={itemVariants}>\n                <Card\n                  title={\n                    <div className=\"flex items-center\">\n                      <ClockCircleOutlined className=\"mr-2 text-green-500\" />\n                      <span className=\"font-semibold\">最近活动</span>\n                    </div>\n                  }\n                  className=\"shadow-lg border-0\"\n                  extra={\n                    <Button type=\"link\" onClick={() => navigate('/tasks')}>\n                      查看全部\n                    </Button>\n                  }\n                >\n                  {isLoading ? (\n                    <Skeleton active />\n                  ) : (\n                    <List\n                      itemLayout=\"horizontal\"\n                      dataSource={recentActivities}\n                      renderItem={(item) => (\n                        <List.Item>\n                          <List.Item.Meta\n                            avatar={\n                              <Avatar\n                                icon={item.icon}\n                                style={{ backgroundColor: item.color }}\n                                className=\"shadow-md\"\n                              />\n                            }\n                            title={\n                              <div className=\"flex items-center justify-between\">\n                                <span className=\"font-medium\">{item.title}</span>\n                                <Text type=\"secondary\" className=\"text-xs\">\n                                  {item.timestamp}\n                                </Text>\n                              </div>\n                            }\n                            description={\n                              <Paragraph className=\"mb-0 text-gray-600\">\n                                {item.description}\n                              </Paragraph>\n                            }\n                          />\n                        </List.Item>\n                      )}\n                    />\n                  )}\n                </Card>\n              </motion.div>\n            </Col>\n          </Row>\n\n          {/* Quick Actions */}\n          <motion.div variants={itemVariants} className=\"mt-6\">\n            <Card className=\"shadow-lg border-0 bg-gradient-to-r from-blue-50 to-purple-50\">\n              <Title level={4}>快速开始</Title>\n              <Row gutter={[16, 16]}>\n                {[\n                  { icon: <SearchOutlined />, title: 'RAG检索', desc: '快速检索知识库', color: '#1890ff' },\n                  { icon: <BulbOutlined />, title: '深度研究', desc: '生成研究经验', color: '#722ed1' },\n                  { icon: <RocketOutlined />, title: '全自动模式', desc: 'AI编排流程', color: '#52c41a' },\n                  { icon: <TeamOutlined />, title: '团队协作', desc: '邀请成员', color: '#fa8c16' },\n                ].map((action, index) => (\n                  <Col xs={12} sm={6} key={index}>\n                    <motion.div\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <Card\n                        hoverable\n                        className=\"text-center cursor-pointer\"\n                        onClick={() => navigate('/workspace')}\n                      >\n                        <Avatar\n                          size={48}\n                          icon={action.icon}\n                          style={{ backgroundColor: action.color }}\n                        />\n                        <Title level={5} className=\"mt-3 mb-1\">{action.title}</Title>\n                        <Text type=\"secondary\" className=\"text-xs\">{action.desc}</Text>\n                      </Card>\n                    </motion.div>\n                  </Col>\n                ))}\n              </Row>\n            </Card>\n          </motion.div>\n        </motion.div>\n      </div>\n    </Layout>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/pages/deep/deep-research-page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BarChart3' is defined but never used.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Network' is defined but never used.","line":30,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BookOpen' is defined but never used.","line":31,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Layers' is defined but never used.","line":32,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Eye' is defined but never used.","line":34,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Download' is defined but never used.","line":35,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useLiteratureSearch' is defined but never used.","line":44,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Paragraph' is assigned a value but never used.","line":46,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":31},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":86,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":86,"endColumn":42,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1979,1979],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2430,2433],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2430,2433],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2548,2551],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2548,2551],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `Partial<IterationConfig>`.","line":133,"column":33,"nodeType":"ObjectExpression","messageId":"unsafeArgument","endLine":136,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":134,"column":43,"nodeType":"Property","messageId":"anyAssignment","endLine":134,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":135,"column":47,"nodeType":"Property","messageId":"anyAssignment","endLine":135,"endColumn":81},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":140,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":140,"endColumn":66,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3945,3945],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":238,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7152,7155],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7152,7155],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":241,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":241,"endColumn":19},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":429,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":429,"endColumn":42,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[13192,13192],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":689,"column":42,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[23134,23236],"text":"\n                        [15:23:18] 处理文献: &quot;Deep Learning for Medical Diagnosis\"\n                      "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[23134,23236],"text":"\n                        [15:23:18] 处理文献: &ldquo;Deep Learning for Medical Diagnosis\"\n                      "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[23134,23236],"text":"\n                        [15:23:18] 处理文献: &#34;Deep Learning for Medical Diagnosis\"\n                      "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[23134,23236],"text":"\n                        [15:23:18] 处理文献: &rdquo;Deep Learning for Medical Diagnosis\"\n                      "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":689,"column":78,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[23134,23236],"text":"\n                        [15:23:18] 处理文献: \"Deep Learning for Medical Diagnosis&quot;\n                      "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[23134,23236],"text":"\n                        [15:23:18] 处理文献: \"Deep Learning for Medical Diagnosis&ldquo;\n                      "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[23134,23236],"text":"\n                        [15:23:18] 处理文献: \"Deep Learning for Medical Diagnosis&#34;\n                      "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[23134,23236],"text":"\n                        [15:23:18] 处理文献: \"Deep Learning for Medical Diagnosis&rdquo;\n                      "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":21,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport {\n  Card,\n  Typography,\n  Row,\n  Col,\n  Slider,\n  Switch,\n  Button,\n  Select,\n  Input,\n  Tree,\n  Tag,\n  Progress,\n  Divider,\n  Space,\n  Alert,\n  Tabs,\n  message,\n} from 'antd';\nimport {\n  BrainCircuit,\n  GitBranch,\n  Settings,\n  Play,\n  Target,\n  Database,\n  BarChart3,\n  Network,\n  BookOpen,\n  Layers,\n  Zap,\n  Eye,\n  Download,\n  Lightbulb,\n  CheckCircle,\n  Clock\n} from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAppStore } from '../../store/app-store';\nimport { useAppStore as useWorkspaceStore } from '@/stores/app.store';\nimport { researchAPI } from '@/services/api/research';\nimport { useResearchQuery, useLiteratureSearch } from '../../hooks/api-hooks';\n\nconst { Title, Text, Paragraph } = Typography;\nconst { TextArea } = Input;\nconst { Option } = Select;\nconst { TabPane } = Tabs;\n\ninterface SubQuestion {\n  id: string;\n  text: string;\n  complexity: 'low' | 'medium' | 'high';\n  relatedLiteratureCount: number;\n  keywords: string[];\n  priority: number;\n}\n\ninterface IterationConfig {\n  rounds: number;\n  docsPerRound: number;\n  focusTopics: string[];\n  analysisDepth: 'surface' | 'moderate' | 'deep';\n  enableCrossValidation: boolean;\n  synthesisMethod: 'sequential' | 'parallel' | 'hierarchical';\n}\n\nconst QueryDecomposition: React.FC<{\n  query: string;\n  onQueryUpdate: (query: string) => void;\n  subQuestions: SubQuestion[];\n  onSubQuestionsUpdate: (questions: SubQuestion[]) => void;\n  onIterationConfigUpdate: (config: Partial<IterationConfig>) => void;\n  projectId?: number;\n}> = ({ query, onQueryUpdate, subQuestions, onSubQuestionsUpdate, onIterationConfigUpdate, projectId }) => {\n  const [isDecomposing, setIsDecomposing] = useState(false);\n  const [overallComplexity, setOverallComplexity] = useState(0.6);\n\n  const handleDecomposeQuery = async () => {\n    if (!query.trim()) {\n      return;\n    }\n\n    if (!projectId) {\n      message.warning('请先选择一个项目再进行问题拆解');\n      return;\n    }\n\n    setIsDecomposing(true);\n    try {\n      const analysisResult = (await researchAPI.analyzeQuery({\n        query,\n        project_id: projectId,\n        context: {\n          mode: 'deep',\n          existing_keywords: [],\n        },\n      })) as {\n        recommended_mode: string;\n        sub_questions: string[];\n        complexity_score: number;\n        estimated_resources: Record<string, any>;\n        reasoning: string;\n        suggested_keywords: string[];\n        processing_suggestions: Record<string, any>;\n      };\n\n      // 转换API响应为组件需要的格式\n      const subQuestionList: string[] = Array.isArray(analysisResult.sub_questions)\n        ? analysisResult.sub_questions\n        : [];\n      const suggestedKeywords: string[] = Array.isArray(analysisResult.suggested_keywords)\n        ? analysisResult.suggested_keywords\n        : [];\n\n      const subQuestions: SubQuestion[] = subQuestionList.map((question: string, index: number) => ({\n        id: (index + 1).toString(),\n        text: question,\n        complexity: analysisResult.complexity_score > 0.7 ? 'high' :\n                    analysisResult.complexity_score > 0.4 ? 'medium' : 'low',\n        relatedLiteratureCount: Math.floor(Math.random() * 50) + 10, // TODO: 从实际搜索结果获取\n        keywords: suggestedKeywords.slice(index * 2, (index + 1) * 2) || [],\n        priority: index + 1\n      }));\n\n      onSubQuestionsUpdate(subQuestions);\n      setOverallComplexity(analysisResult.complexity_score);\n\n      // 如果有推荐的处理建议，更新配置\n      if (analysisResult.processing_suggestions) {\n        const suggestions = analysisResult.processing_suggestions;\n        onIterationConfigUpdate({\n          ...(suggestions.batch_size && { docsPerRound: suggestions.batch_size }),\n          ...(suggestions.max_iterations && { rounds: suggestions.max_iterations })\n        });\n      }\n    } catch (error) {\n      console.error('Query decomposition failed:', error);\n      message.error((error as Error)?.message || '问题分析失败，请稍后重试');\n    } finally {\n      setIsDecomposing(false);\n    }\n  };\n\n  const treeData = subQuestions.map(sq => ({\n    title: (\n      <div className=\"flex items-start justify-between w-full\">\n        <div className=\"flex-1\">\n          <Text className=\"text-white font-medium\">{sq.text}</Text>\n          <div className=\"flex items-center space-x-2 mt-2\">\n            <Tag color={sq.complexity === 'high' ? 'red' : sq.complexity === 'medium' ? 'orange' : 'green'}>\n              {sq.complexity === 'high' ? '高复杂度' : sq.complexity === 'medium' ? '中等复杂度' : '低复杂度'}\n            </Tag>\n            <Tag color=\"blue\">{sq.relatedLiteratureCount} 篇文献</Tag>\n            <Tag color=\"purple\">优先级 {sq.priority}</Tag>\n          </div>\n          <div className=\"flex flex-wrap gap-1 mt-2\">\n            {sq.keywords.map(keyword => (\n              <Tag key={keyword} className=\"text-xs\">\n                {keyword}\n              </Tag>\n            ))}\n          </div>\n        </div>\n      </div>\n    ),\n    key: sq.id,\n    children: []\n  }));\n\n  return (\n    <Card className=\"border-neutral-700 mb-6\">\n      <Title level={4} className=\"!text-white !mb-4\">\n        <GitBranch className=\"w-5 h-5 inline mr-2\" />\n        问题拆解分析\n      </Title>\n\n      <div className=\"mb-6\">\n        <Text className=\"text-neutral-300 block mb-2\">主要研究问题：</Text>\n        <TextArea\n          value={query}\n          onChange={(e) => onQueryUpdate(e.target.value)}\n          placeholder=\"输入您的复杂研究问题...\"\n          rows={3}\n          className=\"mb-4\"\n        />\n\n        <div className=\"flex items-center justify-between\">\n          <Button\n            type=\"primary\"\n            loading={isDecomposing}\n            onClick={handleDecomposeQuery}\n            icon={<Target className=\"w-4 h-4\" />}\n          >\n            AI智能拆解\n          </Button>\n\n          <div className=\"flex items-center space-x-4\">\n            <Text className=\"text-neutral-400\">整体复杂度：</Text>\n            <div className=\"flex items-center space-x-2\">\n              <Progress\n                type=\"circle\"\n                size={40}\n                percent={Math.round(overallComplexity * 100)}\n                strokeColor={overallComplexity > 0.7 ? '#ef4444' : overallComplexity > 0.4 ? '#f59e0b' : '#10b981'}\n                trailColor=\"#374151\"\n              />\n              <Text className=\"text-primary-400\">\n                {overallComplexity > 0.7 ? '高' : overallComplexity > 0.4 ? '中' : '低'}\n              </Text>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {subQuestions.length > 0 && (\n        <div>\n          <Divider className=\"border-neutral-600\" />\n          <Text className=\"text-neutral-300 block mb-4\">拆解后的子问题：</Text>\n          <Tree\n            treeData={treeData}\n            defaultExpandAll\n            className=\"custom-tree\"\n            showLine={false}\n          />\n        </div>\n      )}\n    </Card>\n  );\n};\n\nconst IterationConfigPanel: React.FC<{\n  config: IterationConfig;\n  onConfigUpdate: (config: IterationConfig) => void;\n  extractedTopics: string[];\n}> = ({ config, onConfigUpdate, extractedTopics }) => {\n  const handleConfigChange = (key: keyof IterationConfig, value: any) => {\n    onConfigUpdate({\n      ...config,\n      [key]: value\n    });\n  };\n\n  return (\n    <Card className=\"border-neutral-700\">\n      <Title level={4} className=\"!text-white !mb-4\">\n        <Settings className=\"w-5 h-5 inline mr-2\" />\n        迭代参数配置\n      </Title>\n\n      <div className=\"space-y-6\">\n        {/* Iteration Rounds */}\n        <div>\n          <Text className=\"text-neutral-300 block mb-2\">迭代轮次：{config.rounds} 轮</Text>\n          <Slider\n            min={3}\n            max={10}\n            value={config.rounds}\n            onChange={(value) => handleConfigChange('rounds', value)}\n            marks={{\n              3: '3',\n              5: '5',\n              7: '7',\n              10: '10'\n            }}\n          />\n          <Text className=\"text-neutral-500 text-sm\">\n            更多轮次可获得更深入的知识合成，但会增加时间和成本\n          </Text>\n        </div>\n\n        {/* Docs per Round */}\n        <div>\n          <Text className=\"text-neutral-300 block mb-2\">每轮文献数：{config.docsPerRound} 篇</Text>\n          <Slider\n            min={3}\n            max={15}\n            value={config.docsPerRound}\n            onChange={(value) => handleConfigChange('docsPerRound', value)}\n            marks={{\n              3: '3',\n              5: '5',\n              10: '10',\n              15: '15'\n            }}\n          />\n          <Text className=\"text-neutral-500 text-sm\">\n            每轮处理更多文献可提高全面性，但会增加处理时间\n          </Text>\n        </div>\n\n        {/* Analysis Depth */}\n        <div>\n          <Text className=\"text-neutral-300 block mb-2\">分析深度：</Text>\n          <Select\n            value={config.analysisDepth}\n            onChange={(value) => handleConfigChange('analysisDepth', value)}\n            className=\"w-full\"\n          >\n            <Option value=\"surface\">浅层分析 - 快速概览</Option>\n            <Option value=\"moderate\">中等深度 - 平衡效率与质量</Option>\n            <Option value=\"deep\">深度分析 - 全面深入</Option>\n          </Select>\n        </div>\n\n        {/* Synthesis Method */}\n        <div>\n          <Text className=\"text-neutral-300 block mb-2\">合成方法：</Text>\n          <Select\n            value={config.synthesisMethod}\n            onChange={(value) => handleConfigChange('synthesisMethod', value)}\n            className=\"w-full\"\n          >\n            <Option value=\"sequential\">顺序合成 - 逐步积累知识</Option>\n            <Option value=\"parallel\">并行合成 - 多角度同时分析</Option>\n            <Option value=\"hierarchical\">分层合成 - 层次化知识构建</Option>\n          </Select>\n        </div>\n\n        {/* Focus Topics */}\n        <div>\n          <Text className=\"text-neutral-300 block mb-2\">聚焦主题：</Text>\n          <div className=\"flex flex-wrap gap-2\">\n            {extractedTopics.map(topic => (\n              <Tag.CheckableTag\n                key={topic}\n                checked={config.focusTopics.includes(topic)}\n                onChange={(checked) => {\n                  const newTopics = checked\n                    ? [...config.focusTopics, topic]\n                    : config.focusTopics.filter(t => t !== topic);\n                  handleConfigChange('focusTopics', newTopics);\n                }}\n                className=\"border-neutral-600\"\n              >\n                {topic}\n              </Tag.CheckableTag>\n            ))}\n          </div>\n          <Text className=\"text-neutral-500 text-sm mt-2\">\n            选择要重点关注的主题，未选择的主题也会被分析但权重较低\n          </Text>\n        </div>\n\n        {/* Advanced Options */}\n        <div>\n          <Divider className=\"border-neutral-600 my-4\" />\n          <Text className=\"text-neutral-300 block mb-3\">高级选项：</Text>\n\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Text className=\"text-neutral-300\">启用交叉验证</Text>\n                <br />\n                <Text className=\"text-neutral-500 text-sm\">验证不同文献间的观点一致性</Text>\n              </div>\n              <Switch\n                checked={config.enableCrossValidation}\n                onChange={(checked) => handleConfigChange('enableCrossValidation', checked)}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Cost Estimation */}\n        <div className=\"p-4 bg-neutral-800 rounded\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <Text className=\"text-neutral-300\">预估成本：</Text>\n            <Text className=\"text-primary-400 font-bold\">\n              ${(config.rounds * config.docsPerRound * 0.15).toFixed(2)}\n            </Text>\n          </div>\n          <div className=\"flex items-center justify-between mb-2\">\n            <Text className=\"text-neutral-400 text-sm\">预估时间：</Text>\n            <Text className=\"text-neutral-400 text-sm\">\n              {Math.round(config.rounds * config.docsPerRound * 0.5)} 分钟\n            </Text>\n          </div>\n          <Progress\n            percent={Math.min((config.rounds * config.docsPerRound) / 50 * 100, 100)}\n            strokeColor=\"#3b82f6\"\n            trailColor=\"#374151\"\n            size=\"small\"\n          />\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nexport const DeepResearchPage: React.FC = () => {\n  const navigate = useNavigate();\n  const { currentSession } = useAppStore();\n  const currentProject = useWorkspaceStore((state) => state.currentProject);\n  const researchQuery = useResearchQuery();\n\n  const [query, setQuery] = useState(currentSession?.query || '');\n  const [subQuestions, setSubQuestions] = useState<SubQuestion[]>([]);\n  const [iterationConfig, setIterationConfig] = useState<IterationConfig>({\n    rounds: 5,\n    docsPerRound: 5,\n    focusTopics: [],\n    analysisDepth: 'moderate',\n    enableCrossValidation: true,\n    synthesisMethod: 'sequential'\n  });\n\n  const [isResearching, setIsResearching] = useState(false);\n  const [researchProgress, setResearchProgress] = useState(0);\n\n  const extractedTopics = [\n    '机器学习算法',\n    '深度学习',\n    '医疗影像',\n    '临床诊断',\n    '数据预处理',\n    '模型验证',\n    '伦理考量',\n    '监管标准'\n  ];\n\n  const handleStartResearch = async () => {\n    if (!query.trim()) {\n      return;\n    }\n\n    if (!currentProject) {\n      message.warning('请先选择一个项目再启动深度研究');\n      return;\n    }\n\n    setIsResearching(true);\n    setResearchProgress(0);\n\n    try {\n      const result = await researchQuery.mutateAsync({\n        project_id: currentProject.id,\n        query,\n        mode: 'deep',\n        processing_method: 'deep_iterative',\n        keywords: iterationConfig.focusTopics,\n        auto_config: {\n          iteration_rounds: iterationConfig.rounds,\n          docs_per_round: iterationConfig.docsPerRound,\n          analysis_depth: iterationConfig.analysisDepth,\n          synthesis_method: iterationConfig.synthesisMethod,\n          enable_cross_validation: iterationConfig.enableCrossValidation,\n          sub_questions: subQuestions.map(sq => sq.text)\n        }\n      });\n\n      // Navigate to results page or show progress\n      console.log('Deep research started:', result);\n    } catch (error) {\n      console.error('Deep research failed:', error);\n    } finally {\n      setIsResearching(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-neural-900 to-neural-800 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"mb-8\"\n        >\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <Title level={2} className=\"!text-white !mb-2\">\n                <BrainCircuit className=\"w-8 h-8 inline mr-3 text-emerald-400\" />\n                深度研究工作台\n              </Title>\n              <Text className=\"text-neutral-400\">\n                专业研究工具，精确控制每个分析环节\n              </Text>\n            </div>\n            <Button onClick={() => navigate('/')} className=\"border-neutral-600\">\n              返回首页\n            </Button>\n          </div>\n        </motion.div>\n\n        {!currentProject && (\n          <Alert\n            type=\"warning\"\n            showIcon\n            message=\"请在研究工作台选择一个项目后再执行深度研究操作\"\n            className=\"mb-4\"\n          />\n        )}\n\n        {!isResearching ? (\n          <Row gutter={[24, 24]}>\n            {/* Main Configuration */}\n            <Col xs={24} lg={16}>\n              <div className=\"space-y-6\">\n                {/* Query Decomposition */}\n                <QueryDecomposition\n                  query={query}\n                  onQueryUpdate={setQuery}\n                  subQuestions={subQuestions}\n                  onSubQuestionsUpdate={setSubQuestions}\n                  onIterationConfigUpdate={(config) =>\n                    setIterationConfig((prev) => ({\n                      ...prev,\n                      ...config,\n                    }))\n                  }\n                  projectId={currentProject?.id}\n                />\n\n                {/* Start Research Button */}\n                <Card className=\"border-neutral-700 text-center\">\n                  <Space direction=\"vertical\" size=\"large\">\n                    <div>\n                      <Title level={4} className=\"!text-white !mb-2\">\n                        准备启动深度研究\n                      </Title>\n                      <Text className=\"text-neutral-400\">\n                        配置完成后点击启动，系统将进行 {iterationConfig.rounds} 轮迭代分析\n                      </Text>\n                    </div>\n\n                    <Button\n                      type=\"primary\"\n                      size=\"large\"\n                      icon={<Play className=\"w-5 h-5\" />}\n                      onClick={handleStartResearch}\n                      disabled={!query.trim() || subQuestions.length === 0 || !currentProject}\n                      className=\"px-8\"\n                    >\n                      启动深度研究\n                    </Button>\n\n                    {(!query.trim() || subQuestions.length === 0) && (\n                      <Alert\n                        message=\"请先完成问题拆解分析\"\n                        type=\"warning\"\n                        showIcon\n                        className=\"mt-4\"\n                      />\n                    )}\n                  </Space>\n                </Card>\n              </div>\n            </Col>\n\n            {/* Configuration Panel */}\n            <Col xs={24} lg={8}>\n              <div className=\"space-y-6\">\n                <IterationConfigPanel\n                  config={iterationConfig}\n                  onConfigUpdate={setIterationConfig}\n                  extractedTopics={extractedTopics}\n                />\n\n                {/* Literature Preview */}\n                <Card className=\"border-neutral-700\">\n                  <Title level={5} className=\"!text-white !mb-4\">\n                    <Database className=\"w-5 h-5 inline mr-2\" />\n                    相关文献预览\n                  </Title>\n\n                  <div className=\"space-y-3\">\n                    {subQuestions.map(sq => (\n                      <div key={sq.id} className=\"flex items-center justify-between\">\n                        <Text className=\"text-neutral-300 text-sm flex-1\">\n                          {sq.text.substring(0, 30)}...\n                        </Text>\n                        <Tag color=\"blue\">\n                          {sq.relatedLiteratureCount}篇\n                        </Tag>\n                      </div>\n                    ))}\n                  </div>\n\n                  <Divider className=\"border-neutral-600 my-4\" />\n\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-emerald-400\">\n                      {subQuestions.reduce((sum, sq) => sum + sq.relatedLiteratureCount, 0)}\n                    </div>\n                    <Text className=\"text-neutral-400 text-sm\">总计可用文献</Text>\n                  </div>\n                </Card>\n\n                {/* Research Tips */}\n                <Card className=\"border-neutral-700\">\n                  <Title level={5} className=\"!text-white !mb-3\">\n                    <Lightbulb className=\"w-5 h-5 inline mr-2\" />\n                    研究建议\n                  </Title>\n\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-start space-x-2\">\n                      <div className=\"w-1.5 h-1.5 rounded-full bg-emerald-400 mt-2 flex-shrink-0\" />\n                      <Text className=\"text-neutral-400 text-sm\">\n                        问题越具体，分析结果越精确\n                      </Text>\n                    </div>\n                    <div className=\"flex items-start space-x-2\">\n                      <div className=\"w-1.5 h-1.5 rounded-full bg-emerald-400 mt-2 flex-shrink-0\" />\n                      <Text className=\"text-neutral-400 text-sm\">\n                        选择重点主题可以提高分析针对性\n                      </Text>\n                    </div>\n                    <div className=\"flex items-start space-x-2\">\n                      <div className=\"w-1.5 h-1.5 rounded-full bg-emerald-400 mt-2 flex-shrink-0\" />\n                      <Text className=\"text-neutral-400 text-sm\">\n                        交叉验证有助于提高结论可信度\n                      </Text>\n                    </div>\n                  </div>\n                </Card>\n              </div>\n            </Col>\n          </Row>\n        ) : (\n          /* Research Progress View */\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"max-w-4xl mx-auto\"\n          >\n            <Card className=\"border-neutral-700\">\n              <Title level={3} className=\"!text-white text-center !mb-6\">\n                深度研究进行中\n              </Title>\n\n              <div className=\"space-y-6\">\n                <Alert\n                  message=\"AI正在进行深度迭代分析\"\n                  description=\"这个过程会比较耗时，请耐心等待。您可以随时查看详细进度。\"\n                  type=\"info\"\n                  showIcon\n                />\n\n                <div className=\"text-center\">\n                  <Progress\n                    type=\"circle\"\n                    size={120}\n                    percent={researchProgress}\n                    strokeColor=\"#10b981\"\n                    trailColor=\"#374151\"\n                  />\n                  <div className=\"mt-4\">\n                    <Text className=\"text-white text-lg\">\n                      第 2 轮 / 共 {iterationConfig.rounds} 轮\n                    </Text>\n                    <br />\n                    <Text className=\"text-neutral-400\">\n                      正在处理第 3 篇文献...\n                    </Text>\n                  </div>\n                </div>\n\n                <Tabs defaultActiveKey=\"progress\" className=\"custom-tabs\">\n                  <TabPane tab=\"进度详情\" key=\"progress\">\n                    <div className=\"space-y-4\">\n                      {Array.from({ length: iterationConfig.rounds }, (_, i) => (\n                        <div key={i} className=\"flex items-center justify-between p-3 bg-neutral-800 rounded\">\n                          <div>\n                            <Text className=\"text-white\">第 {i + 1} 轮迭代</Text>\n                            <br />\n                            <Text className=\"text-neutral-400 text-sm\">\n                              {i < 2 ? '已完成' : i === 2 ? '进行中' : '等待中'}\n                            </Text>\n                          </div>\n                          <div className=\"text-right\">\n                            {i < 2 && <CheckCircle className=\"w-6 h-6 text-green-400\" />}\n                            {i === 2 && <Zap className=\"w-6 h-6 text-blue-400 animate-pulse\" />}\n                            {i > 2 && <Clock className=\"w-6 h-6 text-neutral-600\" />}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </TabPane>\n\n                  <TabPane tab=\"实时日志\" key=\"logs\">\n                    <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                      <div className=\"text-xs text-neutral-400\">\n                        [15:23:15] 开始第2轮迭代分析\n                      </div>\n                      <div className=\"text-xs text-neutral-400\">\n                        [15:23:18] 处理文献: \"Deep Learning for Medical Diagnosis\"\n                      </div>\n                      <div className=\"text-xs text-primary-400\">\n                        [15:23:25] 提取关键概念: 卷积神经网络, 医疗影像\n                      </div>\n                      <div className=\"text-xs text-neutral-400\">\n                        [15:23:30] 与前轮知识进行交叉验证...\n                      </div>\n                    </div>\n                  </TabPane>\n                </Tabs>\n              </div>\n            </Card>\n          </motion.div>\n        )}\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/pages/landing/landing-page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Globe' is defined but never used.","line":12,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Lightbulb' is defined but never used.","line":13,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":264,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":264,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9231,9234],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9231,9234],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":265,"column":42,"nodeType":"MemberExpression","messageId":"anyAssignment","endLine":265,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":265,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":265,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":270,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":270,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .description on an `any` value.","line":273,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":273,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .literature_count on an `any` value.","line":277,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":277,"endColumn":50}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Input, Card, Button, Space, Tag, Typography, Row, Col, Divider } from 'antd';\nimport {\n  BrainCircuit,\n  Search,\n  Zap,\n  BookOpen,\n  ArrowRight,\n  Sparkles,\n  Target,\n  Globe,\n  Lightbulb\n} from 'lucide-react';\nimport { useStartInteraction, useRecentProjects } from '../../hooks/api-hooks';\nimport { useNavigate } from 'react-router-dom';\nimport { useAppStore } from '../../store/app-store';\n\nconst { Text, Title } = Typography;\nconst { TextArea } = Input;\n\nexport const LandingPage: React.FC = () => {\n  const [userInput, setUserInput] = useState('');\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const navigate = useNavigate();\n\n  const startInteraction = useStartInteraction();\n  const { data: recentProjects } = useRecentProjects();\n  const { setCurrentSession } = useAppStore();\n\n  const handleAnalyzeIntent = async () => {\n    if (!userInput.trim()) return;\n\n    setIsAnalyzing(true);\n    try {\n      const result = await startInteraction.mutateAsync({\n        user_input: userInput,\n        project_id: 1, // Default project or user selection\n      });\n\n      // Create session\n      setCurrentSession({\n        mode: 'auto', // Will be determined by AI analysis\n        sessionId: result.session_id,\n        query: userInput,\n        context: result,\n        startTime: new Date(),\n      });\n\n      // Navigate based on AI analysis\n      if (result.clarification_options && result.clarification_options.length > 0) {\n        navigate('/auto', { state: { analysisResult: result } });\n      } else if (result.direct_action) {\n        // Direct action detected, navigate to appropriate mode\n        const actionType = result.direct_action.action_type;\n        if (actionType === 'rag_query') {\n          navigate('/rag', { state: { analysisResult: result } });\n        } else if (actionType === 'deep_research') {\n          navigate('/deep', { state: { analysisResult: result } });\n        } else {\n          navigate('/auto', { state: { analysisResult: result } });\n        }\n      }\n    } catch (error) {\n      console.error('Intent analysis failed:', error);\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  const modeCards = [\n    {\n      key: 'auto',\n      title: '全自动研究',\n      subtitle: '让AI承担一切复杂性',\n      description: '描述您的研究需求，AI将自动选择最佳工具组合，完成从文献搜索到深度分析的全流程',\n      icon: <Zap className=\"w-8 h-8\" />,\n      color: 'from-blue-500 to-purple-600',\n      features: ['智能工具编排', 'Claude Code集成', '端到端自动化', '实时进度追踪'],\n      path: '/auto'\n    },\n    {\n      key: 'deep',\n      title: '深度研究模式',\n      subtitle: '专业工具，精确控制',\n      description: '适合复杂研究问题，提供精细化参数调整和迭代式知识合成',\n      icon: <BrainCircuit className=\"w-8 h-8\" />,\n      color: 'from-emerald-500 to-teal-600',\n      features: ['问题拆解可视化', '迭代知识合成', '专业参数控制', '知识图谱分析'],\n      path: '/deep'\n    },\n    {\n      key: 'rag',\n      title: 'RAG问答空间',\n      subtitle: '快速响应，直观反馈',\n      description: '基于已有文献库的快速问答，支持上下文选择和相关问题推荐',\n      icon: <Search className=\"w-8 h-8\" />,\n      color: 'from-orange-500 to-red-600',\n      features: ['即时智能问答', '上下文文献选择', '引用来源追踪', '相关问题推荐'],\n      path: '/rag'\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-neural-900 via-neural-800 to-neural-900 relative overflow-hidden\">\n      {/* Aurora Background */}\n      <div className=\"absolute inset-0 aurora-bg opacity-20\" />\n\n      {/* Main Content */}\n      <div className=\"relative z-10 container mx-auto px-6 py-12\">\n        {/* Header */}\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center mb-16\"\n        >\n          <div className=\"flex items-center justify-center mb-6\">\n            <Sparkles className=\"w-12 h-12 text-primary-400 mr-4\" />\n            <Title level={1} className=\"!text-white !mb-0\">\n              深度研究AI平台\n            </Title>\n          </div>\n          <Text className=\"text-xl text-neutral-300 max-w-2xl mx-auto block\">\n            基于AI的智能研究助手，从文献搜索到深度分析，让研究变得简单而高效\n          </Text>\n        </motion.div>\n\n        {/* Intent Analysis Input */}\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.2 }}\n          className=\"max-w-4xl mx-auto mb-16\"\n        >\n          <Card className=\"glass border border-white/20 shadow-2xl\">\n            <div className=\"text-center mb-6\">\n              <Target className=\"w-8 h-8 text-primary-400 mx-auto mb-2\" />\n              <Title level={3} className=\"!text-white !mb-2\">\n                描述您的研究需求\n              </Title>\n              <Text className=\"text-neutral-400\">\n                AI将分析您的意图，推荐最适合的研究模式\n              </Text>\n            </div>\n\n            <Space.Compact className=\"w-full\">\n              <TextArea\n                value={userInput}\n                onChange={(e) => setUserInput(e.target.value)}\n                placeholder=\"例如：我想了解机器学习在医疗诊断中的最新应用...\"\n                rows={3}\n                className=\"flex-1\"\n                size=\"large\"\n              />\n              <Button\n                type=\"primary\"\n                size=\"large\"\n                loading={isAnalyzing}\n                onClick={handleAnalyzeIntent}\n                className=\"h-auto px-8\"\n                icon={<ArrowRight className=\"w-5 h-5\" />}\n              >\n                智能分析\n              </Button>\n            </Space.Compact>\n\n            {/* Quick Examples */}\n            <div className=\"mt-4\">\n              <Text className=\"text-neutral-500 text-sm\">快速示例：</Text>\n              <div className=\"flex flex-wrap gap-2 mt-2\">\n                {[\n                  '量子计算的最新突破',\n                  '可持续能源技术发展趋势',\n                  '人工智能伦理问题研究'\n                ].map((example) => (\n                  <Tag\n                    key={example}\n                    className=\"cursor-pointer hover:bg-primary-600 transition-colors\"\n                    onClick={() => setUserInput(example)}\n                  >\n                    {example}\n                  </Tag>\n                ))}\n              </div>\n            </div>\n          </Card>\n        </motion.div>\n\n        {/* Mode Cards */}\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.4 }}\n          className=\"mb-16\"\n        >\n          <Title level={2} className=\"!text-white text-center mb-8\">\n            选择研究模式\n          </Title>\n\n          <Row gutter={[24, 24]}>\n            {modeCards.map((mode, index) => (\n              <Col xs={24} lg={8} key={mode.key}>\n                <motion.div\n                  initial={{ opacity: 0, y: 30 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.6, delay: 0.1 * index }}\n                  whileHover={{ y: -8, scale: 1.02 }}\n                  className=\"h-full\"\n                >\n                  <Card\n                    className=\"h-full glass border border-white/20 hover:border-white/40 transition-all duration-300 cursor-pointer card-hover\"\n                    onClick={() => navigate(mode.path)}\n                    bodyStyle={{ height: '100%', display: 'flex', flexDirection: 'column' }}\n                  >\n                    <div className={`w-16 h-16 rounded-full bg-gradient-to-r ${mode.color} flex items-center justify-center mb-4 mx-auto`}>\n                      <div className=\"text-white\">\n                        {mode.icon}\n                      </div>\n                    </div>\n\n                    <div className=\"text-center mb-4\">\n                      <Title level={4} className=\"!text-white !mb-2\">\n                        {mode.title}\n                      </Title>\n                      <Text className=\"text-primary-400 text-sm\">\n                        {mode.subtitle}\n                      </Text>\n                    </div>\n\n                    <Text className=\"text-neutral-300 text-center mb-4 flex-1\">\n                      {mode.description}\n                    </Text>\n\n                    <div className=\"space-y-2\">\n                      {mode.features.map((feature) => (\n                        <div key={feature} className=\"flex items-center text-neutral-400 text-sm\">\n                          <div className=\"w-1.5 h-1.5 rounded-full bg-primary-400 mr-2\" />\n                          {feature}\n                        </div>\n                      ))}\n                    </div>\n                  </Card>\n                </motion.div>\n              </Col>\n            ))}\n          </Row>\n        </motion.div>\n\n        {/* Recent Projects */}\n        {recentProjects && recentProjects.length > 0 && (\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.6 }}\n            className=\"max-w-4xl mx-auto\"\n          >\n            <Title level={3} className=\"!text-white mb-6\">\n              <BookOpen className=\"w-6 h-6 inline mr-2\" />\n              最近的项目\n            </Title>\n\n            <Row gutter={[16, 16]}>\n              {recentProjects.slice(0, 3).map((project: any) => (\n                <Col xs={24} md={8} key={project.id}>\n                  <Card className=\"glass border border-white/10 hover:border-white/30 transition-all cursor-pointer\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <Title level={5} className=\"!text-white !mb-1\">\n                          {project.name}\n                        </Title>\n                        <Text className=\"text-neutral-400 text-sm\">\n                          {project.description || '暂无描述'}\n                        </Text>\n                      </div>\n                      <Tag color=\"blue\" className=\"ml-2\">\n                        {project.literature_count || 0} 篇文献\n                      </Tag>\n                    </div>\n                  </Card>\n                </Col>\n              ))}\n            </Row>\n          </motion.div>\n        )}\n\n        {/* Quick Stats */}\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.8 }}\n          className=\"mt-16 text-center\"\n        >\n          <Divider className=\"border-white/20\" />\n          <Row gutter={[32, 16]} className=\"max-w-2xl mx-auto\">\n            <Col xs={12} sm={6}>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-primary-400\">200+</div>\n                <div className=\"text-neutral-400 text-sm\">文献处理能力</div>\n              </div>\n            </Col>\n            <Col xs={12} sm={6}>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-primary-400\">70%</div>\n                <div className=\"text-neutral-400 text-sm\">效率提升</div>\n              </div>\n            </Col>\n            <Col xs={12} sm={6}>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-primary-400\">50%</div>\n                <div className=\"text-neutral-400 text-sm\">成本降低</div>\n              </div>\n            </Col>\n            <Col xs={12} sm={6}>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-primary-400\">24/7</div>\n                <div className=\"text-neutral-400 text-sm\">智能服务</div>\n              </div>\n            </Col>\n          </Row>\n        </motion.div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/pages/library/library-page.tsx","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":1,"message":"Import \"LiteratureListResponse\" is only used as types.","line":31,"column":1,"nodeType":"ImportDeclaration","messageId":"aImportIsOnlyTypes","endLine":31,"endColumn":83,"fix":{"range":[533,579],"text":"import type { LiteratureListResponse } from '@/services/api/literature';\nimport { literatureAPI"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1029,1032],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1029,1032],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .is_starred on an `any` value.","line":51,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":51,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .pdf_url on an `any` value.","line":52,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":52,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .title on an `any` value.","line":57,"column":70,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":57,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .authors on an `any` value.","line":58,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":58,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .authors on an `any` value.","line":60,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":60,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .authors on an `any` value.","line":60,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":60,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .authors on an `any` value.","line":60,"column":88,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":60,"endColumn":95},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":66,"column":12,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":66,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":66,"column":12,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":66,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .keywords on an `any` value.","line":66,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":66,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .slice on an `any` value.","line":66,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":66,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .map on an `any` value.","line":66,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":66,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .journal on an `any` value.","line":74,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":74,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .publication_year on an `any` value.","line":75,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":75,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `number | undefined`.","line":79,"column":39,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":79,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .quality_score on an `any` value.","line":79,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":79,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .quality_score on an `any` value.","line":80,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":80,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":80,"column":61,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":80,"endColumn":93},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .quality_score on an `any` value.","line":80,"column":72,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":80,"endColumn":85},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .doi on an `any` value.","line":82,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":82,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .doi on an `any` value.","line":84,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":84,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .abstract on an `any` value.","line":90,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":90,"endColumn":31},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'projectOptions' logical expression could make the dependencies of useEffect Hook (at line 111) change on every render. To fix this, wrap the initialization of 'projectOptions' in its own useMemo() Hook.","line":106,"column":9,"nodeType":"VariableDeclarator","endLine":106,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":136,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4338,4341],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4338,4341],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .is_starred on an `any` value.","line":141,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":141,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":166,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":166,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5174,5177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5174,5177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":166,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":166,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5182,5185],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5182,5185],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .publication_year on an `any` value.","line":166,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":166,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .publication_year on an `any` value.","line":166,"column":68,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":166,"endColumn":84},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":172,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":172,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5360,5363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5360,5363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":172,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":172,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5368,5371],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5368,5371],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .citation_count on an `any` value.","line":172,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":172,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .citation_count on an `any` value.","line":172,"column":66,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":172,"endColumn":80},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":191,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6062,6065],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6062,6065],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":191,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6075,6078],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6075,6078],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .is_starred on an `any` value.","line":196,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":196,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .is_starred on an `any` value.","line":197,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":197,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .pdf_url on an `any` value.","line":199,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":199,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":201,"column":71,"nodeType":"MemberExpression","messageId":"anyAssignment","endLine":201,"endColumn":85},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .pdf_url on an `any` value.","line":201,"column":78,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":201,"endColumn":85},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":214,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":214,"endColumn":84,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[6829,6829],"text":"void "},"desc":"Add void operator to ignore."}]}],"suppressedMessages":[],"errorCount":41,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import React, { useEffect, useMemo, useState } from 'react';\nimport {\n  Row,\n  Col,\n  Card,\n  Table,\n  Button,\n  Input,\n  Select,\n  Tag,\n  Space,\n  Typography,\n  Tooltip,\n  Spin,\n  Empty,\n} from 'antd';\nimport {\n  UploadOutlined,\n  EyeOutlined,\n  StarOutlined,\n  StarFilled,\n  DownloadOutlined,\n  AppstoreOutlined,\n  BarsOutlined,\n  SearchOutlined,\n} from '@ant-design/icons';\nimport { motion } from 'framer-motion';\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\n\nimport { useProjects } from '@/hooks/api-hooks';\nimport { literatureAPI, LiteratureListResponse } from '@/services/api/literature';\nimport { LiteratureUploadModal } from '@/components/literature/LiteratureUploadModal';\n\nconst { Title, Text, Paragraph } = Typography;\n\nconst getQualityColor = (score?: number) => {\n  if (typeof score !== 'number') return '#94a3b8';\n  if (score >= 90) return '#52c41a';\n  if (score >= 70) return '#1890ff';\n  if (score >= 50) return '#faad14';\n  return '#f5222d';\n};\n\nconst LiteratureCard: React.FC<{ literature: any }> = ({ literature }) => (\n  <motion.div layout initial={{ opacity: 0, scale: 0.9 }} animate={{ opacity: 1, scale: 1 }} whileHover={{ y: -5 }}>\n    <Card\n      hoverable\n      className=\"h-full shadow-md hover:shadow-xl transition-all duration-300\"\n      actions={[\n        <EyeOutlined key=\"view\" />,\n        literature.is_starred ? <StarFilled key=\"star\" className=\"text-yellow-400\" /> : <StarOutlined key=\"star\" />,\n        literature.pdf_url ? <DownloadOutlined key=\"download\" /> : null,\n      ].filter(Boolean)}\n    >\n      <div className=\"space-y-3\">\n        <div>\n          <Title level={5} className=\"mb-1 line-clamp-2\">{literature.title}</Title>\n          {literature.authors?.length ? (\n            <Text type=\"secondary\" className=\"text-xs\">\n              {literature.authors[0]} {literature.authors.length > 1 && `等${literature.authors.length}人`}\n            </Text>\n          ) : null}\n        </div>\n\n        <div className=\"flex flex-wrap gap-1\">\n          {(literature.keywords ?? []).slice(0, 3).map((keyword: string) => (\n            <Tag key={keyword} className=\"text-xs\">\n              {keyword}\n            </Tag>\n          ))}\n        </div>\n\n        <div className=\"flex items-center justify-between text-xs text-neutral-400\">\n          <span>{literature.journal || '未知期刊'}</span>\n          <span>{literature.publication_year ?? '—'}</span>\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <Tag color={getQualityColor(literature.quality_score)}>\n            {typeof literature.quality_score === 'number' ? literature.quality_score.toFixed(1) : '—'}\n          </Tag>\n          {literature.doi && (\n            <Text type=\"secondary\" className=\"text-xs\">\n              {literature.doi}\n            </Text>\n          )}\n        </div>\n\n        <Paragraph ellipsis={{ rows: 3 }} className=\"!text-neutral-300 text-sm\">\n          {literature.abstract || '暂无摘要'}\n        </Paragraph>\n      </div>\n    </Card>\n  </motion.div>\n);\n\nexport const LibraryPage: React.FC = () => {\n  const [viewMode, setViewMode] = useState<'card' | 'list'>('card');\n  const [searchText, setSearchText] = useState('');\n  const [selectedProjectId, setSelectedProjectId] = useState<number | null>(null);\n  const [uploadModalVisible, setUploadModalVisible] = useState(false);\n\n  const queryClient = useQueryClient();\n  const projectsQuery = useProjects();\n\n  const projectOptions = projectsQuery.data ?? [];\n  useEffect(() => {\n    if (!selectedProjectId && projectOptions.length > 0) {\n      setSelectedProjectId(projectOptions[0].id);\n    }\n  }, [projectOptions, selectedProjectId]);\n\n  const literatureQuery = useQuery<LiteratureListResponse>({\n    queryKey: ['literature', selectedProjectId, searchText],\n    queryFn: async () => {\n      if (!selectedProjectId) {\n        return { items: [], total: 0 };\n      }\n      return literatureAPI.getLiterature({\n        project_id: selectedProjectId,\n        query: searchText || undefined,\n        page: 1,\n        size: 200,\n      });\n    },\n    enabled: Boolean(selectedProjectId),\n    placeholderData: (previousData) => previousData ?? { items: [], total: 0 },\n  });\n\n  const tableColumns = useMemo(\n    () => [\n      {\n        title: '标题',\n        dataIndex: 'title',\n        width: 320,\n        render: (text: string, record: any) => (\n          <div>\n            <a className=\"font-medium hover:text-blue-500\">{text}</a>\n            <div className=\"mt-1\">\n              <Space size={4}>\n                {record.is_starred && <StarFilled className=\"text-yellow-400\" />}\n              </Space>\n            </div>\n          </div>\n        ),\n      },\n      {\n        title: '作者',\n        dataIndex: 'authors',\n        width: 220,\n        render: (authors: string[]) => (\n          <Tooltip title={authors?.join(', ')}>\n            <span>{authors?.[0] ?? '—'}{authors && authors.length > 1 ? ` 等${authors.length}人` : ''}</span>\n          </Tooltip>\n        ),\n      },\n      {\n        title: '期刊',\n        dataIndex: 'journal',\n        width: 160,\n      },\n      {\n        title: '年份',\n        dataIndex: 'publication_year',\n        width: 100,\n        sorter: (a: any, b: any) => (a.publication_year ?? 0) - (b.publication_year ?? 0),\n      },\n      {\n        title: '引用',\n        dataIndex: 'citation_count',\n        width: 100,\n        sorter: (a: any, b: any) => (a.citation_count ?? 0) - (b.citation_count ?? 0),\n        render: (citations?: number) => (\n          <Tag color={citations && citations > 1000 ? 'gold' : citations && citations > 100 ? 'blue' : 'default'}>\n            {citations ? (citations > 1000 ? `${(citations / 1000).toFixed(1)}k` : citations) : '—'}\n          </Tag>\n        ),\n      },\n      {\n        title: '质量',\n        dataIndex: 'quality_score',\n        width: 90,\n        render: (score?: number) => (\n          <Tag color={getQualityColor(score)}>{typeof score === 'number' ? score.toFixed(1) : '—'}</Tag>\n        ),\n      },\n      {\n        title: '操作',\n        key: 'actions',\n        width: 160,\n        render: (_: any, record: any) => (\n          <Space>\n            <Tooltip title=\"查看详情\">\n              <Button type=\"text\" icon={<EyeOutlined />} />\n            </Tooltip>\n            <Tooltip title={record.is_starred ? '取消收藏' : '收藏'}>\n              <Button type=\"text\" icon={record.is_starred ? <StarFilled className=\"text-yellow-400\" /> : <StarOutlined />} />\n            </Tooltip>\n            {record.pdf_url && (\n              <Tooltip title=\"下载原文\">\n                <Button type=\"text\" icon={<DownloadOutlined />} href={record.pdf_url} target=\"_blank\" rel=\"noreferrer\" />\n              </Tooltip>\n            )}\n          </Space>\n        ),\n      },\n    ],\n    []\n  );\n\n  const literatureItems = literatureQuery.data?.items ?? [];\n\n  const handleUploadSuccess = () => {\n    queryClient.invalidateQueries({ queryKey: ['literature', selectedProjectId] });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-neural-900 to-neural-800 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <Title level={2} className=\"!text-white !mb-2\">\n                文献库\n              </Title>\n              <Text className=\"text-neutral-400\">\n                管理项目文献，查看解析状态与质量评估\n              </Text>\n            </div>\n            <Space>\n              <Select\n                placeholder=\"选择项目\"\n                value={selectedProjectId ?? undefined}\n                loading={projectsQuery.isLoading}\n                style={{ width: 220 }}\n                onChange={(value) => setSelectedProjectId(value)}\n                options={projectOptions.map((project) => ({\n                  label: project.name ?? project.title ?? '未命名项目',\n                  value: project.id,\n                }))}\n              />\n              <Button\n                type=\"primary\"\n                icon={<UploadOutlined />}\n                disabled={!selectedProjectId}\n                onClick={() => setUploadModalVisible(true)}\n              >\n                导入文献\n              </Button>\n            </Space>\n          </div>\n        </motion.div>\n\n        <Card className=\"mb-6 bg-neutral-900/50 border-neutral-800\">\n          <div className=\"flex flex-wrap gap-4 items-center justify-between\">\n            <Input\n              prefix={<SearchOutlined />}\n              placeholder=\"搜索标题、作者或关键词\"\n              value={searchText}\n              onChange={(event) => setSearchText(event.target.value)}\n              style={{ maxWidth: 320 }}\n              allowClear\n            />\n            <Space>\n              <Button\n                icon={<AppstoreOutlined />}\n                type={viewMode === 'card' ? 'primary' : 'default'}\n                onClick={() => setViewMode('card')}\n              />\n              <Button\n                icon={<BarsOutlined />}\n                type={viewMode === 'list' ? 'primary' : 'default'}\n                onClick={() => setViewMode('list')}\n              />\n            </Space>\n          </div>\n        </Card>\n\n        <Spin spinning={literatureQuery.isLoading} tip=\"加载文献中...\">\n          {selectedProjectId ? (\n            literatureItems.length > 0 ? (\n              viewMode === 'card' ? (\n                <Row gutter={[24, 24]}>\n                  {literatureItems.map((item) => (\n                    <Col key={item.id} xs={24} sm={12} lg={8} xl={6}>\n                      <LiteratureCard literature={item} />\n                    </Col>\n                  ))}\n                </Row>\n              ) : (\n                <Card className=\"bg-neutral-900/40 border-neutral-800\">\n                  <Table\n                    rowKey=\"id\"\n                    columns={tableColumns}\n                    dataSource={literatureItems}\n                    pagination={false}\n                    scroll={{ x: 960 }}\n                  />\n                </Card>\n              )\n            ) : (\n              <Card className=\"bg-neutral-900/40 border-neutral-800\">\n                <Empty description=\"暂无文献\" image={Empty.PRESENTED_IMAGE_SIMPLE} />\n              </Card>\n            )\n          ) : (\n            <Card className=\"bg-neutral-900/40 border-neutral-800\">\n              <Empty description=\"请选择一个项目查看文献\" image={Empty.PRESENTED_IMAGE_SIMPLE} />\n            </Card>\n          )}\n        </Spin>\n      </div>\n\n      <LiteratureUploadModal\n        visible={uploadModalVisible}\n        onClose={() => setUploadModalVisible(false)}\n        projectId={selectedProjectId ?? 0}\n        onSuccess={handleUploadSuccess}\n      />\n    </div>\n  );\n};\n\nexport default LibraryPage;\n","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/pages/research/research-console.tsx","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":1,"message":"Import \"ResearchMode\" is only used as types.","line":6,"column":1,"nodeType":"ImportDeclaration","messageId":"aImportIsOnlyTypes","endLine":6,"endColumn":82,"fix":{"range":[277,312],"text":"import type { ResearchMode } from '@/components/research/mode-switcher';\nimport { ModeSwitcher"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { useMemo, useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { fetchProjects, type ProjectSummary } from '@/services/api/project';\nimport { MotionFade } from '@/animations/motion-fade';\nimport styles from './research-console.module.css';\nimport { ModeSwitcher, ResearchMode } from '@/components/research/mode-switcher';\nimport { ClarificationDeck } from '@/components/research/clarification-deck';\nimport { RagPanel } from '@/components/research/rag-panel';\nimport { DeepPanel } from '@/components/research/deep-panel';\nimport { AutoPanel } from '@/components/research/auto-panel';\n\nexport function ResearchConsole() {\n  const [mode, setMode] = useState<ResearchMode>('rag');\n  const [sessionId, setSessionId] = useState<string | null>(null);\n  const [selectedProjectId, setSelectedProjectId] = useState<number | null>(null);\n\n  const projectsQuery = useQuery({ queryKey: ['projects'], queryFn: () => fetchProjects() });\n\n  const projectOptions = useMemo<ProjectSummary[]>(() => projectsQuery.data ?? [], [projectsQuery.data]);\n\n  const modeComponent = useMemo(() => {\n    switch (mode) {\n      case 'rag':\n        return <RagPanel sessionId={sessionId} projectId={selectedProjectId} />;\n      case 'deep':\n        return <DeepPanel sessionId={sessionId} projectId={selectedProjectId} />;\n      case 'auto':\n        return <AutoPanel sessionId={sessionId} projectId={selectedProjectId} />;\n      default:\n        return null;\n    }\n  }, [mode, selectedProjectId, sessionId]);\n\n  return (\n    <MotionFade>\n      <div className={styles.layout}>\n        <ModeSwitcher mode={mode} onModeChange={setMode} />\n        <ClarificationDeck\n          projects={projectOptions}\n          mode={mode}\n          selectedProjectId={selectedProjectId}\n          onProjectChange={setSelectedProjectId}\n          onSessionReady={setSessionId}\n        />\n        {modeComponent}\n      </div>\n    </MotionFade>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/pages/settings/settings-page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/pages/tasks/tasks-page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/pages/workspace/ResearchWorkspace.tsx","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":1,"message":"Import \"Project\" is only used as types.","line":6,"column":1,"nodeType":"ImportDeclaration","messageId":"aImportIsOnlyTypes","endLine":6,"endColumn":83,"fix":{"range":[355,388],"text":"import type { Project } from '@/components/workspace/ProjectSelector';\nimport { ProjectSelector"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'researchSession' is assigned a value but never used.","line":32,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'unsubscribe' is assigned a value but never used.","line":42,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'send' is assigned a value but never used.","line":42,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1745,1748],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1745,1748],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .task_id on an `any` value.","line":49,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":49,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .progress on an `any` value.","line":49,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":49,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":53,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":53,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .progress on an `any` value.","line":53,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":53,"endColumn":67},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2133,2136],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2133,2136],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<ResearchResult | null>`.","line":62,"column":24,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":62,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .task_id on an `any` value.","line":66,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":66,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .task_id on an `any` value.","line":73,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":73,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<ResearchResult | null>`.","line":80,"column":36,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":80,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .task_id on an `any` value.","line":104,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":104,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .task_id on an `any` value.","line":106,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":106,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":112,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":112,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":112,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":112,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .result_id on an `any` value.","line":112,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":112,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3982,3985],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3982,3985],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":128,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4156,4159],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4156,4159],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .experience_count on an `any` value.","line":132,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":132,"endColumn":50},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":148,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":148,"endColumn":21,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4582,4582],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":153,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4742,4745],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4742,4745],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":154,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4764,4767],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4764,4767],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":157,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":157,"endColumn":33,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4812,4812],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":163,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4922,4925],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4922,4925],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .context_literature_ids on an `any` value.","line":171,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":171,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":176,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":176,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .processing_method on an `any` value.","line":176,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":176,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .processingMethod on an `any` value.","line":176,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":176,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .deep_config on an `any` value.","line":177,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":177,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":178,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":178,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .maxIterations on an `any` value.","line":178,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":178,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":179,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":179,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .batchSize on an `any` value.","line":179,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":179,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":180,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":180,"endColumn":82},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .enableStructuredTemplate on an `any` value.","line":180,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":180,"endColumn":82},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":181,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":181,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .templateType on an `any` value.","line":181,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":181,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":182,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":182,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .convergenceThreshold on an `any` value.","line":182,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":182,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":183,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":183,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .enableQualityFilter on an `any` value.","line":183,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":183,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":189,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":189,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .agent on an `any` value.","line":189,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":189,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .agent on an `any` value.","line":189,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":189,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .auto_config on an `any` value.","line":190,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":190,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":191,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":191,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .collectFirst on an `any` value.","line":191,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":191,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":192,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":192,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .enableAiFiltering on an `any` value.","line":192,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":192,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":193,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":193,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .enablePdfProcessing on an `any` value.","line":193,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":193,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":194,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":194,"endColumn":86},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .enableStructuredExtraction on an `any` value.","line":194,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":194,"endColumn":86},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":195,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":195,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .batchSize on an `any` value.","line":195,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":195,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":196,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":196,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .maxConcurrentDownloads on an `any` value.","line":196,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":196,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":197,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":197,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .collectionMaxCount on an `any` value.","line":197,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":197,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":198,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":198,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .sources on an `any` value.","line":198,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":198,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":199,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":199,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .processingMethod on an `any` value.","line":199,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":199,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":203,"column":25,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":203,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .query on an `any` value.","line":203,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":203,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ResearchMode`.","line":203,"column":46,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":203,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .mode on an `any` value.","line":203,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":203,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `number`.","line":203,"column":66,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":203,"endColumn":90},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .project_id on an `any` value.","line":203,"column":80,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":203,"endColumn":90},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":204,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":204,"endColumn":34,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[6632,6632],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":205,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6680,6683],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6680,6683],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":206,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":206,"endColumn":46,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[6693,6693],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `JointContent`.","line":206,"column":21,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":206,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":206,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":206,"endColumn":34},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":212,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":212,"endColumn":49,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[6904,6904],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":229,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":229,"endColumn":41,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[7320,7320],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":321,"column":27,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":321,"endColumn":54,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[10876,10876],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":325,"column":27,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":325,"endColumn":54,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[11040,11040],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":329,"column":27,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":329,"endColumn":55,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[11223,11223],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ConnectionStatus' is assigned a value but never used.","line":394,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":394,"endColumn":33}],"suppressedMessages":[],"errorCount":82,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import React, { useState, useCallback, useEffect } from 'react';\nimport { Layout, Row, Col, Card, Space, Spin, message, notification, Button } from 'antd';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport { SmartQueryInput } from '@/components/workspace/SmartQueryInput';\nimport { ModeSelector } from '@/components/workspace/ModeSelector';\nimport { ProjectSelector, Project } from '@/components/workspace/ProjectSelector';\nimport { ProgressPanel } from '@/components/workspace/ProgressPanel';\nimport { InteractionCards } from '@/components/interaction/InteractionCards';\nimport { ResearchResultPanel } from '@/components/research/ResearchResultPanel';\nimport { useResearchStore } from '@/stores/research.store';\nimport { useAppStore } from '@/stores/app.store';\nimport { useWebSocket } from '@/hooks/useWebSocket';\nimport { wsManager } from '@/services/websocket/WebSocketManager';\nimport type { ResearchMode, ResearchResult } from '@/types';\n\nconst { Content } = Layout;\n\nexport const ResearchWorkspace: React.FC = () => {\n  const [mode, setMode] = useState<ResearchMode>('auto');\n  const [currentResult, setCurrentResult] = useState<ResearchResult | null>(null);\n  const [showResult, setShowResult] = useState(false);\n\n  // 使用App Store管理项目和会话上下文\n  const {\n    currentProject,\n    currentSession,\n    setCurrentProject,\n    initialize: initializeApp\n  } = useAppStore();\n\n  const {\n    currentSession: researchSession,\n    currentCard,\n    activeTasks,\n    results,\n    isLoading,\n    error,\n    submitQuery,\n    reset,\n  } = useResearchStore();\n\n  const { subscribe, unsubscribe, send, isConnected } = useWebSocket();\n\n  // WebSocket事件订阅\n  useEffect(() => {\n    // 订阅任务进度\n    const unsubTask = subscribe('task_progress', (data: any) => {\n      console.log('Task progress update:', data);\n      if (data.task_id && data.progress) {\n        // 更新进度状态\n        notification.info({\n          message: '任务进度更新',\n          description: `${data.message || '处理中'} - ${data.progress}%`,\n          placement: 'bottomRight',\n        });\n      }\n    });\n\n    // 订阅研究结果\n    const unsubResult = subscribe('research_result', (data: any) => {\n      console.log('Research result received:', data);\n      setCurrentResult(data);\n      setShowResult(true);\n\n      // 创建带有跳转到结果功能的通知\n      const notificationKey = `result-${data.task_id || Date.now()}`;\n      notification.success({\n        key: notificationKey,\n        message: '研究完成',\n        description: (\n          <div>\n            <p>研究结果已生成，请查看结果面板</p>\n            {data.task_id && (\n              <Button\n                type=\"link\"\n                size=\"small\"\n                onClick={() => {\n                  // 跳转到结果面板并高亮显示\n                  setShowResult(true);\n                  setCurrentResult(data);\n\n                  // 滚动到结果面板\n                  setTimeout(() => {\n                    const resultPanel = document.querySelector('.research-result-panel');\n                    if (resultPanel) {\n                      resultPanel.scrollIntoView({ behavior: 'smooth' });\n                    }\n                  }, 100);\n\n                  // 关闭通知\n                  notification.destroy(notificationKey);\n                }}\n              >\n                跳转到结果 →\n              </Button>\n            )}\n          </div>\n        ),\n        placement: 'topRight',\n        duration: 8, // 延长显示时间，给用户更多时间点击\n      });\n\n      // 如果有关联的任务ID，更新任务状态\n      if (data.task_id) {\n        // TODO: 调用API更新任务状态，标记为已完成并关联结果\n        fetch(`/api/tasks/${data.task_id}/result`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            result_id: data.id || data.result_id,\n            status: 'completed_with_result'\n          }),\n        }).catch(error => {\n          console.error('Failed to update task result link:', error);\n        });\n      }\n    });\n\n    // 订阅交互更新\n    const unsubInteraction = subscribe('interaction_update', (data: any) => {\n      console.log('Interaction update:', data);\n      // 交互更新逻辑由store处理\n    });\n\n    // 订阅经验生成\n    const unsubExperience = subscribe('experience_generated', (data: any) => {\n      console.log('Experience generated:', data);\n      notification.success({\n        message: '经验生成完成',\n        description: `已生成 ${data.experience_count || 0} 条研究经验`,\n        placement: 'topRight',\n      });\n    });\n\n    return () => {\n      unsubTask();\n      unsubResult();\n      unsubInteraction();\n      unsubExperience();\n      reset();\n    };\n  }, [subscribe, reset]);\n\n  // 初始化应用状态\n  useEffect(() => {\n    initializeApp();\n  }, [initializeApp]);\n\n  const handleQuerySubmit = useCallback(async (query: string, options?: {\n    attachments?: number[];\n    deepConfig?: any;\n    autoConfig?: any;\n  }) => {\n    if (!currentProject) {\n      message.error('请先选择一个项目');\n      return;\n    }\n\n    try {\n      // 构建请求参数，包含模式特定配置\n      const requestParams: any = {\n        query,\n        mode,\n        project_id: currentProject.id\n      };\n\n      // 添加文献上下文\n      if (options?.attachments?.length) {\n        requestParams.context_literature_ids = options.attachments;\n      }\n\n      // 添加深度模式配置\n      if (mode === 'deep' && options?.deepConfig) {\n        requestParams.processing_method = options.deepConfig.processingMethod;\n        requestParams.deep_config = {\n          max_iterations: options.deepConfig.maxIterations,\n          batch_size: options.deepConfig.batchSize,\n          enable_structured_template: options.deepConfig.enableStructuredTemplate,\n          template_type: options.deepConfig.templateType,\n          convergence_threshold: options.deepConfig.convergenceThreshold,\n          enable_quality_filter: options.deepConfig.enableQualityFilter\n        };\n      }\n\n      // 添加自动模式配置\n      if (mode === 'auto' && options?.autoConfig) {\n        requestParams.agent = options.autoConfig.agent;\n        requestParams.auto_config = {\n          collect_first: options.autoConfig.collectFirst,\n          enable_ai_filtering: options.autoConfig.enableAiFiltering,\n          enable_pdf_processing: options.autoConfig.enablePdfProcessing,\n          enable_structured_extraction: options.autoConfig.enableStructuredExtraction,\n          batch_size: options.autoConfig.batchSize,\n          max_concurrent_downloads: options.autoConfig.maxConcurrentDownloads,\n          collection_max_count: options.autoConfig.collectionMaxCount,\n          sources: options.autoConfig.sources,\n          processing_method: options.autoConfig.processingMethod\n        };\n      }\n\n      await submitQuery(requestParams.query, requestParams.mode, requestParams.project_id);\n      message.success('研究查询已提交');\n    } catch (error: any) {\n      message.error(error.message || '提交失败');\n    }\n  }, [mode, currentProject, submitQuery]);\n\n  const handleProjectChange = useCallback((projectId: number, project: Project) => {\n    setCurrentProject(project);\n    message.success(`已切换到项目: ${project.title}`);\n\n    // 清理当前研究状态\n    reset();\n    setCurrentResult(null);\n    setShowResult(false);\n  }, [setCurrentProject, reset]);\n\n  const handleModeChange = useCallback((newMode: ResearchMode) => {\n    setMode(newMode);\n\n    // 根据模式显示不同的提示\n    const modeMessages = {\n      'rag': 'RAG模式：从现有知识库中检索相关内容',\n      'deep': '深度研究模式：生成专属研究经验',\n      'auto': '全自动模式：AI智能调度完整研究流程'\n    };\n    message.info(modeMessages[newMode]);\n  }, []);\n\n  return (\n    <Layout className=\"min-h-screen bg-gray-50\">\n      <Content className=\"p-6\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5 }}\n        >\n          <Row gutter={[24, 24]}>\n            {/* 左侧主要工作区 */}\n            <Col xs={24} xl={16}>\n              <Space direction=\"vertical\" className=\"w-full\" size=\"large\">\n                {/* 标题和控制器 */}\n                <Card className=\"shadow-sm border-0\">\n                  <div className=\"flex justify-between items-center flex-wrap gap-4\">\n                    <div>\n                      <h2 className=\"text-2xl font-bold m-0\">研究工作台</h2>\n                      {currentProject && (\n                        <p className=\"text-gray-500 m-0 mt-1\">\n                          当前项目: {currentProject.title}\n                        </p>\n                      )}\n                    </div>\n                    <Space wrap>\n                      <ProjectSelector\n                        value={currentProject?.id}\n                        onChange={handleProjectChange}\n                      />\n                      <ModeSelector value={mode} onChange={handleModeChange} />\n                    </Space>\n                  </div>\n                </Card>\n\n                {/* 智能输入框 */}\n                <Card className=\"shadow-lg border-0\">\n                  <SmartQueryInput\n                    onSubmit={handleQuerySubmit}\n                    mode={mode}\n                    disabled={isLoading}\n                    placeholder={\n                      mode === 'rag'\n                        ? '输入您想从知识库中查询的问题...'\n                        : mode === 'deep'\n                        ? '输入需要深度研究的科研问题...'\n                        : '输入您的研究问题，AI将自动编排研究流程...'\n                    }\n                  />\n                </Card>\n\n                {/* 智能交互卡片 */}\n                <AnimatePresence mode=\"wait\">\n                  {currentCard && currentSession && (\n                    <motion.div\n                      key=\"interaction\"\n                      initial={{ opacity: 0, scale: 0.95 }}\n                      animate={{ opacity: 1, scale: 1 }}\n                      exit={{ opacity: 0, scale: 0.95 }}\n                      transition={{ duration: 0.3 }}\n                    >\n                      <InteractionCards\n                        sessionId={currentSession.session_id ?? currentSession.id}\n                        card={currentCard}\n                      />\n                    </motion.div>\n                  )}\n                </AnimatePresence>\n\n                {/* 结果展示区 */}\n                <AnimatePresence mode=\"wait\">\n                  {(() => {\n                    const displayResult = currentResult || results[0];\n                    if (!showResult && !displayResult) {\n                      return null;\n                    }\n                    if (!displayResult) {\n                      return null;\n                    }\n                    return (\n                    <motion.div\n                      key=\"results\"\n                      initial={{ opacity: 0, y: 20 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      exit={{ opacity: 0, y: -20 }}\n                      transition={{ duration: 0.3 }}\n                    >\n                      <ResearchResultPanel\n                        result={displayResult}\n                        onExport={() => {\n                          // TODO: 实现导出功能\n                          message.info('导出功能开发中...');\n                        }}\n                        onShare={() => {\n                          // TODO: 实现分享功能\n                          message.info('分享功能开发中...');\n                        }}\n                        onRegenerateExperience={() => {\n                          // TODO: 实现重新生成经验功能\n                          message.info('正在重新生成经验...');\n                        }}\n                      />\n                    </motion.div>\n                    );\n                  })()}\n                </AnimatePresence>\n\n                {/* 错误提示 */}\n                {error && (\n                  <Card className=\"shadow-sm border-red-200 bg-red-50\">\n                    <div className=\"text-red-600\">{error}</div>\n                  </Card>\n                )}\n              </Space>\n            </Col>\n\n            {/* 右侧辅助区 */}\n            <Col xs={24} xl={8}>\n              <Space direction=\"vertical\" className=\"w-full\" size=\"large\">\n                {/* 任务进度面板 */}\n                {activeTasks.map((task) => (\n                  <Card\n                    key={task.id}\n                    title={`任务进度：${task.type}`}\n                    className=\"shadow-lg border-0\"\n                  >\n                    <ProgressPanel task={task} />\n                  </Card>\n                ))}\n\n                {/* 加载状态 */}\n                {isLoading && activeTasks.length === 0 && (\n                  <Card className=\"shadow-sm border-0\">\n                    <div className=\"text-center py-8\">\n                      <Spin size=\"large\" />\n                      <div className=\"mt-4 text-gray-600\">AI正在处理您的请求...</div>\n                    </div>\n                  </Card>\n                )}\n\n                {/* WebSocket连接状态 */}\n                <Card className=\"shadow-sm border-0\" size=\"small\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-gray-600\">实时连接</span>\n                    <div className=\"flex items-center gap-2\">\n                      <div className={`w-2 h-2 rounded-full ${\n                        isConnected ? 'bg-green-500' : 'bg-red-500'\n                      } animate-pulse`} />\n                      <span className=\"text-sm\">\n                        {isConnected ? '已连接' : '未连接'}\n                      </span>\n                    </div>\n                  </div>\n                </Card>\n              </Space>\n            </Col>\n          </Row>\n        </motion.div>\n      </Content>\n    </Layout>\n  );\n};\n\n// WebSocket连接状态组件\nconst ConnectionStatus: React.FC = () => {\n  const [status, setStatus] = useState(wsManager.getConnectionStatus());\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setStatus(wsManager.getConnectionStatus());\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"flex items-center justify-between\">\n      <span className=\"text-sm text-gray-600\">实时连接</span>\n      <div className=\"flex items-center gap-2\">\n        <div className={`w-2 h-2 rounded-full ${\n          status.connected ? 'bg-green-500' : 'bg-red-500'\n        } animate-pulse`} />\n        <span className=\"text-sm\">\n          {status.connected ? '已连接' : `重试中(${status.reconnectAttempts})`}\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default ResearchWorkspace;\n","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/router/routes.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/services/api/auth.ts","messages":[{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":167,"column":22,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":167,"endColumn":35},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":168,"column":23,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":168,"endColumn":37}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { apiClient } from './client';\nimport { useAuthStore } from '@/stores/auth-store';\n\nexport interface UserInfo {\n  id: number;\n  email: string;\n  username: string;\n  full_name?: string;\n  institution?: string;\n  research_field?: string;\n  is_active: boolean;\n  is_verified: boolean;\n  created_at: string;\n  updated_at?: string;\n  last_login?: string;\n  membership: {\n    id: number;\n    user_id: number;\n    membership_type: 'FREE' | 'PREMIUM' | 'ENTERPRISE';\n    monthly_literature_used: number;\n    monthly_queries_used: number;\n    total_projects: number;\n    subscription_start?: string;\n    subscription_end?: string;\n    auto_renewal: boolean;\n    created_at: string;\n    updated_at?: string;\n  };\n}\n\nexport interface LoginResponse {\n  access_token: string;\n  token_type: string;\n  expires_in: number;\n  user_info: UserInfo;\n}\n\nexport interface RegisterPayload {\n  email: string;\n  password: string;\n  username: string;\n  full_name?: string;\n  institution?: string;\n  research_field?: string;\n}\n\nexport interface LoginPayload {\n  email: string;\n  password: string;\n}\n\nexport interface UpdateProfilePayload {\n  full_name?: string;\n  institution?: string;\n  research_field?: string;\n}\n\nexport interface ChangePasswordPayload {\n  current_password: string;\n  new_password: string;\n}\n\nexport const authAPI = {\n  // 用户注册\n  async register(payload: RegisterPayload): Promise<LoginResponse> {\n    const { data } = await apiClient.post<LoginResponse>('/api/auth/register', payload);\n\n    // 注册成功后自动设置认证信息\n    useAuthStore.getState().setCredentials(data.access_token, data.user_info.id);\n\n    return data;\n  },\n\n  // 用户登录\n  async login(payload: LoginPayload): Promise<LoginResponse> {\n    const { data } = await apiClient.post<LoginResponse>('/api/auth/login', payload);\n\n    // 保存认证信息到状态管理\n    useAuthStore.getState().setCredentials(data.access_token, data.user_info.id);\n\n    return data;\n  },\n\n  // 用户登出\n  async logout(): Promise<{ message: string }> {\n    try {\n      const { data } = await apiClient.post<{ message: string }>('/api/auth/logout');\n      return data;\n    } catch (error) {\n      console.error('Logout error:', error);\n      throw error;\n    } finally {\n      // 清除本地认证信息\n      useAuthStore.getState().clear();\n    }\n  },\n\n  // 获取当前用户信息\n  async getCurrentUser(): Promise<UserInfo> {\n    const { data } = await apiClient.get<UserInfo>('/api/auth/me');\n    return data;\n  },\n\n  // 更新用户资料\n  async updateProfile(payload: UpdateProfilePayload): Promise<UserInfo> {\n    const body: Record<string, unknown> = {};\n    if (payload.full_name !== undefined) {\n      body.full_name = payload.full_name;\n    }\n    if (payload.institution !== undefined) {\n      body.institution = payload.institution;\n    }\n    if (payload.research_field !== undefined) {\n      body.research_field = payload.research_field;\n    }\n    const { data } = await apiClient.put<UserInfo>('/api/user/profile', body);\n    return data;\n  },\n\n  // 修改密码\n  async changePassword(payload: ChangePasswordPayload): Promise<{ message: string }> {\n    const body = {\n      current_password: payload.current_password,\n      new_password: payload.new_password,\n    };\n    const { data } = await apiClient.put<{ message: string }>('/api/user/password', body);\n    return data;\n  },\n\n  // 邮箱验证\n  async requestEmailVerification(): Promise<{ message: string }> {\n    const { data } = await apiClient.post<{ message: string }>('/api/auth/request-verification');\n    return data;\n  },\n\n  async verifyEmail(token: string): Promise<{ message: string }> {\n    const { data } = await apiClient.post<{ message: string }>('/api/auth/verify-email', { token });\n    return data;\n  },\n\n  // 密码重置\n  async requestPasswordReset(email: string): Promise<{ message: string }> {\n    const { data } = await apiClient.post<{ message: string }>('/api/auth/forgot-password', { email });\n    return data;\n  },\n\n  async resetPassword(token: string, newPassword: string): Promise<{ message: string }> {\n    const { data } = await apiClient.post<{ message: string }>('/api/auth/reset-password', {\n      token,\n      new_password: newPassword,\n    });\n    return data;\n  },\n\n  // 检查认证状态\n  async checkAuth(): Promise<{ isAuthenticated: boolean; user: UserInfo | null }> {\n    try {\n      const user = await authAPI.getCurrentUser();\n      return { isAuthenticated: true, user };\n    } catch (error) {\n      return { isAuthenticated: false, user: null };\n    }\n  }\n};\n\n// 保持向后兼容\nexport const login = authAPI.login;\nexport const logout = authAPI.logout;\n\nexport default authAPI;\n","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/services/api/client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/services/api/dashboard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/services/api/interaction.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/services/api/literature.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/services/api/project.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/services/api/research.ts","messages":[{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":275,"column":32,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":275,"endColumn":59}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { apiClient } from './client';\n\nexport interface ResearchRequestPayload {\n  project_id: number;\n  query: string;\n  mode: 'rag' | 'deep' | 'auto';\n  max_literature_count?: number;\n  context_literature_ids?: number[];\n  processing_method?: string;\n  keywords?: string[];\n  auto_config?: Record<string, unknown>;\n  agent?: 'claude' | 'codex' | 'gemini';\n}\n\nexport interface ResearchResult {\n  id: string;\n  project_id: number;\n  query: string;\n  mode: 'rag' | 'deep' | 'auto';\n  status: 'pending' | 'processing' | 'completed' | 'error';\n  progress?: number;\n  created_at: string;\n  completed_at?: string;\n  error_message?: string;\n  main_answer?: string;\n  literature_sources?: Array<{\n    id: string;\n    title: string;\n    authors: string[];\n    year: number;\n    relevance_score: number;\n    key_findings: string;\n    doi?: string;\n  }>;\n  experience_books?: Array<{\n    id: string;\n    title: string;\n    summary: string;\n    confidence_score: number;\n    iterations: number;\n    key_insights: string[];\n  }>;\n  experiment_suggestions?: Array<{\n    id: string;\n    name: string;\n    objective: string;\n    methodology: string;\n    expected_outcome: string;\n    difficulty: 'easy' | 'medium' | 'hard';\n    resources_needed: string[];\n  }>;\n  confidence_metrics?: {\n    overall_confidence: number;\n    literature_coverage: number;\n    consistency_score: number;\n    novelty_score: number;\n  };\n  metadata?: Record<string, unknown>;\n}\n\nexport interface ResearchHistory {\n  items: ResearchResult[];\n  total: number;\n  page: number;\n  size: number;\n}\n\nexport interface ResearchTemplate {\n  id: string;\n  name: string;\n  description: string;\n  mode: 'rag' | 'deep' | 'auto';\n  default_query?: string;\n  default_keywords?: string[];\n  config?: Record<string, unknown>;\n  created_at: string;\n  is_public?: boolean;\n}\n\nexport interface ResearchExport {\n  format: 'pdf' | 'docx' | 'markdown' | 'json';\n  include_sources?: boolean;\n  include_experience?: boolean;\n  include_experiments?: boolean;\n  include_metadata?: boolean;\n}\n\ninterface ResearchTriggerResponse {\n  mode: string;\n  payload: Record<string, unknown>;\n}\n\nexport const researchAPI = {\n  // 触发研究任务\n  async triggerResearch(payload: ResearchRequestPayload) {\n    const { data } = await apiClient.post<ResearchTriggerResponse>('/api/research/query', payload);\n    return data;\n  },\n\n  // 获取研究结果\n  async getResearchResult(taskId: string) {\n    const { data } = await apiClient.get<ResearchResult>(`/api/research/result/${taskId}`);\n    return data;\n  },\n\n  // 获取研究历史\n  async getResearchHistory(params?: {\n    project_id?: number;\n    mode?: 'rag' | 'deep' | 'auto';\n    status?: string;\n    page?: number;\n    size?: number;\n    sort_by?: 'created_at' | 'relevance' | 'confidence';\n  }) {\n    const { data } = await apiClient.get<ResearchHistory>('/api/research/history', { params });\n    return data;\n  },\n\n  // 停止研究任务\n  async stopResearch(taskId: string) {\n    const { data } = await apiClient.post<{\n      success: boolean;\n      message: string;\n    }>(`/api/research/stop/${taskId}`);\n    return data;\n  },\n\n  // 重新运行研究\n  async retryResearch(taskId: string, modifications?: Partial<ResearchRequestPayload>) {\n    const { data } = await apiClient.post<{\n      success: boolean;\n      new_task_id: string;\n      message: string;\n    }>(`/api/research/retry/${taskId}`, modifications ?? {});\n    return data;\n  },\n\n  // 保存研究模板\n  async saveTemplate(template: Omit<ResearchTemplate, 'id' | 'created_at'>) {\n    const { data } = await apiClient.post<{\n      success: boolean;\n      data: ResearchTemplate;\n    }>('/api/research/templates', template);\n    return data;\n  },\n\n  // 获取研究模板列表\n  async getTemplates(params?: { is_public?: boolean; page?: number; size?: number }) {\n    const { data } = await apiClient.get<{\n      items: ResearchTemplate[];\n      total: number;\n    }>('/api/research/templates', { params });\n    return data;\n  },\n\n  // 应用研究模板\n  async applyTemplate(templateId: string, projectId: number, query?: string) {\n    const { data } = await apiClient.post<{\n      success: boolean;\n      task_id: string;\n    }>(`/api/research/templates/${templateId}/apply`, {\n      project_id: projectId,\n      query,\n    });\n    return data;\n  },\n\n  // 导出研究结果\n  async exportResult(taskId: string, options: ResearchExport) {\n    const { data: blobData } = await apiClient.post<Blob>(`/api/research/export/${taskId}`, options, {\n      responseType: 'blob'\n    });\n\n    // 创建下载链接\n    const exportBlob = blobData instanceof Blob ? blobData : new Blob([blobData]);\n    const url = window.URL.createObjectURL(exportBlob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.setAttribute('download', `research_${taskId}.${options.format}`);\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n    window.URL.revokeObjectURL(url);\n  },\n\n  // 获取研究任务状态\n  async getTaskStatus(taskId: string) {\n    const { data } = await apiClient.get<{\n      status: 'pending' | 'processing' | 'completed' | 'error';\n      progress: number;\n      message?: string;\n      estimated_time?: number;\n    }>(`/api/research/status/${taskId}`);\n    return data;\n  },\n\n  // 批量研究\n  async batchResearch(requests: ResearchRequestPayload[]) {\n    const { data } = await apiClient.post<{\n      success: boolean;\n      task_ids: string[];\n      message: string;\n    }>('/api/research/batch', { requests });\n    return data;\n  },\n\n  async analyzeQuery(payload: { query: string; project_id: number; context?: Record<string, unknown> }) {\n    const { data } = await apiClient.post<{\n      recommended_mode: string;\n      sub_questions: string[];\n      complexity_score: number;\n      estimated_resources: Record<string, unknown>;\n      reasoning: string;\n      suggested_keywords: string[];\n      processing_suggestions: Record<string, unknown>;\n    }>('/api/research/analysis', payload);\n    return data;\n  },\n\n  // 获取研究建议\n  async getSuggestions(projectId: number, context?: string) {\n    const { data } = await apiClient.post<{\n      suggestions: Array<{\n        query: string;\n        mode: 'rag' | 'deep' | 'auto';\n        rationale: string;\n        estimated_time: string;\n      }>;\n    }>('/api/research/suggestions', {\n      project_id: projectId,\n      context,\n    });\n    return data;\n  },\n\n  // 评价研究结果\n  async rateResult(taskId: string, rating: number, feedback?: string) {\n    const { data } = await apiClient.post<{\n      success: boolean;\n      message: string;\n    }>(`/api/research/rate/${taskId}`, {\n      rating,\n      feedback,\n    });\n    return data;\n  },\n\n  // 分享研究结果\n  async shareResult(taskId: string, emails: string[], message?: string) {\n    const { data } = await apiClient.post<{\n      success: boolean;\n      share_url: string;\n      expires_at: string;\n    }>(`/api/research/share/${taskId}`, {\n      emails,\n      message,\n    });\n    return data;\n  },\n\n  // 克隆研究任务\n  async cloneResearch(taskId: string, targetProjectId?: number) {\n    const { data } = await apiClient.post<{\n      success: boolean;\n      new_task_id: string;\n      message: string;\n    }>(`/api/research/clone/${taskId}`, {\n      target_project_id: targetProjectId,\n    });\n    return data;\n  }\n};\n\n// 保持向后兼容\nexport const triggerResearch = researchAPI.triggerResearch;\n\nexport default researchAPI;\n","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/services/api/task-stats.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/services/api/tasks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/services/api/usage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/services/api/user.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/services/websocket/WebSocketManager.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":81,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":81,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of an `any` typed value.","line":82,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":82,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .state on an `any` value.","line":82,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":82,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":147,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":147,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | null | undefined`.","line":149,"column":42,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":149,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":199,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":199,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":199,"column":36,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":199,"endColumn":46}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"type QueuedMessage = {\n  type: string;\n  payload?: Record<string, unknown>;\n};\n\ntype ConnectionStatus = {\n  connected: boolean;\n  reconnectAttempts: number;\n};\n\nconst isRecord = (value: unknown): value is Record<string, unknown> =>\n  typeof value === 'object' && value !== null && !Array.isArray(value);\n\nconst RECONNECT_DELAY = 2000;\nconst MAX_RECONNECT_ATTEMPTS = 5;\n\nconst convertHttpToWs = (url: string) => {\n  if (url.startsWith('http://')) {\n    return url.replace('http://', 'ws://');\n  }\n  if (url.startsWith('https://')) {\n    return url.replace('https://', 'wss://');\n  }\n  return url;\n};\n\nconst resolveDefaultGlobalUrl = () => {\n  if (typeof window === 'undefined') {\n    const apiBase = import.meta.env.VITE_API_BASE_URL as string | undefined;\n    if (apiBase) {\n      return convertHttpToWs(`${apiBase.replace(/\\/$/, '')}/ws/global`);\n    }\n    return 'ws://154.12.50.153:8000/ws/global';\n  }\n\n  const configuredBase = import.meta.env.VITE_API_BASE_URL as string | undefined;\n  if (configuredBase) {\n    return convertHttpToWs(`${configuredBase.replace(/\\/$/, '')}/ws/global`);\n  }\n\n  const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';\n  const host = window.location.host;\n  return `${protocol}://${host}/ws/global`;\n};\n\nconst normalizeWebSocketUrl = (url: string) => {\n  if (!url) return resolveDefaultGlobalUrl();\n  if (url.startsWith('ws://') || url.startsWith('wss://')) {\n    return url;\n  }\n  if (url.startsWith('/')) {\n    const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';\n    const host = window.location.host;\n    return `${protocol}://${host}${url}`;\n  }\n  return convertHttpToWs(url);\n};\n\nconst withToken = (url: string, token?: string | null) => {\n  if (!token) return url;\n  try {\n    const target = new URL(url, window.location.origin);\n    target.searchParams.set('token', token);\n    return target.toString();\n  } catch (error) {\n    console.warn('无法为 WebSocket URL 附加 token，使用原始地址', error);\n    return url;\n  }\n};\n\nconst resolveAuthToken = (explicitToken?: string | null) => {\n  if (explicitToken) return explicitToken;\n  if (typeof window === 'undefined') return null;\n\n  const direct = localStorage.getItem('access_token') || localStorage.getItem('token');\n  if (direct) return direct;\n\n  try {\n    const persisted = localStorage.getItem('vibereserch-auth');\n    if (persisted) {\n      const parsed = JSON.parse(persisted);\n      return parsed?.state?.accessToken ?? null;\n    }\n  } catch (error) {\n    console.warn('无法解析持久化的认证信息', error);\n  }\n\n  return null;\n};\n\ntype EventHandler = (...args: unknown[]) => void;\n\nclass SimpleEmitter {\n  private listeners = new Map<string, Set<EventHandler>>();\n\n  on(event: string, handler: EventHandler) {\n    const handlers = this.listeners.get(event) ?? new Set<EventHandler>();\n    handlers.add(handler);\n    this.listeners.set(event, handlers);\n  }\n\n  off(event: string, handler: EventHandler) {\n    const handlers = this.listeners.get(event);\n    if (!handlers) return;\n    handlers.delete(handler);\n    if (handlers.size === 0) {\n      this.listeners.delete(event);\n    }\n  }\n\n  emit(event: string, ...args: unknown[]) {\n    const handlers = this.listeners.get(event);\n    if (!handlers) return;\n    handlers.forEach((handler) => {\n      try {\n        handler(...args);\n      } catch (error) {\n        console.error(`WebSocketManager listener error for event \"${event}\"`, error);\n      }\n    });\n  }\n}\n\nclass WebSocketManager extends SimpleEmitter {\n  private socket: WebSocket | null = null;\n  private reconnectAttempts = 0;\n  private readonly maxReconnectAttempts = MAX_RECONNECT_ATTEMPTS;\n  private readonly reconnectDelay = RECONNECT_DELAY;\n  private connected = false;\n  private messageQueue: QueuedMessage[] = [];\n  private globalUrl: string;\n\n  constructor() {\n    super();\n    const envUrl = import.meta.env.VITE_WS_URL as string | undefined;\n    this.globalUrl = envUrl || resolveDefaultGlobalUrl();\n\n    if (typeof window !== 'undefined') {\n      // 尝试在前端启动后自动连接（延时避免与认证流程冲突）\n      setTimeout(() => {\n        this.connect();\n      }, 1000);\n    }\n  }\n\n  connect(url?: string, token?: string) {\n    const authToken = resolveAuthToken(token);\n    const baseUrl = normalizeWebSocketUrl(url || this.globalUrl);\n    const targetUrl = withToken(baseUrl, authToken);\n\n    if (this.socket && (this.socket.readyState === WebSocket.OPEN || this.socket.readyState === WebSocket.CONNECTING)) {\n      return;\n    }\n\n    try {\n      this.socket = new WebSocket(targetUrl);\n      this.setupEventHandlers();\n    } catch (error) {\n      console.error('创建 WebSocket 连接失败', error);\n    }\n  }\n\n  private scheduleReconnect() {\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n      console.error('WebSocket 重连次数已达上限');\n      this.emit('max_reconnect_exceeded');\n      return;\n    }\n\n    this.reconnectAttempts += 1;\n    setTimeout(() => {\n      this.connect();\n    }, this.reconnectDelay * this.reconnectAttempts);\n  }\n\n  private setupEventHandlers() {\n    if (!this.socket) return;\n\n    this.socket.onopen = () => {\n      this.connected = true;\n      this.reconnectAttempts = 0;\n      this.emit('connected');\n      this.flushQueue();\n    };\n\n    this.socket.onclose = (event) => {\n      this.connected = false;\n      this.emit('disconnected', event.reason);\n      this.scheduleReconnect();\n    };\n\n    this.socket.onerror = (error) => {\n      console.error('WebSocket 错误', error);\n      this.emit('error', error);\n    };\n\n    this.socket.onmessage = (event) => {\n      try {\n        const payload = JSON.parse(event.data);\n        this.routeIncomingMessage(payload);\n      } catch (error) {\n        console.warn('无法解析的 WebSocket 消息', event.data);\n      }\n    };\n  }\n\n  private routeIncomingMessage(message: unknown) {\n    if (!isRecord(message)) return;\n    const type = typeof message.type === 'string' ? message.type : 'message';\n\n    switch (type) {\n      case 'progress_event':\n        this.emit('task_progress', isRecord(message.event) ? message.event : {});\n        break;\n      case 'task_progress':\n      case 'task_completed':\n      case 'task_failed':\n      case 'task_started':\n        this.emit(type, message);\n        this.emit('task_progress', message);\n        break;\n      case 'interaction_update':\n      case 'notification':\n      case 'research_result':\n      case 'experience_generated':\n      case 'literature_processed':\n      case 'connection_established':\n      case 'global_connection_established':\n      case 'task_status':\n      case 'history_events':\n      case 'active_tasks':\n        this.emit(type, message);\n        break;\n      default:\n        this.emit('message', message);\n    }\n  }\n\n  private flushQueue() {\n    while (this.messageQueue.length && this.socket?.readyState === WebSocket.OPEN) {\n      const message = this.messageQueue.shift();\n      if (message) {\n        this.dispatch(message.type, message.payload);\n      }\n    }\n  }\n\n  private dispatch(type: string, payload?: Record<string, unknown>) {\n    if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {\n      this.messageQueue.push({ type, payload });\n      return;\n    }\n\n    const body = JSON.stringify({ type, ...(payload || {}) });\n    this.socket.send(body);\n  }\n\n  subscribe(event: string, handler: EventHandler) {\n    this.on(event, handler);\n    return () => this.unsubscribe(event, handler);\n  }\n\n  unsubscribe(event: string, handler: EventHandler) {\n    this.off(event, handler);\n  }\n\n  send(type: string, payload?: Record<string, unknown>) {\n    this.dispatch(type, payload);\n  }\n\n  subscribeToTask(taskId: string) {\n    if (!taskId) return;\n    this.send('subscribe_task', { task_id: taskId });\n  }\n\n  unsubscribeFromTask(taskId: string) {\n    if (!taskId) return;\n    this.send('unsubscribe_task', { task_id: taskId });\n  }\n\n  subscribeToSession(sessionId: string) {\n    if (!sessionId) return;\n    this.send('subscribe_session', { session_id: sessionId });\n  }\n\n  unsubscribeFromSession(sessionId: string) {\n    if (!sessionId) return;\n    this.send('unsubscribe_session', { session_id: sessionId });\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.close();\n      this.socket = null;\n      this.connected = false;\n    }\n  }\n\n  getConnectionStatus(): ConnectionStatus {\n    return {\n      connected: this.connected,\n      reconnectAttempts: this.reconnectAttempts,\n    };\n  }\n}\n\nexport const wsManager = new WebSocketManager();\n","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/services/ws/progress-socket.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":59,"column":38,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":59,"endColumn":48}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\n\ninterface ProgressEvent {\n  task_id: string;\n  type: string;\n  progress?: number;\n  current_step?: string;\n  result?: unknown;\n  error?: string;\n  timestamp?: string;\n}\n\ninterface SocketState {\n  connected: boolean;\n  events: Record<string, ProgressEvent[]>;\n  sockets: Map<string, WebSocket>;\n  connect: (taskId: string, token?: string) => void;\n  disconnect: (taskId: string) => void;\n}\n\nconst noopStorage = {\n  getItem: () => null,\n  setItem: () => undefined,\n  removeItem: () => undefined,\n  clear: () => undefined,\n  key: () => null,\n  length: 0,\n} as Storage;\n\nexport const useProgressSocket = create<SocketState>()(\n  persist(\n    (set, get) => ({\n      connected: false,\n      events: {},\n      sockets: new Map(),\n      connect: (taskId, token) => {\n        if (typeof window === 'undefined') return;\n        if (get().sockets.has(taskId)) return;\n\n        const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';\n        const host = window.location.host;\n        const url = token ? `/ws/progress/${taskId}?token=${token}` : `/ws/progress/${taskId}`;\n        const ws = new WebSocket(`${protocol}://${host}${url}`);\n\n        ws.onopen = () => {\n          set((state) => {\n            const sockets = new Map(state.sockets);\n            sockets.set(taskId, ws);\n            return {\n              ...state,\n              connected: true,\n              sockets,\n            };\n          });\n        };\n\n        ws.onmessage = (event) => {\n          const payload = JSON.parse(event.data) as ProgressEvent;\n          set((state) => {\n            const sockets = state.sockets;\n            if (!sockets.has(taskId)) {\n              return state;\n            }\n            const nextEvents = { ...state.events };\n            const list = nextEvents[taskId] ? [...nextEvents[taskId], payload] : [payload];\n            nextEvents[taskId] = list.slice(-80);\n            return {\n              ...state,\n              events: nextEvents,\n            };\n          });\n        };\n\n        ws.onerror = () => {\n          ws.close();\n        };\n\n        ws.onclose = () => {\n          set((state) => {\n            const sockets = new Map(state.sockets);\n            sockets.delete(taskId);\n            return {\n              ...state,\n              sockets,\n              connected: sockets.size > 0,\n            };\n          });\n        };\n      },\n      disconnect: (taskId) => {\n        const sockets = get().sockets;\n        const ws = sockets.get(taskId);\n        ws?.close();\n      },\n    }),\n    {\n      name: 'progress-events',\n      storage: createJSONStorage(() => (typeof window === 'undefined' ? noopStorage : sessionStorage)),\n      partialize: (state) => ({ events: state.events }),\n    }\n  )\n);\n","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/store/app-store.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[638,641],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[638,641],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'get' is defined but never used.","line":102,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":102,"endColumn":16}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { devtools, persist } from 'zustand/middleware';\n\nexport interface User {\n  id: number;\n  username: string;\n  email: string;\n  full_name?: string;\n  avatar?: string;\n}\n\nexport interface Task {\n  id: number;\n  project_id: number;\n  task_type: string;\n  title: string;\n  status: string;\n  progress_percentage: number;\n  current_step?: string;\n  created_at: string;\n  updated_at?: string;\n  cost_estimate?: number;\n  token_usage?: number;\n  error_message?: string;\n}\n\nexport interface ResearchSession {\n  mode: 'auto' | 'deep' | 'rag';\n  sessionId: string;\n  query: string;\n  context: Record<string, any>;\n  startTime: Date;\n}\n\nexport interface Notification {\n  id: string;\n  type: 'info' | 'success' | 'warning' | 'error';\n  title: string;\n  message: string;\n  timestamp: Date;\n  read: boolean;\n}\n\ntype TaskBuckets = {\n  active: Task[];\n  completed: Task[];\n  failed: Task[];\n};\n\ninterface AppState {\n  user: User | null;\n  isAuthenticated: boolean;\n  currentSession: ResearchSession | null;\n  tasks: TaskBuckets;\n  websocket: {\n    connected: boolean;\n    lastUpdate: Date | null;\n  };\n  ui: {\n    sidebarCollapsed: boolean;\n    currentTheme: 'light' | 'dark';\n    notifications: Notification[];\n    loading: {\n      global: boolean;\n      tasks: boolean;\n      research: boolean;\n    };\n  };\n\n  setUser: (user: User | null) => void;\n  setAuthenticated: (authenticated: boolean) => void;\n  setCurrentSession: (session: ResearchSession | null) => void;\n  setTasks: (tasks: Task[]) => void;\n  updateTask: (task: Task) => void;\n  addTask: (task: Task) => void;\n  removeTask: (taskId: number) => void;\n  setWebSocketStatus: (connected: boolean) => void;\n  setSidebarCollapsed: (collapsed: boolean) => void;\n  setTheme: (theme: 'light' | 'dark') => void;\n  addNotification: (notification: Omit<Notification, 'id' | 'timestamp' | 'read'>) => void;\n  markNotificationRead: (id: string) => void;\n  clearNotifications: () => void;\n  setLoading: (key: keyof AppState['ui']['loading'], loading: boolean) => void;\n}\n\nconst categorizeTasks = (tasks: Task[]): TaskBuckets => {\n  const normalized = tasks.map((task) => ({\n    ...task,\n    status: task.status?.toLowerCase?.() ?? task.status,\n  }));\n\n  return {\n    active: normalized.filter((task) => ['pending', 'running'].includes(task.status)),\n    completed: normalized.filter((task) => task.status === 'completed'),\n    failed: normalized.filter((task) => task.status === 'failed'),\n  };\n};\n\nexport const useAppStore = create<AppState>()(\n  devtools(\n    persist(\n      (set, get) => ({\n        user: null,\n        isAuthenticated: false,\n        currentSession: null,\n        tasks: {\n          active: [],\n          completed: [],\n          failed: [],\n        },\n        websocket: {\n          connected: false,\n          lastUpdate: null,\n        },\n        ui: {\n          sidebarCollapsed: false,\n          currentTheme: 'dark',\n          notifications: [],\n          loading: {\n            global: false,\n            tasks: false,\n            research: false,\n          },\n        },\n\n        setUser: (user) => set({ user }),\n        setAuthenticated: (authenticated) => set({ isAuthenticated: authenticated }),\n        setCurrentSession: (session) => set({ currentSession: session }),\n\n        setTasks: (tasks) => set({ tasks: categorizeTasks(tasks) }),\n\n        updateTask: (updatedTask) => set((state) => {\n          const merged = [\n            ...state.tasks.active,\n            ...state.tasks.completed,\n            ...state.tasks.failed,\n          ];\n          const index = merged.findIndex((task) => task.id === updatedTask.id);\n          if (index >= 0) {\n            merged[index] = updatedTask;\n          } else {\n            merged.push(updatedTask);\n          }\n          return { tasks: categorizeTasks(merged) };\n        }),\n\n        addTask: (task) => set((state) => {\n          const merged = [\n            ...state.tasks.active,\n            ...state.tasks.completed,\n            ...state.tasks.failed,\n            task,\n          ];\n          return { tasks: categorizeTasks(merged) };\n        }),\n\n        removeTask: (taskId) => set((state) => ({\n          tasks: categorizeTasks(\n            [\n              ...state.tasks.active,\n              ...state.tasks.completed,\n              ...state.tasks.failed,\n            ].filter((task) => task.id !== taskId)\n          ),\n        })),\n\n        setWebSocketStatus: (connected) => set((state) => ({\n          websocket: {\n            connected,\n            lastUpdate: connected ? new Date() : state.websocket.lastUpdate,\n          },\n        })),\n\n        setSidebarCollapsed: (collapsed) => set((state) => ({\n          ui: { ...state.ui, sidebarCollapsed: collapsed },\n        })),\n\n        setTheme: (theme) => set((state) => ({\n          ui: { ...state.ui, currentTheme: theme },\n        })),\n\n        addNotification: (notification) => set((state) => ({\n          ui: {\n            ...state.ui,\n            notifications: [\n              ...state.ui.notifications,\n              {\n                ...notification,\n                id: Math.random().toString(36).slice(2),\n                timestamp: new Date(),\n                read: false,\n              },\n            ],\n          },\n        })),\n\n        markNotificationRead: (id) => set((state) => ({\n          ui: {\n            ...state.ui,\n            notifications: state.ui.notifications.map((notification) =>\n              notification.id === id ? { ...notification, read: true } : notification\n            ),\n          },\n        })),\n\n        clearNotifications: () => set((state) => ({\n          ui: { ...state.ui, notifications: [] },\n        })),\n\n        setLoading: (key, loading) => set((state) => ({\n          ui: {\n            ...state.ui,\n            loading: {\n              ...state.ui.loading,\n              [key]: loading,\n            },\n          },\n        })),\n      }),\n      {\n        name: 'app-store',\n        partialize: (state) => ({\n          tasks: state.tasks,\n          currentSession: state.currentSession,\n        }),\n      }\n    )\n  )\n);\n","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/stores/app.store.ts","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":66,"column":11,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":66,"endColumn":43,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1523,1523],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'createSession' has no 'await' expression.","line":115,"column":48,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":115,"endColumn":50}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { projectAPI } from '@/services/api/project';\n\nexport interface Project {\n  id: number;\n  title: string;\n  description?: string;\n  created_at: string;\n  updated_at?: string;\n}\n\nexport interface Session {\n  id: string;\n  session_id?: string;\n  project_id: number;\n  user_id: number;\n  created_at: string;\n  last_activity: string;\n  context_data?: Record<string, unknown>;\n}\n\ninterface AppState {\n  // 项目上下文\n  currentProject: Project | null;\n  availableProjects: Project[];\n\n  // 会话上下文\n  currentSession: Session | null;\n\n  // UI状态\n  sidebarCollapsed: boolean;\n  theme: 'light' | 'dark';\n\n  // 动作\n  setCurrentProject: (project: Project | null) => void;\n  setAvailableProjects: (projects: Project[]) => void;\n  setCurrentSession: (session: Session | null) => void;\n  setSidebarCollapsed: (collapsed: boolean) => void;\n  setTheme: (theme: 'light' | 'dark') => void;\n\n  // 初始化\n  initialize: () => Promise<void>;\n\n  // 会话管理\n  createSession: (projectId: number) => Promise<Session | null>;\n  restoreSession: (sessionId: string) => Promise<Session | null>;\n}\n\nexport const useAppStore = create<AppState>()(\n  persist(\n    (set, get) => ({\n      // 初始状态\n      currentProject: null,\n      availableProjects: [],\n      currentSession: null,\n      sidebarCollapsed: false,\n      theme: 'light',\n\n      // 动作实现\n      setCurrentProject: (project) => {\n        set({ currentProject: project });\n\n        // 项目切换时清空当前会话\n        if (project) {\n          get().createSession(project.id);\n        } else {\n          set({ currentSession: null });\n        }\n      },\n\n      setAvailableProjects: (projects) => set({ availableProjects: projects }),\n\n      setCurrentSession: (session) => set({ currentSession: session }),\n\n      setSidebarCollapsed: (collapsed) => set({ sidebarCollapsed: collapsed }),\n\n      setTheme: (theme) => set({ theme }),\n\n      // 初始化应用状态\n      initialize: async () => {\n        try {\n          const projects = await projectAPI.getProjects();\n          const normalizedProjects: Project[] = projects.map((project) => ({\n            id: project.id,\n            title: project.title,\n            description: project.description ?? undefined,\n            created_at: project.created_at,\n            updated_at: project.updated_at ?? undefined,\n          }));\n\n          set({ availableProjects: normalizedProjects });\n\n          // 尝试恢复会话\n          const { currentProject } = get();\n          if (!currentProject && normalizedProjects.length > 0) {\n            get().setCurrentProject(normalizedProjects[0]);\n          }\n\n          const activeProject = get().currentProject;\n          if (activeProject) {\n            const storedSession = localStorage.getItem(`session_${activeProject.id}`);\n            if (storedSession) {\n              await get().restoreSession(storedSession);\n            } else {\n              await get().createSession(activeProject.id);\n            }\n          }\n        } catch (error) {\n          console.error('App initialization failed:', error);\n        }\n      },\n\n      // 创建新会话\n      createSession: async (projectId: number) => {\n        const session = {\n          id: `local-${projectId}-${Date.now()}`,\n          session_id: `local-${projectId}-${Date.now()}`,\n          project_id: projectId,\n          user_id: 0,\n          created_at: new Date().toISOString(),\n          last_activity: new Date().toISOString(),\n          context_data: {},\n        } as Session;\n\n        set({ currentSession: session });\n        localStorage.setItem(`session_${projectId}`, JSON.stringify(session));\n        return session;\n      },\n\n      // 恢复会话\n      restoreSession: async (sessionId: string) => {\n        try {\n          const parsed = JSON.parse(sessionId) as Session;\n          set({ currentSession: parsed });\n          return parsed;\n        } catch (error) {\n          console.warn('Failed to parse stored session, creating a new one.', error);\n          const { currentProject } = get();\n          if (currentProject) {\n            localStorage.removeItem(`session_${currentProject.id}`);\n            return await get().createSession(currentProject.id);\n          }\n          return null;\n        }\n      },\n    }),\n    {\n      name: 'app-store',\n      partialize: (state) => ({\n        currentProject: state.currentProject,\n        sidebarCollapsed: state.sidebarCollapsed,\n        theme: state.theme,\n      }),\n    }\n  )\n);\n","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/stores/auth-store.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/stores/research.store.ts","messages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-nocheck\" because it alters compilation errors.","line":1,"column":1,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":1,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of an `any` typed value.","line":88,"column":3,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":88,"endColumn":44},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":109,"column":20,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":109,"endColumn":64,"fix":{"range":[3143,3148],"text":""}},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":205,"column":23,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":205,"endColumn":74,"fix":{"range":[7198,7225],"text":""}},{"ruleId":"@typescript-eslint/no-base-to-string","severity":2,"message":"'backendTaskId' will evaluate to '[object Object]' when stringified.","line":218,"column":53,"nodeType":"Identifier","messageId":"baseToString","endLine":218,"endColumn":66},{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"{}\" of template literal expression.","line":218,"column":53,"nodeType":"Identifier","messageId":"invalidType","endLine":218,"endColumn":66},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":231,"column":19,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":231,"endColumn":47,"fix":{"range":[8566,8577],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":266,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":266,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9630,9633],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9630,9633],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":284,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":284,"endColumn":82},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":284,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":284,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10159,10162],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10159,10162],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":285,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":285,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .query on an `any` value.","line":285,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":285,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":286,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":286,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .projectId on an `any` value.","line":286,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":286,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":290,"column":29,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":290,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `number`.","line":290,"column":43,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":290,"endColumn":57},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":359,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":359,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12545,12548],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12545,12548],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":365,"column":37,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":365,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":375,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":375,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .timestamp on an `any` value.","line":375,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":375,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":376,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":376,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .answer on an `any` value.","line":376,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":376,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":377,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":377,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .detailed_analysis on an `any` value.","line":377,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":377,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":378,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":378,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .key_findings on an `any` value.","line":378,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":378,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":379,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":379,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .confidence on an `any` value.","line":379,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":379,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":380,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":380,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .sources on an `any` value.","line":380,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":380,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":381,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":381,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .sources on an `any` value.","line":381,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":381,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":382,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":382,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .research_gaps on an `any` value.","line":382,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":382,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":383,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":383,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .next_questions on an `any` value.","line":383,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":383,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":384,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":384,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .methodology_suggestions on an `any` value.","line":384,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":384,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":385,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":385,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .literature_count on an `any` value.","line":385,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":385,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":386,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":386,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .main_experiences on an `any` value.","line":386,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":386,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":387,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":387,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .suggestions on an `any` value.","line":387,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":387,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .recommendations on an `any` value.","line":389,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":389,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":391,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":391,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":391,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":391,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":392,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":392,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .confidence on an `any` value.","line":392,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":392,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":393,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":393,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .processing_time on an `any` value.","line":393,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":393,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":394,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":394,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .timestamp on an `any` value.","line":394,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":394,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":406,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":406,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .task_id on an `any` value.","line":406,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":406,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":407,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":407,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":407,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":407,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":412,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":412,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":417,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":417,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":431,"column":40,"nodeType":"Property","messageId":"anyAssignment","endLine":431,"endColumn":55},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":435,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":435,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15173,15176],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15173,15176],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":438,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":438,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":438,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":438,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":467,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":467,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16157,16160],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16157,16160],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":469,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":469,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":469,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":469,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":484,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":484,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16658,16661],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16658,16661],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":486,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":486,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":486,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":486,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":510,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":510,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17495,17498],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17495,17498],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":512,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":512,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":512,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":512,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":593,"column":42,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":593,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":594,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":594,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":595,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":595,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":596,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":596,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":602,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":602,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ClarificationCard`.","line":604,"column":46,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":604,"endColumn":50}],"suppressedMessages":[],"errorCount":78,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"// @ts-nocheck\nimport { create } from 'zustand';\nimport { devtools, subscribeWithSelector } from 'zustand/middleware';\nimport { researchAPI } from '@/services/api/research';\nimport {\n  startInteraction,\n  submitInteractionSelection,\n  submitInteractionTimeout,\n  submitInteractionCustomInput,\n} from '@/services/api/interaction';\nimport { wsManager } from '@/services/websocket/WebSocketManager';\nimport type {\n  ResearchMode,\n  ResearchResult,\n  InteractionSession,\n  Task,\n  TaskStatus,\n  ClarificationCard,\n  ClarificationOption,\n  InteractionSelectionResponse,\n  InteractionTimeoutResponse,\n} from '@/types';\n\ntype SubmitQueryResult =\n  | { mode: 'auto'; interaction?: unknown; tasks?: Task[] }\n  | { mode: 'rag'; result: ResearchResult }\n  | { mode: 'deep'; task_id?: number };\n\ninterface ResearchState {\n  currentQuery: string | null;\n  currentMode: ResearchMode;\n  currentSession: InteractionSession | null;\n  currentCard: ClarificationCard | null;\n  activeTasks: Task[];\n  results: ResearchResult[];\n  isLoading: boolean;\n  error: string | null;\n  metadata: Record<string, unknown> | null;\n\n  submitQuery: (query: string, mode: ResearchMode, projectId: number) => Promise<SubmitQueryResult>;\n  updateSession: (session: InteractionSession) => void;\n  updateCard: (card: ClarificationCard) => void;\n  selectOption: (sessionId: string, optionId: string) => Promise<void>;\n  submitCustomInput: (sessionId: string, input: string) => Promise<void>;\n  handleTimeout: (sessionId: string) => Promise<void>;\n  addTask: (task: Task) => void;\n  updateTask: (taskId: string, updates: Partial<Task>) => void;\n  removeTask: (taskId: string) => void;\n  addResult: (result: ResearchResult) => void;\n  clearResults: () => void;\n  setError: (error: string | null) => void;\n  reset: () => void;\n}\n\ntype ResearchStateData = Omit<\n  ResearchState,\n  | 'submitQuery'\n  | 'updateSession'\n  | 'updateCard'\n  | 'selectOption'\n  | 'submitCustomInput'\n  | 'handleTimeout'\n  | 'addTask'\n  | 'updateTask'\n  | 'removeTask'\n  | 'addResult'\n  | 'clearResults'\n  | 'setError'\n  | 'reset'\n>;\n\nconst initialState: ResearchStateData = {\n  currentQuery: null,\n  currentMode: 'auto' as ResearchMode,\n  currentSession: null,\n  currentCard: null,\n  activeTasks: [] as Task[],\n  results: [] as ResearchResult[],\n  isLoading: false,\n  error: null as string | null,\n  metadata: null as Record<string, unknown> | null,\n};\n\nconst cloneState = <T>(state: T): T => {\n  if (typeof structuredClone === 'function') {\n    return structuredClone(state);\n  }\n  return JSON.parse(JSON.stringify(state));\n};\n\nconst withDraft = <T extends object>(\n  initializer: (\n    set: (partial: Partial<T> | ((draft: T) => void), replace?: boolean) => void,\n    get: () => T,\n    api: unknown\n  ) => T\n) =>\n  (\n    set: (partial: Partial<T> | ((draft: T) => void), replace?: boolean) => void,\n    get: () => T,\n    api: unknown\n  ) =>\n    initializer(\n      (partial, replace) => {\n        if (typeof partial === 'function') {\n          set((state: T) => {\n            const draft = cloneState(state);\n            const result = partial(draft);\n            return (result !== undefined ? result : draft) as T;\n          }, replace);\n        } else {\n          set(partial, replace);\n        }\n      },\n      get,\n      api\n    );\n\nconst createResearchState = (set: (fn: (state: ResearchState) => void) => void, get: () => ResearchState): ResearchState => {\n  const toClarificationCard = (card?: ClarificationCard | Record<string, unknown> | null): ClarificationCard | null => {\n    if (!card) return null;\n\n    const raw = card as Record<string, unknown>;\n    const rawOptions = Array.isArray(raw.options) ? raw.options : [];\n    const options: ClarificationOption[] = rawOptions.map((opt) => {\n      const optionRecord = (opt ?? {}) as Record<string, unknown>;\n      return {\n        option_id: String(optionRecord.option_id ?? ''),\n        title: typeof optionRecord.title === 'string'\n          ? optionRecord.title\n          : typeof optionRecord.label === 'string'\n            ? optionRecord.label\n            : '',\n        description: typeof optionRecord.description === 'string' ? optionRecord.description : '',\n        icon: typeof optionRecord.icon === 'string' ? optionRecord.icon : undefined,\n        estimated_time: typeof optionRecord.estimated_time === 'string' ? optionRecord.estimated_time : undefined,\n        estimated_results: typeof optionRecord.estimated_results === 'string' ? optionRecord.estimated_results : undefined,\n        confidence_score: typeof optionRecord.confidence_score === 'number' ? optionRecord.confidence_score : undefined,\n        implications: Array.isArray(optionRecord.implications)\n          ? optionRecord.implications.filter((item): item is string => typeof item === 'string')\n          : [],\n        is_recommended: Boolean(optionRecord.is_recommended),\n        metadata: (optionRecord.metadata as Record<string, unknown> | undefined) ?? {},\n      };\n    });\n\n    return {\n      session_id: String(raw.session_id ?? ''),\n      stage: String(raw.stage ?? ''),\n      question: String(raw.question ?? ''),\n      options,\n      recommended_option_id: typeof raw.recommended_option_id === 'string' ? raw.recommended_option_id : undefined,\n      timeout_seconds: raw.timeout_seconds ?? 5,\n      custom_input_allowed: raw.custom_input_allowed ?? true,\n      context: raw.context as Record<string, unknown> | undefined,\n      created_at: typeof raw.created_at === 'string' ? raw.created_at : new Date().toISOString(),\n    };\n  };\n\n  const extractAutoOptions = (metadata?: Record<string, unknown>) => {\n    if (!metadata) {\n      return {} as { keywords?: string[]; autoConfig?: Record<string, unknown>; agent?: 'claude' | 'codex' | 'gemini' };\n    }\n\n    const keywordsRaw = metadata.keywords ?? metadata.search_keywords;\n    const autoConfigRaw = metadata.auto_config ?? metadata.config;\n    const agentCandidate = typeof metadata.agent === 'string' ? metadata.agent.toLowerCase() : undefined;\n    const allowedAgents: Array<'claude' | 'codex' | 'gemini'> = ['claude', 'codex', 'gemini'];\n    const agent = allowedAgents.find((candidate) => candidate === agentCandidate) ?? undefined;\n    return {\n      keywords: Array.isArray(keywordsRaw)\n        ? keywordsRaw.filter((item): item is string => typeof item === 'string')\n        : undefined,\n      autoConfig: autoConfigRaw && typeof autoConfigRaw === 'object'\n        ? (autoConfigRaw as Record<string, unknown>)\n        : undefined,\n      agent,\n    };\n  };\n\n  const runAutoPipeline = async (\n    query: string,\n    projectId: number,\n    options?: { keywords?: string[]; autoConfig?: Record<string, unknown>; agent?: 'claude' | 'codex' | 'gemini' }\n  ) => {\n    set((state: ResearchState) => {\n      state.isLoading = true;\n      state.error = null;\n    });\n\n    try {\n      const response = await researchAPI.triggerResearch({\n        query,\n        mode: 'auto',\n        project_id: projectId,\n        keywords: options?.keywords,\n        auto_config: options?.autoConfig,\n        agent: options?.agent,\n      });\n\n      if (!response || response.mode !== 'auto') {\n        throw new Error('自动模式调用返回异常');\n      }\n\n      const payload = (response.payload ?? {}) as Record<string, unknown>;\n      const tasksRaw = Array.isArray(payload.tasks) ? payload.tasks : [];\n      const agentPlan = payload.agent_plan;\n      const agentName = payload.agent;\n      const allowedAgents: Array<'claude' | 'codex' | 'gemini'> = ['claude', 'codex', 'gemini'];\n      const normalizedAgentName =\n        typeof agentName === 'string'\n          ? allowedAgents.find((candidate) => candidate === agentName.toLowerCase())\n          : undefined;\n\n      const normalizedTasks: Task[] = tasksRaw.map((task, index) => {\n        const taskRecord = (task ?? {}) as Record<string, unknown>;\n        const backendTaskId = taskRecord.task_id ?? taskRecord.id;\n        const generatedId = backendTaskId ? `task-${backendTaskId}` : `auto-${Date.now()}-${index}`;\n        return {\n          id: generatedId,\n          backendTaskId,\n          type: (taskRecord.type || 'auto_pipeline') as Task['type'],\n          status: (taskRecord.status || 'pending') as TaskStatus,\n          progress: Number(taskRecord.progress ?? 0),\n          title: typeof taskRecord.title === 'string' ? taskRecord.title : undefined,\n          description: typeof taskRecord.message === 'string'\n            ? taskRecord.message\n            : typeof taskRecord.description === 'string'\n              ? taskRecord.description\n              : undefined,\n          result: taskRecord.result as unknown,\n        };\n      });\n\n      set((state: ResearchState) => {\n        state.activeTasks = [...normalizedTasks, ...state.activeTasks];\n        state.isLoading = false;\n        state.metadata = {\n          ...(state.metadata || {}),\n          pending_query: null,\n          last_agent_plan: agentPlan,\n          last_agent: normalizedAgentName ?? options?.agent,\n        };\n        state.currentCard = null;\n      });\n\n      normalizedTasks\n        .filter((task) => task.backendTaskId)\n        .forEach((task) => wsManager.subscribeToTask(String(task.backendTaskId)));\n\n      return {\n        mode: response.mode,\n        tasks: normalizedTasks,\n      } satisfies SubmitQueryResult;\n    } catch (error: unknown) {\n      set((state: ResearchState) => {\n        state.isLoading = false;\n        state.error = error instanceof Error ? error.message : '自动模式执行失败';\n      });\n      throw error;\n    }\n  };\n\n  const processInteractionOutcome = async (\n    response: InteractionSelectionResponse | InteractionTimeoutResponse,\n    optionMetadata?: Record<string, any>\n  ) => {\n    if (!response?.success) {\n      set((state: ResearchState) => {\n        state.isLoading = false;\n        state.error = response?.error || '交互处理失败';\n      });\n      return;\n    }\n\n    if (response.next_clarification_card && response.next_action === 'next_clarification') {\n      set((state: ResearchState) => {\n        state.currentCard = toClarificationCard(response.next_clarification_card);\n        state.isLoading = false;\n      });\n      return;\n    }\n\n    const pending = (get().metadata as Record<string, any> | null)?.pending_query;\n    const pendingQuery = pending?.query;\n    const pendingProject = pending?.projectId;\n\n    if (pendingQuery && pendingProject) {\n      const autoOptions = extractAutoOptions(optionMetadata);\n      await runAutoPipeline(pendingQuery, pendingProject, autoOptions);\n    } else {\n      set((state: ResearchState) => {\n        state.isLoading = false;\n        state.currentCard = null;\n      });\n    }\n  };\n\n  return {\n    ...initialState,\n\n    submitQuery: async (query: string, mode: ResearchMode, projectId: number) => {\n      set((state: ResearchState) => {\n        state.isLoading = true;\n        state.error = null;\n        state.currentQuery = query;\n        state.currentMode = mode;\n      });\n\n      try {\n        if (mode === 'auto') {\n          try {\n            const interaction = await startInteraction({\n              project_id: projectId,\n              context_type: 'search',\n              user_input: query,\n              additional_context: {},\n            });\n\n            if (!interaction.success) {\n              throw new Error(interaction.error || '智能交互初始化失败');\n            }\n\n            set((state: ResearchState) => {\n              state.isLoading = false;\n              state.metadata = {\n                ...(state.metadata || {}),\n                pending_query: { query, projectId, mode },\n              };\n\n              if (interaction.session_id) {\n                state.currentSession = {\n                  session_id: interaction.session_id,\n                  project_id: projectId,\n                  context_type: 'search',\n                  created_at: new Date().toISOString(),\n                  is_active: true,\n                };\n              }\n\n              state.currentCard = toClarificationCard(interaction.clarification_card);\n            });\n\n            if (interaction.requires_clarification && interaction.clarification_card) {\n              return { mode: 'auto', interaction };\n            }\n\n            return await runAutoPipeline(query, projectId);\n          } catch (interactionError) {\n            console.warn('智能交互启动失败，回退至直接自动流程', interactionError);\n            return await runAutoPipeline(query, projectId);\n          }\n        }\n\n        const response = await researchAPI.triggerResearch({\n          query,\n          mode,\n          project_id: projectId,\n        }) as { mode: string; payload: any };\n\n        if (!response || !response.mode) {\n          throw new Error('研究服务未返回有效结果');\n        }\n\n        const { mode: responseMode, payload } = response;\n\n       if (responseMode === 'rag') {\n         const result: ResearchResult = {\n            id: `result-${Date.now()}`,\n            project_id: projectId,\n            mode: responseMode,\n            question: query,\n            query,\n            status: 'completed',\n            timestamp: payload?.timestamp || new Date().toISOString(),\n            answer: payload?.answer || '',\n            detailed_analysis: payload?.detailed_analysis || '',\n            key_findings: payload?.key_findings || [],\n            confidence: payload?.confidence ?? 0,\n            sources: payload?.sources || [],\n            references: payload?.sources || [],\n            research_gaps: payload?.research_gaps || [],\n            next_questions: payload?.next_questions || [],\n            methodology_suggestions: payload?.methodology_suggestions || [],\n            literature_count: payload?.literature_count || 0,\n            main_experiences: payload?.main_experiences || [],\n            suggestions: payload?.suggestions || [],\n            metadata: {\n              recommendation_notes: payload?.recommendations,\n            },\n            error_message: payload?.error,\n            confidence_score: payload?.confidence,\n            processing_time: payload?.processing_time,\n            created_at: payload?.timestamp || new Date().toISOString(),\n          };\n\n          set((state: ResearchState) => {\n            state.results = [result, ...state.results];\n            state.isLoading = false;\n          });\n\n          return { mode: responseMode, result };\n        }\n\n        if (responseMode === 'deep') {\n          const taskId = payload?.task_id;\n          const description = payload?.message || '深度研究任务已启动';\n\n          if (taskId) {\n            const trackedTask: Task = {\n              id: `task-${taskId}`,\n              backendTaskId: taskId,\n              type: 'experience_generation',\n              status: 'pending',\n              progress: 0,\n              title: '深度研究经验生成',\n              description,\n            };\n\n            set((state: ResearchState) => {\n              state.activeTasks = [trackedTask, ...state.activeTasks];\n            });\n\n            wsManager.subscribeToTask(String(taskId));\n          }\n\n          set((state: ResearchState) => {\n            state.isLoading = false;\n          });\n\n          return { mode: responseMode, task_id: taskId };\n        }\n\n        throw new Error(`暂不支持的研究模式: ${responseMode}`);\n      } catch (error: any) {\n        set((state: ResearchState) => {\n          state.isLoading = false;\n          state.error = error.message || '提交查询失败';\n        });\n        throw error;\n      }\n    },\n\n    updateSession: (session: InteractionSession) => {\n      set((state: ResearchState) => {\n        state.currentSession = session;\n      });\n    },\n\n    updateCard: (card: ClarificationCard) => {\n      set((state: ResearchState) => {\n        state.currentCard = card;\n      });\n    },\n\n    selectOption: async (sessionId: string, optionId: string) => {\n      set((state: ResearchState) => {\n        state.isLoading = true;\n        state.error = null;\n      });\n\n      try {\n       const card = get().currentCard;\n        const selectedOption = card?.options.find((opt: ClarificationOption) => opt.option_id === optionId);\n        const response = await submitInteractionSelection(sessionId, optionId);\n        await processInteractionOutcome(response, selectedOption?.metadata);\n      } catch (error: any) {\n        set((state: ResearchState) => {\n          state.error = error.message || '选择失败';\n          state.isLoading = false;\n        });\n      }\n    },\n\n    submitCustomInput: async (sessionId: string, input: string) => {\n      set((state: ResearchState) => {\n        state.isLoading = true;\n        state.error = null;\n      });\n\n      try {\n        const response = await submitInteractionCustomInput(sessionId, input);\n        await processInteractionOutcome(response);\n      } catch (error: any) {\n        set((state: ResearchState) => {\n          state.error = error.message || '提交失败';\n          state.isLoading = false;\n        });\n      }\n    },\n\n    handleTimeout: async (sessionId: string) => {\n      const currentCard = get().currentCard;\n      if (!currentCard) return;\n\n      const recommendedOptionId = currentCard.recommended_option_id;\n      if (!recommendedOptionId) return;\n\n      set((state: ResearchState) => {\n        state.isLoading = true;\n        state.error = null;\n      });\n\n      try {\n        const recommendedOption = currentCard.options.find(\n          (opt: ClarificationOption) => opt.option_id === recommendedOptionId\n        );\n        const response = await submitInteractionTimeout(sessionId);\n        await processInteractionOutcome(response, recommendedOption?.metadata);\n      } catch (error: any) {\n        set((state: ResearchState) => {\n          state.error = error.message || '自动选择失败';\n          state.isLoading = false;\n        });\n      }\n    },\n\n    addTask: (task: Task) => {\n      set((state: ResearchState) => {\n        const index = state.activeTasks.findIndex(\n          (item) => item.id === task.id || (item.backendTaskId && item.backendTaskId === task.backendTaskId)\n        );\n        if (index === -1) {\n          state.activeTasks.push(task);\n        } else {\n          state.activeTasks[index] = task;\n        }\n      });\n    },\n\n    updateTask: (taskId: string, updates: Partial<Task>) => {\n      set((state: ResearchState) => {\n        const index = state.activeTasks.findIndex(\n          (task) => task.id === taskId || String(task.backendTaskId) === String(taskId)\n        );\n        if (index !== -1) {\n          Object.assign(state.activeTasks[index], updates);\n        }\n      });\n    },\n\n    removeTask: (taskId: string) => {\n      set((state: ResearchState) => {\n        state.activeTasks = state.activeTasks.filter(\n          (task) => task.id !== taskId && String(task.backendTaskId) !== String(taskId)\n        );\n      });\n      wsManager.unsubscribeFromTask(taskId);\n    },\n\n    addResult: (result: ResearchResult) => {\n      set((state: ResearchState) => {\n        state.results.push(result);\n      });\n    },\n\n    clearResults: () => {\n      set((state: ResearchState) => {\n        state.results = [];\n      });\n    },\n\n    setError: (error: string | null) => {\n      set((state: ResearchState) => {\n        state.error = error;\n      });\n    },\n\n    reset: () => {\n     const state = get();\n      state.activeTasks.forEach((task: Task) => {\n        wsManager.unsubscribeFromTask((task.backendTaskId && String(task.backendTaskId)) || task.id);\n      });\n      if (state.currentSession?.session_id) {\n        wsManager.unsubscribeFromSession(state.currentSession.session_id);\n      }\n\n      set(() => ({ ...initialState }));\n    },\n  };\n};\n\nexport const useResearchStore = create<ResearchState>()(\n  devtools(\n    subscribeWithSelector(withDraft(createResearchState)),\n    {\n      name: 'research-store',\n    }\n  )\n);\n\nwsManager.on('task_progress', (data) => {\n  useResearchStore.getState().updateTask(data.task_id, {\n    progress: data.progress,\n    status: data.status,\n    message: data.message,\n  });\n});\n\nwsManager.on('interaction_update', (data) => {\n  if (data.action === 'new_card') {\n    const card = data.data ? data.data : undefined;\n    if (card) {\n      useResearchStore.getState().updateCard(card);\n    }\n  }\n});\n\nwsManager.on('research_result', (data) => {\n  useResearchStore.getState().addResult(data);\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/stores/system-store.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/styles/theme.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":106,"column":7,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":106,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2277,2280],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2277,2280],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":108,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":108,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [key] on an `any` value.","line":108,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":108,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of an `any` typed value.","line":110,"column":3,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":110,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [shade] on an `any` value.","line":110,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":110,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":117,"column":10,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":117,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of an `any` typed value.","line":119,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":119,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":131,"column":12,"nodeType":"Property","messageId":"anyAssignment","endLine":131,"endColumn":18}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 统一的设计系统配置\nexport const theme = {\n  // 品牌色\n  colors: {\n    primary: {\n      50: '#f0f9ff',\n      100: '#e0f2fe',\n      200: '#bae6fd',\n      300: '#7dd3fc',\n      400: '#38bdf8',\n      500: '#0ea5e9',\n      600: '#0284c7',\n      700: '#0369a1',\n      800: '#075985',\n      900: '#0c4a6e',\n    },\n    secondary: {\n      50: '#faf5ff',\n      100: '#f3e8ff',\n      200: '#e9d5ff',\n      300: '#d8b4fe',\n      400: '#c084fc',\n      500: '#a855f7',\n      600: '#9333ea',\n      700: '#7e22ce',\n      800: '#6b21a8',\n      900: '#581c87',\n    },\n    success: '#10b981',\n    warning: '#f59e0b',\n    error: '#ef4444',\n    info: '#3b82f6',\n    dark: {\n      bg: '#0f172a',\n      card: '#1e293b',\n      border: '#334155',\n      text: '#cbd5e1',\n    },\n    light: {\n      bg: '#f8fafc',\n      card: '#ffffff',\n      border: '#e2e8f0',\n      text: '#1e293b',\n    }\n  },\n\n  // 间距系统\n  spacing: {\n    xs: '0.5rem',\n    sm: '1rem',\n    md: '1.5rem',\n    lg: '2rem',\n    xl: '3rem',\n    '2xl': '4rem',\n  },\n\n  // 圆角系统\n  borderRadius: {\n    none: '0',\n    sm: '0.25rem',\n    DEFAULT: '0.5rem',\n    md: '0.75rem',\n    lg: '1rem',\n    xl: '1.5rem',\n    full: '9999px',\n  },\n\n  // 阴影系统\n  shadows: {\n    sm: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',\n    DEFAULT: '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)',\n    md: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n    lg: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\n    xl: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',\n    '2xl': '0 25px 50px -12px rgba(0, 0, 0, 0.25)',\n    inner: 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)',\n  },\n\n  // 动画时长\n  animation: {\n    fast: '150ms',\n    normal: '300ms',\n    slow: '500ms',\n  },\n\n  // 字体系统\n  fonts: {\n    sans: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif',\n    mono: 'SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace',\n  },\n\n  // 断点\n  breakpoints: {\n    xs: '480px',\n    sm: '640px',\n    md: '768px',\n    lg: '1024px',\n    xl: '1280px',\n    '2xl': '1536px',\n  },\n};\n\n// 获取主题配置的辅助函数\nexport const getThemeColor = (colorKey: string, shade: number = 500) => {\n  const keys = colorKey.split('.');\n  let value = theme.colors as any;\n  for (const key of keys) {\n    value = value[key];\n  }\n  return typeof value === 'object' ? value[shade] : value;\n};\n\n// 暗黑模式切换hook\nimport { useState, useEffect } from 'react';\n\nexport const useDarkMode = () => {\n  const [isDark, setIsDark] = useState(() => {\n    const saved = localStorage.getItem('darkMode');\n    return saved ? JSON.parse(saved) : false;\n  });\n\n  useEffect(() => {\n    localStorage.setItem('darkMode', JSON.stringify(isDark));\n    if (isDark) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [isDark]);\n\n  return { isDark, toggleDark: () => setIsDark(!isDark) };\n};\n\n// 响应式断点hook\nexport const useBreakpoint = () => {\n  const [breakpoint, setBreakpoint] = useState('lg');\n\n  useEffect(() => {\n    const handleResize = () => {\n      const width = window.innerWidth;\n      if (width < 480) setBreakpoint('xs');\n      else if (width < 640) setBreakpoint('sm');\n      else if (width < 768) setBreakpoint('md');\n      else if (width < 1024) setBreakpoint('lg');\n      else if (width < 1280) setBreakpoint('xl');\n      else setBreakpoint('2xl');\n    };\n\n    handleResize();\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return breakpoint;\n};","usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/theme/ant-theme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/wolf/vibereserch/frontend/src/types/user.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
